<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子李的博客</title>
  <subtitle>萧瑟的秋风，倔强的生命！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mlijin9011.github.io/"/>
  <updated>2017-11-06T07:47:47.000Z</updated>
  <id>http://mlijin9011.github.io/</id>
  
  <author>
    <name>Li Jin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift学习笔记（1）</title>
    <link href="http://mlijin9011.github.io/2017/10/16/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
    <id>http://mlijin9011.github.io/2017/10/16/Swift学习笔记（1）/</id>
    <published>2017-10-16T06:35:53.000Z</published>
    <updated>2017-11-06T07:47:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Swift-语法"><a href="#1-Swift-语法" class="headerlink" title="1. Swift 语法"></a>1. Swift 语法</h1><a id="more"></a>
<h2 id="1-1-可选类型"><a href="#1-1-可选类型" class="headerlink" title="1.1 可选类型"></a>1.1 可选类型</h2><p>1.可选类型解析</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var errorCode: Int? = 404              // 在类型后面添加一个?，表示是可选类型</div><div class="line">print(errorCode)                       // Optional(404)</div><div class="line">if errorCode != nil &#123;                  // 确定可选类型包含值后可以在变量名后加!强制解析</div><div class="line">  print(errorCode!)                    // 404</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-2-基本运算符"><a href="#1-2-基本运算符" class="headerlink" title="1.2 基本运算符"></a>1.2 基本运算符</h2><p>1.空合运算符: a ?? b    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let optionalE: Int? = 4     // ?? 前面那个值要为可选类型</div><div class="line">let d = optionalE ?? b      // 4, 如果optionalE为空,d为b的值，如果不为空就是optionalE解包后的值</div></pre></td></tr></table></figure>
<p>2.区间运算符: 表示一个区间的值    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1...5                       // 定义1到5,5个数,包含1和5</div><div class="line">1..&lt;5                       // 定义1到5,4个数,不包含5</div></pre></td></tr></table></figure>
<h2 id="1-3-字符串"><a href="#1-3-字符串" class="headerlink" title="1.3 字符串"></a>1.3 字符串</h2><p>1.初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var emptyString1 = &quot;&quot;                  // 空字符串,&quot;&quot;内为空</div><div class="line">let emptyString2 = String()            // 空字符串,通过String()初始化方法置为空</div></pre></td></tr></table></figure>
<p>字符串的值传递方式是通过值传递的,传递的时候是对已有的字符串创建副本再进行传递或赋值操作.</p>
<p>2.字符的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var string1 = &quot;Not Empty&quot;</div><div class="line">let char: Character = &quot;a&quot;             // a, 字符的类型为Character</div><div class="line">for char in string1.characters &#123;      // for循环后面会详述</div><div class="line">    print(char)                       // 依次输出emptyString1中所有字符</div><div class="line">&#125;</div><div class="line">string1.characters.count              // 9, 获取字符串中字符个数包括空格</div></pre></td></tr></table></figure>
<p>3.字符串拼接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var string1 = &quot;Hello&quot;</div><div class="line">var string2 = &quot; World&quot;</div><div class="line"></div><div class="line">var string3 = string1 + string2        // Hello World, 通过&quot;+&quot;将两个字符串相连</div><div class="line"></div><div class="line">string1 += string2                     // Hello World, 等价于string1 = string1+string2</div><div class="line">string1.append(&quot; !&quot;)                   // Hello World !, 通过append()方法拼接</div><div class="line"></div><div class="line">let messages = &quot;Hello \(string2) !&quot;    // Hello World !, 通过将常量或变量放入\()中</div></pre></td></tr></table></figure>
<pre><code>注意：print(string1.append(string2))    //() 因为append没有返回值，是直接改变sting1的值
</code></pre><p>4.字符串索引</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let messages = &quot;Hello World !&quot;   </div><div class="line">             </div><div class="line">let messChar = messages[messages.startIndex]  // H,通过第一个字符的索引获取字符</div><div class="line"></div><div class="line">let firstIndex = messages.index(after: messages.startIndex)  // 1, 第一个字符的索引</div><div class="line">let lastIndex = messages.index(before: messages.endIndex)    // 13, 最后一个字符的索引</div><div class="line"></div><div class="line">let index = messages.index(messages.startIndex, offsetBy: 4) // 4, 初始位置偏移4</div><div class="line">let indexChar = messages[index]                              // o, 通过索引获得的字符为o</div></pre></td></tr></table></figure>
<pre><code>注意:索引不能越界
</code></pre><p>5.字符串的插入和删除    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var welcome = &quot;Hello&quot;</div><div class="line"></div><div class="line">welcome.insert(&quot;!&quot;, at: welcome.endIndex)  </div><div class="line">print(welcome)                             // Hello!, 将!插入welcome的末尾</div><div class="line"></div><div class="line">welcome.insert(contentsOf: &quot;world&quot;.characters, at: welcome.index(before: welcome.endIndex))</div><div class="line">print(welcome)                             // Helloworld!, 注意:插入的内容是:&quot;world&quot;.characters</div><div class="line"></div><div class="line">welcome.remove(at: welcome.index(before: welcome.endIndex)) </div><div class="line">print(welcome)                             // Helloworld, 删除最后一位</div><div class="line"></div><div class="line">let range = welcome.index(welcome.endIndex, offsetBy: -5)..&lt; welcome.endIndex // 后5位的范围</div><div class="line">welcome.removeSubrange(range)              // 删除&quot;world&quot;</div><div class="line">print(welcome)                             // Hello</div></pre></td></tr></table></figure>
<p>6.字符串的比较操作    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var welcome = &quot;Hello&quot;</div><div class="line">welcome == &quot;Hello&quot;                     // true, 字符串可以用==, !=进行比较操作</div></pre></td></tr></table></figure>
<h2 id="1-4-数组"><a href="#1-4-数组" class="headerlink" title="1.4 数组"></a>1.4 数组</h2><p>有序的,同一类型的多个元素的集合</p>
<p>1.定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arrInts = [Int]()                  // [], 定义一个元素类型为Int的可变空数组</div><div class="line">arrInts = []                           // [], 空数组的简单定义方式</div><div class="line">arrInts = [1, 4]                       // [1, 4], 数组的简单构造方法</div><div class="line">var twoDouble = [Double](repeating: 2.0, count: 2)  // [2.0, 2.0] 相同元素数组的创建</div></pre></td></tr></table></figure>
<p>2.数组操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var arr1 = [1, 2, 3]</div><div class="line">var arr2 = [4, 5]</div><div class="line"></div><div class="line">var array = arr1 + arr2                 // 数组也能用&quot;+&quot;拼接</div><div class="line">arr1 += arr2                            // 等价于arr1 = arr1 + arr2</div><div class="line">                    </div><div class="line">let secondNum = arr1[2]                 // 3, 通过下标访问元素,数组中第一个元素的下标是0</div><div class="line">arr1[0] = 10                            // 将arr1的第一个元素改为 10</div><div class="line"></div><div class="line">arr1[1...2] = [11, 12]                  // 将数组中的[1...2]区间改为[11, 12]中的元素</div><div class="line">print(arr1)                             // [10, 11, 12, 4, 5]</div><div class="line"></div><div class="line">arr1.append(6)                          // arr1 中插入一个元素6</div><div class="line">arr1.insert(1, at: 0)                   // 将1插入到数组第一个元素</div><div class="line">arr1.remove(at: 0)                      // 移除0位置的元素,之前后面的元素会自动往前一位</div><div class="line">arr1.removeLast()                       // 移除最后一个元素</div></pre></td></tr></table></figure>
<p>3.遍历</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (index, value) in arr1.enumerated() &#123;  // 使用迭代器获取数组元素以及索引号</div><div class="line">    print(&quot;索引:\(index), 元素:\(value)&quot;)   // 依次打印索引号及元素 索引号:0, 元素:10 ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-5-集合"><a href="#1-5-集合" class="headerlink" title="1.5 集合"></a>1.5 集合</h2><p>存储相同类型没有确定顺序的元素,相同元素只能出现一次</p>
<p>1.定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var char1 = Set&lt; Character &gt;()          // 创建一个Character类型的空集合</div><div class="line">let char2:Set&lt; Character &gt; = []         // 定义空集合的简便方法.类型:Set&lt; Character &gt;</div><div class="line"></div><div class="line">var letter1: Set = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]      // 集合类型可以写成Set,但必须显示声明,不能省略</div><div class="line">var letter2 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]           // Set省略后,根据自动类型推断,letter2就是数组类型</div></pre></td></tr></table></figure>
<p>2.操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">letter1.insert(&quot;a&quot;)                    // 如果插入的元素如果已经在集合中,那么会被忽略</div><div class="line">letter1.remove(&quot;c&quot;)                    // c, 要删除的元素在集合中,则返回元素,否则返回nil</div><div class="line">letter1.contains(&quot;a&quot;)                  // true, 是否包含某个元素</div><div class="line">	</div><div class="line">var num1: Set = [&quot;3&quot;, &quot;2&quot;, &quot;1&quot;, &quot;5&quot;, &quot;7&quot;]</div><div class="line">let num2: Set = [&quot;3&quot;, &quot;2&quot;, &quot;5&quot;, &quot;7&quot;]</div><div class="line">let num3: Set = [&quot;1&quot;, &quot;6&quot;, &quot;5&quot;]</div><div class="line"></div><div class="line">num1.intersection(num3)              // [&quot;1&quot;, &quot;5&quot;], 两个集合的交集</div><div class="line">num1.union(num3)                     // [&quot;5&quot;, &quot;2&quot;, &quot;1&quot;, &quot;7&quot;, &quot;6&quot;, &quot;3&quot;], 两个集合的并集</div><div class="line">num1.subtracting(num3)               // [&quot;2&quot;, &quot;7&quot;, &quot;3&quot;], 只在集合1不在集合2的部分</div><div class="line">num1.symmetricDifference(num3)       // [&quot;2&quot;, &quot;7&quot;, &quot;6&quot;, &quot;3&quot;], 两个集合的并集中非交集部分</div><div class="line"></div><div class="line">num1 == num2                         // false, 判断两个集合包含的元素是否都相同</div><div class="line">num2.isSubset(of: num1)              // true, num2是num1的子集</div><div class="line">num1.isSuperset(of: num2)            // true, num1是num2的超集合</div><div class="line">num1.isDisjoint(with: num2)          // false, 判断两个集合中的元素是否都不相同</div></pre></td></tr></table></figure>
<p>3.遍历</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for char in letter1 &#123;</div><div class="line">    print(char)                      // 不按顺序的输出集合中每个元素</div><div class="line">&#125;</div><div class="line"></div><div class="line">for char in letter1.sorted() &#123;</div><div class="line">    print(char)                      // 按特定顺序的输出集合中每个元素</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-6-字典"><a href="#1-6-字典" class="headerlink" title="1.6 字典"></a>1.6 字典</h2><p>字典中的每个元素都是一个键值对,每个键值对有一个对应的key和value</p>
<p>1.定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var chars: [String: String] = [&quot;char1&quot;:&quot;A&quot;, &quot;char2&quot;:&quot;B&quot;]  // 键和值都是String类型</div><div class="line">var charDict = [&quot;char1&quot;:&quot;A&quot;, &quot;char2&quot;:&quot;B&quot;]  // 系统会作自动类型推断,类型也可以省略</div></pre></td></tr></table></figure>
<p>2.操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">chars[&quot;char2&quot;]                             // b, 通过字典的key访问value</div><div class="line">let arrKeys = [String](charDict.keys)      // [&quot;char1&quot;, &quot;char2&quot;], 获取字典中所有key的数组</div><div class="line">let arrValues = [String](charDict.values)  // [&quot;A&quot;, &quot;B&quot;], 获取字典中所有value的数组</div><div class="line"></div><div class="line">chars[&quot;char3&quot;] = &quot;C&quot;                       // chars中新增一个键值对</div><div class="line">chars[&quot;char1&quot;] = &quot;a&quot;                       // chars中修改key对应的value</div><div class="line">chars[&quot;char3&quot;] = nil                       // 将key对应的value设置为nil,移除键值对</div><div class="line"></div><div class="line">chars.updateValue(&quot;b&quot;, forKey: &quot;char2&quot;)    // 更新键值对,要是这个键不存在则会添加一个</div><div class="line">chars.removeValue(forKey: &quot;char2&quot;)         // 移除键值对</div></pre></td></tr></table></figure>
<p>3.遍历</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">for (key, value) in charDict &#123;             // 遍历字典中的所有key value</div><div class="line">    print(&quot;\(key): \(value)&quot;)              // char2: B, char1: A</div><div class="line">&#125;</div><div class="line">for key in charDict.keys &#123;                 // 遍历字典中的所有key</div><div class="line">    print(key)                             // char2, char1</div><div class="line">&#125;</div><div class="line"></div><div class="line">for value in charDict.values &#123;             // 遍历字典中的所有value</div><div class="line">    print(value)                           // B, A</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-7-控制流"><a href="#1-7-控制流" class="headerlink" title="1.7 控制流"></a>1.7 控制流</h2><p>1.for循环    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for num in 1...5 &#123;                     // 依次把闭区间[1, 5]中的值赋值给num</div><div class="line">    print(num)                         // 依次输出5个数字</div><div class="line">&#125;</div><div class="line"></div><div class="line">for _ in 1...5 &#123;                       // _ 替代变量名</div><div class="line">    print(&quot;A&quot;)                         // 依次输出5个字符串&quot;A&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.repeat-while循环</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var num = 3</div><div class="line">repeat &#123;                               // 第一次即使条件不满足也会进入&#123;&#125;</div><div class="line">    print(num)                         // 3</div><div class="line">    num = num - 1                      // 每次循环 num - 1</div><div class="line">&#125; while num &gt; 0</div></pre></td></tr></table></figure>
<p>3.switch语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var num = 12</div><div class="line">switch num &#123;</div><div class="line">case 2:</div><div class="line">    print(&quot;num等于2&quot;)                  // 每个case分支至少需要包含一条语句</div><div class="line">case 3, 4, 5:                         // case语句可以匹配多个值,之间用(,)隔开</div><div class="line">    print(&quot;num == 3 or 4 or 5&quot;)       // case分支末尾不需要写break,不会发生贯穿</div><div class="line">case 6..&lt;10:                          // case语句也支持区间</div><div class="line">    print(&quot;num大于等于6,且小于10&quot;)</div><div class="line">case 10..&lt;19 where num % 3 == 0:      // 使用where语句来增加额外判断条件</div><div class="line">    print(&quot;num大于等于10,且小于19,且能被3整除&quot;)</div><div class="line">default:</div><div class="line">    print(&quot;上面的情况都不满足&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.控制转移语句    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var num = 2</div><div class="line">switch num &#123;</div><div class="line">case 2:</div><div class="line">    print(&quot;Hello&quot;)                     // Hello</div><div class="line">    fallthrough                        // 贯穿,使用fallthrough可以连续到下一个case中</div><div class="line">default:</div><div class="line">    print(&quot;World&quot;)                     // World</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.循环语句的标签设置    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var num1 = 6</div><div class="line">var num2 = 4</div><div class="line">num1Loop: while num1 &gt; 0 &#123;</div><div class="line">    num2Loop: while num2 &gt; 0 &#123;</div><div class="line">        print(num2)                    // 4</div><div class="line">        num2 = num2 - 1</div><div class="line">        break num1Loop                 // 终止第一个循环</div><div class="line">    &#125;</div><div class="line">    print(num1)                        // 已经在num2Loop中执行了退出num1Loop循环，所以不会执行此语句</div><div class="line">    num1 = num1 - 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6.guard语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var num = 4</div><div class="line">func guardTest() &#123;</div><div class="line">    guard num == 5 else &#123;             // 如果guard条件不满足,则会执行else后面的&#123;&#125;</div><div class="line">        print(num)                    // 4</div><div class="line">        return                        // 由于有return, guard语句必需要在函数中</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">guardTest()</div></pre></td></tr></table></figure>
<p>7.版本适配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if #available(iOS 11, *) &#123; // 平台还可以是: iOS macOS watchOS tvOS</div><div class="line">    // 使用iOS11及以上的API</div><div class="line">&#125; else &#123;</div><div class="line">    // 使用iOS11以下的API</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-8-函数"><a href="#1-8-函数" class="headerlink" title="1.8 函数"></a>1.8 函数</h2><p>1.参数的标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">func sum(_ name1: String, label2 name2: String) &#123;  // 下划线(_)来代替标签</div><div class="line">    print(name1 + name2)                           // KobeBryant</div><div class="line">&#125;</div><div class="line">sum(&quot;Kobe&quot;, label2: &quot;Bryant&quot;)                      // 忽略的参数标签此处不会显示</div></pre></td></tr></table></figure>
<p>2.参数的默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">func defaultLabel(label1 name1: String, label2 name2: String = &quot;Bryant&quot;) &#123;</div><div class="line">    print(name1 + name2)</div><div class="line">&#125;</div><div class="line">defaultLabel(label1: &quot;Kobe&quot;, label2: &quot;Lee&quot;)  // KobeLee</div><div class="line">defaultLabel(label1: &quot;Kobe&quot;)                 // KobeBryant, 有默认参数可以省略</div></pre></td></tr></table></figure>
<p>3.可变参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func avarageNum(_ num: Double...) -&gt; Double &#123; // 参数后面加...表示有多个参数</div><div class="line">    var total: Double = 0</div><div class="line">    for number in num &#123;</div><div class="line">        total += number</div><div class="line">    &#125;</div><div class="line">    return total/Double(num.count)</div><div class="line">&#125;</div><div class="line"></div><div class="line">avarageNum(2, 6, 4, 8, 7)                     // 5.4, 参数个数不限</div></pre></td></tr></table></figure>
<pre><code>注意: 一个函数只能有一个可变参数
</code></pre><p>4.inout改变输入参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func swapTwoInts(_ a: inout Int, _ b: inout Int) &#123;  //  加inout可以传指针</div><div class="line">    let temp = a</div><div class="line">    a = b</div><div class="line">    b = temp</div><div class="line">&#125;</div><div class="line">var a = 2</div><div class="line">var b = 3</div><div class="line">swapTwoInts(&amp;a, &amp;b)                     // 此处传进去的是a,b两个变量的地址</div><div class="line">print(&quot;a=\(a), b=\(b)&quot;)                 // a=3, b=2, swapTwoInts后a,b的值改变了</div></pre></td></tr></table></figure>
<p>5.函数类型</p>
<p>可以把一个函数当作常量或变量赋值给一个常量或者变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var swap = swapTwoInts                  // swap的类型为(inout Int, inout Int) -&gt; ()</div><div class="line">swap(&amp;a, &amp;b)</div><div class="line">print(&quot;a=\(a), b=\(b)&quot;)                 // a=2, b=3, 函数swap等价于swapTwoInts</div></pre></td></tr></table></figure>
<p>6.函数参数</p>
<p>可以把一个函数当做参数传入另一个函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">func sum(num1: Int, num2: Int) -&gt; Int &#123; // 和</div><div class="line">    return num1 + num2</div><div class="line">&#125;</div><div class="line">func sub(num1: Int, num2: Int) -&gt; Int &#123; // 差</div><div class="line">    return num1 - num2</div><div class="line">&#125;</div><div class="line"></div><div class="line">func mathNumber(_ mathFunc: (Int, Int) -&gt; Int, _ a: Int, _ b: Int) -&gt; Int &#123;</div><div class="line">    return (mathFunc(a, b))</div><div class="line">&#125;</div><div class="line"></div><div class="line">mathNumber(sum, 4, 2)                   // 6, 将函数作为参数传进去</div><div class="line">mathNumber(sub, 4, 2)                   // 2</div></pre></td></tr></table></figure>
<p>7.函数返回值</p>
<p>可以把一个函数作为另一个函数的返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">func mathSumOrSub(_ isSum: Bool) -&gt; (Int, Int) -&gt; Int &#123;</div><div class="line">    return isSum ? sum : sub</div><div class="line">&#125;</div><div class="line">mathSumOrSub(true)(2, 4)              // 6, mathSumOrSub(true) 等于 sum</div></pre></td></tr></table></figure>
<p>8.函数嵌套</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func mathSumOrSub(isSum: Bool, _ a: Int, _ b: Int) -&gt; Int &#123;</div><div class="line">    func sum(num1: Int, num2: Int) -&gt; Int &#123; return num1 + num2 &#125;</div><div class="line">    func sub(num1: Int, num2: Int) -&gt; Int &#123; return num1 - num2 &#125;</div><div class="line"></div><div class="line">    return isSum ? sum(num1: a, num2: b) : sub(num1: a, num2: b)</div><div class="line">&#125;</div><div class="line"></div><div class="line">mathSumOrSub(isSum: true, 4, 4)       // 8</div></pre></td></tr></table></figure>
<h2 id="1-9-闭包"><a href="#1-9-闭包" class="headerlink" title="1.9 闭包"></a>1.9 闭包</h2><p>闭包: 用来捕获,存储传递代码块以及常量和变量的引用</p>
<p>1.闭包表达语法</p>
<p>利用闭包去实现,闭包表达语法:<br>{ (参数名1: 参数类型, 参数名2: 参数类型) -&gt; 返回类型 in<br>    代码块<br>    return 返回值<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let nums = [4, 6, 2, 9, 5]</div><div class="line">let sortNums = nums.sorted(by: &#123; (n1: Int, n2: Int) -&gt; Bool in</div><div class="line">    return n1 &gt; n2</div><div class="line">&#125;)</div><div class="line">print(sortNums)                        // [9, 6, 5, 4, 2]</div></pre></td></tr></table></figure>
<p>2.闭包的简化    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">let sortNums2 = nums.sorted(by: &#123; n1, n2 in return n1 &lt; n2&#125;) // 根据上下文推断类型</div><div class="line">print(sortNums2)                        // [2, 4, 5, 6, 9]</div><div class="line"></div><div class="line">let sortNums3 = nums.sorted(by: &#123; n1, n2 in n1 &lt; n2&#125;) // 隐式返回返回单行表达式</div><div class="line">print(sortNums3)                        // [2, 4, 5, 6, 9]</div><div class="line"></div><div class="line">let sortNums4 = nums.sorted(by: &#123;$0 &gt; $1&#125;)  // 内联闭包可以进行参数名缩写,in也可以省略</div><div class="line">print(sortNums4)                        // [9, 6, 5, 4, 2], $0 $1为两个Int类型的参数</div><div class="line"></div><div class="line">let sortNums5 = nums.sorted(by: &gt;)      // 返回类型正好匹配</div><div class="line">print(sortNums5)                        // [9, 6, 5, 4, 2]</div></pre></td></tr></table></figure>
<pre><code>注意：在开发中为了代码的可读性,刻意简化的代码不提倡
</code></pre><p>3.尾随闭包:调用函数时,要将闭包作为函数的参数传递,如果太长可以写在函数括号之后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let sortNums7 = nums.sorted() &#123; $0 &gt; $1 &#125; // 使用尾随闭包调用函数</div><div class="line">let sortNums8 = nums.sorted &#123; $0 &gt; $1 &#125; // 这个函数只有一个参数,且是闭包表达式,还可以省略()</div></pre></td></tr></table></figure>
<p>4.值捕获: 捕获变量或常量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">func makeAdd(forAdd amount: Int) -&gt; () -&gt; Int &#123;</div><div class="line">    var total = 0</div><div class="line">    func add() -&gt; Int &#123;</div><div class="line">        total += amount                // 在函数体内捕获了total和amount两个变量的引用</div><div class="line">        return total                   // 捕获保证了两个变量在makeAdd调用完并不会消失</div><div class="line">    &#125;</div><div class="line">    return add                         // 并且保证在下次调用makeAdd时候total依然存在</div><div class="line">&#125;</div><div class="line"></div><div class="line">let addTen = makeAdd(forAdd: 10)       // 定义了一个常量,相当于持续持有add()函数</div><div class="line">addTen()                               // 10, 每一次调用都会将total增加10</div><div class="line">addTen()                               // 20</div><div class="line"></div><div class="line">let addSeven = makeAdd(forAdd: 7)      // 开辟持有了一块新的内存</div><div class="line">addSeven()                             // 7</div><div class="line"></div><div class="line">addTen()                               // 30,addTen和addSeven相互独立,互不影响</div></pre></td></tr></table></figure>
<p>5.逃逸闭包: 当一个闭包作为参数传到一个函数中,这个闭包会在函数返回后被执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var handlers: [() -&gt; Void] = []</div><div class="line">func funcWithEscaping(handler: @escaping () -&gt; Void) &#123; // 外部定义的闭包需要添加标记@escaping</div><div class="line">    handlers.append(handler)</div><div class="line">&#125;</div><div class="line"></div><div class="line">class tempClass &#123;</div><div class="line">    var x = 10</div><div class="line">    func  doSomething() &#123;</div><div class="line">        funcWithEscaping &#123; self.x = 100 &#125; // 加了@escaping标记,需要显式引用self</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let instance = tempClass()</div><div class="line"></div><div class="line">handlers.first?()</div><div class="line">print(instance.x)                      // 100</div></pre></td></tr></table></figure>
<h2 id="1-10-枚举"><a href="#1-10-枚举" class="headerlink" title="1.10 枚举"></a>1.10 枚举</h2><p>1.定义<br>将一组相关的值定义成共同的类型    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">enum compassPoint &#123;                    // 用枚举表示指南针的四个方向</div><div class="line">    case North                         // 枚举成员不会像OC进行隐式赋值</div><div class="line">    case South</div><div class="line">    case East</div><div class="line">    case West</div><div class="line">&#125;</div><div class="line">enum compassPoint2 &#123;</div><div class="line">    case North, South, East, West      // 成员值也可以横着写</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.使用switch语句匹配枚举值，如果省略default, 就必须穷举所有情况</p>
<p>3.关联值: 枚举可以存储和修改不同类型的关联值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">enum Person &#123;</div><div class="line">    case Location(Double, Double)</div><div class="line">    case Name(String)</div><div class="line">&#125;</div><div class="line">var p1 = Person.Location(87.21, 90.123)</div><div class="line">p1 = .Name(&quot;Alex&quot;)                      // 同一时间只能存储一个值</div><div class="line">p1 = .Name(&quot;Joan&quot;)</div><div class="line"></div><div class="line">switch p1 &#123;</div><div class="line">case .Location(let x, let y):</div><div class="line">    print(&quot;X:\(x),Y:\(y)&quot;)</div><div class="line">case .Name(let name):</div><div class="line">    print(name)                         // Joan</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.原始值:可以给枚举成员设置默认填充值,但类型必须一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 原始值的隐藏赋值,当使用整数作为原始值时,隐式赋值依次递增1</div><div class="line">enum Mouth: Int &#123;                       // 枚举成员类型: Int</div><div class="line">    case January = 1, February, March, April, May</div><div class="line">&#125;</div><div class="line">// 在定义枚举类型的时候使用了原始值,会自动获得一个初始化方法</div><div class="line">let secondMonth = Mouth(rawValue: 2)   // 获得的是一个可选类型</div><div class="line">print(secondMonth)                     // Optional(Mouth.February)</div></pre></td></tr></table></figure>
<p>5.递归枚举</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">enum Arth &#123;</div><div class="line">    case Number(Int)</div><div class="line">    indirect case Add(Arth, Arth)      // indirect表示枚举成员可递归</div><div class="line">    indirect case Mul(Arth, Arth)</div><div class="line">&#125;</div><div class="line"></div><div class="line">let five = Arth.Number(5)</div><div class="line">let four = Arth.Number(4)</div><div class="line">let sum = Arth.Add(five, four)</div><div class="line">let result = Arth.Mul(sum, Arth.Number(2))</div><div class="line"></div><div class="line">func evaluate(express: Arth) -&gt; Int &#123;</div><div class="line">    switch express &#123;</div><div class="line">    case .Number(let value):</div><div class="line">        return value</div><div class="line">    case .Add(let left, let right):</div><div class="line">        return evaluate(express: left) + evaluate(express: right)</div><div class="line">    case .Mul(let left, let right):</div><div class="line">        return evaluate(express: left) * evaluate(express: right)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">print(result)   // Mul(Arth.Add(Arth.Number(5), Arth.Number(4)), Arth.Number(2))</div><div class="line">print(evaluate(express: result))       // 18</div></pre></td></tr></table></figure>
<h2 id="1-11-类和结构体"><a href="#1-11-类和结构体" class="headerlink" title="1.11 类和结构体"></a>1.11 类和结构体</h2><p>1.类和结构体的值传递</p>
<p>结构体和枚举的值传递都是通过值拷贝<br>类是引用拷贝,拷贝后的值的改变会影响原来的</p>
<p>2.类和结构体的选择</p>
<p>结构体: 只是用来封装少量简单的数据值;实例被赋值或传递存储的时候需要进行值拷贝,不需要用到继承<br>类: 需要包含复杂的属性方法,能形成一个抽象的事物描述;需要用到继承;需要用到引用拷贝</p>
<p>字符串,数组,字典的底层都是通过结构体实现的,所以它们在被赋值的时候都是通过值拷贝,<br>当然了swift在内部会做性能优化,不会是只要赋值就拷贝,只有在必要的时候才会进行值拷贝.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Swift-语法&quot;&gt;&lt;a href=&quot;#1-Swift-语法&quot; class=&quot;headerlink&quot; title=&quot;1. Swift 语法&quot;&gt;&lt;/a&gt;1. Swift 语法&lt;/h1&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mlijin9011.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>港珠澳之行</title>
    <link href="http://mlijin9011.github.io/2017/06/05/%E6%B8%AF%E7%8F%A0%E6%BE%B3%E4%B9%8B%E8%A1%8C/"/>
    <id>http://mlijin9011.github.io/2017/06/05/港珠澳之行/</id>
    <published>2017-06-05T06:59:00.000Z</published>
    <updated>2018-04-06T14:05:42.760Z</updated>
    
    <content type="html"><![CDATA[<p>趁着端午节假期，再请3天假，凑得了8日连休，南下去了一趟香港，澳门，其实这趟主要是去中山探望友人，顺道去香港和澳门玩了一圈，别人去广东都是去找好吃的，但是我们这趟没怎么吃好东西，看来我不属于吃货，都不会找好吃的，但是玩的还不错，这也是迄今为止我走的最远最南的地方了！</p>
<a id="more"></a>
<h2 id="广州"><a href="#广州" class="headerlink" title="广州"></a>广州</h2><p>首先我们坐了晚上的动车去了广州，一下火车就感觉到了扑面而来的热浪，虽然才5月底，趁着早上还不是很热，我们先随便吃了点早茶后，就去了圣心大教堂，去了之后发现真是没白来，教堂里正在进行早上的祷告，没法拍照，但是跟港剧里演的真的一样，很神圣庄严的地方，只拍了外面，真的很漂亮！</p>
<p><img src="/2017/06/05/港珠澳之行/1.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/1.2.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/1.3.JPG" alt="image"></p>
<p>接着我们乘坐公交车去找沙面公园，跟北京比，广州的街道真的是很窄，一路穿梭来到了沙面公园，沙面是以前的租界，现在也是什么侨办、海关、使馆的所在地，建筑风格都是以前租界区的风格，都是小洋楼。园中绿树婆娑，秀色满目，毗邻神奇美丽的白鹅潭，视野极为开阔。</p>
<p><img src="/2017/06/05/港珠澳之行/2.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/2.2.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/2.3.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/2.4.JPG" alt="image"></p>
<p>可能因为沙面原来是租界吧所以教堂比较多，这是其中之一。</p>
<p><img src="/2017/06/05/港珠澳之行/2.5.JPG" alt="image"></p>
<p>离开了沙面，骑小黄前往上下九步行街，现在有了共享单车，出行真的是更加方便了。由于地处广州荔湾区的上九路、下九路、第十甫路之间，所以得名上下九。上下九步行街是个商业街区，但中西合璧的风格，以及岭南文化的体现，营造出亮丽的旅游风景线。</p>
<p><img src="/2017/06/05/港珠澳之行/3.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/3.2.JPG" alt="image"></p>
<p>下午乘坐城际列车来到了中山，探望朋友，不得不说广州这边的城际线路真是发达，链接了广州周边各地区，很是方便，这是我们住在友人家楼旁的楼顶花园，这个花园建在了3楼顶，下面是商业铺面，上面是花园。</p>
<p><img src="/2017/06/05/港珠澳之行/4.JPG" alt="image"></p>
<h2 id="珠海"><a href="#珠海" class="headerlink" title="珠海"></a>珠海</h2><p>在中山逗留了两天之后，我们一起来到了珠海的长隆海洋王国玩了一整天，各种表演，各种海洋动物，以及水上活动设施，还有晚上的花车表演，烟花表演，唯一的遗憾是没有胆量玩过山车[囧]。</p>
<p><img src="/2017/06/05/港珠澳之行/5.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.2.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.3.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.4.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.5.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.6.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.7.JPG" alt="image"></p>
<p>珠海渔女石像</p>
<p><img src="/2017/06/05/港珠澳之行/6.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/6.2.JPG" alt="image"></p>
<h2 id="澳门"><a href="#澳门" class="headerlink" title="澳门"></a>澳门</h2><p>珠海过关到澳门是挺方便的，一过关不久就没信号了，换上了早在淘宝买好的港澳通用 SIM 卡。住的地方是在 AirBnb 上面提前订好的，到了之后联系房东去约定的地点去接我们，去了住所稍事休息就开始了旅途，真是暴走之旅。</p>
<p>第一次自己出境，人生地不熟的，之前听说来澳门不需要自己打车坐公交，直接坐各种赌场的发财车就可以去到想去的地方，但实际上😭，发财车只是在码头到赌场之间穿梭，不去景点，也没有取澳门币，真是人在囧途。</p>
<p>还好走了不久找到了一间工商银行，取了 500 澳币，坐了个公交到达了第一站，大三巴牌坊。</p>
<p><img src="/2017/06/05/港珠澳之行/7.1.JPG" alt="image"></p>
<p><img src="/2017/06/05/港珠澳之行/7.2.JPG" alt="image"></p>
<p>吃了点东西之后，就准备去著名的澳门塔了，这是路上看到的漂亮的彩色房子。</p>
<p><img src="/2017/06/05/港珠澳之行/8.JPG" alt="image"></p>
<p>澳门塔脚下：</p>
<p><img src="/2017/06/05/港珠澳之行/9.1.JPG" alt="image"></p>
<p><img src="/2017/06/05/港珠澳之行/9.2.JPG" alt="image"></p>
<p>澳门塔上俯瞰：</p>
<p><img src="/2017/06/05/港珠澳之行/9.3.JPG" alt="image"></p>
<p>在上面还看了好多人在做高空体验，各种高空项目，我是不敢，😝。</p>
<p>接着去官也街吃了点东西，买了点手信。</p>
<p><img src="/2017/06/05/港珠澳之行/10.JPG" alt="image"></p>
<p>晚上实在是走不动了，打了个车去了附近的威尼斯人赌场，近距离体验了下澳门的赌场风云，里面真的是什么都有，吃的，逛的，玩的，住的，果然是豪华。</p>
<p><img src="/2017/06/05/港珠澳之行/11.1.JPG" alt="image"></p>
<p><img src="/2017/06/05/港珠澳之行/11.2.JPG" alt="image"></p>
<p>逛累了，正好我们住的地方是在金沙赌场附近，我们坐了巴黎人到金沙的发财车，回去休息啦，这是路上看到的赌场外观夜景。</p>
<p><img src="/2017/06/05/港珠澳之行/12.JPG" alt="image"></p>
<h2 id="香港"><a href="#香港" class="headerlink" title="香港"></a>香港</h2><p>在澳门休息一晚后，第二天一早，坐了发财车去码头去香港，第一次坐了船。</p>
<p><img src="/2017/06/05/港珠澳之行/13.5.JPG" alt="image"></p>
<p><img src="/2017/06/05/港珠澳之行/13.4.JPG" alt="image"></p>
<p><img src="/2017/06/05/港珠澳之行/13.1.JPG" alt="image"></p>
<p><img src="/2017/06/05/港珠澳之行/13.2.JPG" alt="image"></p>
<p><img src="/2017/06/05/港珠澳之行/13.3.JPG" alt="image"></p>
<p>香港住的地方也是提前在 AirBnb 上面订好的，不得不说香港的地方真是寸土寸金啊，住的地方太小了点，不过麻雀虽小五脏俱全，一个不到10平米的小房间内，什么都有。</p>
<p>放下行李后就去了浅水湾，结果天公不作美，路上还下雨了，夏天的雨来得快，去的也快，不过下了场雨之后倒是凉快了不少，在浅水湾沙滩上休息了很久，放松了一下，这几天真是太累了。</p>
<p><img src="/2017/06/05/港珠澳之行/14.JPG" alt="image"></p>
<p>晚上来到了有名的太平山顶，据说能看到整个香港的夜景，不过今天下雨了，上去之后才发现上面全是雾，白天还能看到点，天黑什么都看不到了，就坐了缆车回来了。</p>
<p><img src="/2017/06/05/港珠澳之行/15.JPG" alt="image"></p>
<p>晚上来到了星光大道，维多利亚港，吹吹海风。</p>
<p><img src="/2017/06/05/港珠澳之行/16.1.JPG" alt="image"></p>
<p><img src="/2017/06/05/港珠澳之行/16.2.JPG" alt="image"></p>
<p>第二天就是吃吃吃，买买买，准备返程回家啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着端午节假期，再请3天假，凑得了8日连休，南下去了一趟香港，澳门，其实这趟主要是去中山探望友人，顺道去香港和澳门玩了一圈，别人去广东都是去找好吃的，但是我们这趟没怎么吃好东西，看来我不属于吃货，都不会找好吃的，但是玩的还不错，这也是迄今为止我走的最远最南的地方了！&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://mlijin9011.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="珠海" scheme="http://mlijin9011.github.io/tags/%E7%8F%A0%E6%B5%B7/"/>
    
      <category term="长隆" scheme="http://mlijin9011.github.io/tags/%E9%95%BF%E9%9A%86/"/>
    
      <category term="香港" scheme="http://mlijin9011.github.io/tags/%E9%A6%99%E6%B8%AF/"/>
    
      <category term="澳门" scheme="http://mlijin9011.github.io/tags/%E6%BE%B3%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>iOSAppIcon添加打包标识</title>
    <link href="http://mlijin9011.github.io/2017/04/17/iOS-AppIcon%E6%B7%BB%E5%8A%A0%E6%89%93%E5%8C%85%E6%A0%87%E8%AF%86/"/>
    <id>http://mlijin9011.github.io/2017/04/17/iOS-AppIcon添加打包标识/</id>
    <published>2017-04-17T09:04:18.000Z</published>
    <updated>2018-03-18T09:13:32.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>iOS 分支开发迭代过程中，测试经常需要装不同分支不同版本的包，有时候测试发现了 BUG 后，会突然忘了自己下的是 CI 上的哪一个包？这时候，我们可以把打包的 build 信息打印在 AppIcon 上，这样只需要根据 Icon 上的 build 信息就一目了然了。</p>
<a id="more"></a>
<h1 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h1><p>使用 ImageMagick 可以创建、编辑、合成或转换图片。它可以读和写各种格式的图像（超过 200 种格式）包括 PNG、JPEG、JPEG - 2000、GIF、TIFF、DPX、EXR、WebP、Postscript、PDF、SVG。ImageMagick 可以调整、翻转、镜像、旋转、扭曲、剪切和转换图像、图像色彩调整，适用于各种特殊效果,或绘制文本、线、多边形、椭圆和贝塞尔曲线。</p>
<p>通过 shell command 就可以轻易使用以上功能。</p>
<h1 id="Build-Phases"><a href="#Build-Phases" class="headerlink" title="Build Phases"></a>Build Phases</h1><p>Build Phases 代表着将代码构建为一个可执行文件的规则。它描述了 build 过程中必须执行的不同任务。</p>
<h2 id="定制Build-Phases"><a href="#定制Build-Phases" class="headerlink" title="定制Build Phases"></a>定制Build Phases</h2><p>你可以在 build phases 中添加运行自定义脚本，就像 CocoaPods 使用的一样，来做额外的工作。当然也可以添加一些资源的拷贝任务，当你需要将某些确定的资源拷贝到制定的 target 目录中，这非常有用。<br>另外你可以通过定制 build phase 来添加带有水印(包括版本号和commit hash)的 app icon。只需要在 build phase 中添加一个 Run Script.</p>
<p>在工程 <code>Target</code> -&gt; <code>Build Phases</code> 中新建一个 <code>Run Script</code>，我们可以给它起名 <code>Add BuildInfo on Icon</code>。</p>
<p><img src="/2017/04/17/iOS-AppIcon添加打包标识/buildPhases_Shell.png" alt="image"></p>
<p>创建脚本 draw_icon_buildinfo.sh</p>
<h2 id="写加水印的脚本"><a href="#写加水印的脚本" class="headerlink" title="写加水印的脚本"></a>写加水印的脚本</h2><p>1.判断执行 Build 的机器是否安装了 ImageMagic</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">convertPath=`which convert`</div><div class="line"># 判断 convertPath 文件是否存在</div><div class="line">if [ ! -f $&#123;convertPath&#125;]; then</div><div class="line">echo &quot;==============</div><div class="line">WARNING: 你需要先安装 ImageMagick！！！！:</div><div class="line">brew install imagemagick</div><div class="line">==============&quot;</div><div class="line">exit 0;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>2.判断 Release 包不执行以下操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if [ $&#123;CONFIGURATION&#125; = &quot;Release&quot; ]; then</div><div class="line">exit 0;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>3.获取 commit、branch、version 等信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">version=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleShortVersionString&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class="line">build_num=`/usr/libexec/PlistBuddy -c &quot;Print SinaNewsBuildVersion&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class="line">if [[ $&#123;build_num&#125; == &quot;&quot; ]]; then</div><div class="line">    build_num=`date +&quot;%Y%m%d%H%M&quot;`</div><div class="line">    echo &quot;Use Xcode building, build time $&#123;build_num&#125;&quot;</div><div class="line">fi</div><div class="line">commit=`git rev-parse --short HEAD`</div><div class="line">branch=$(git rev-parse --abbrev-ref HEAD)</div><div class="line">caption=&quot;$&#123;version&#125;\n$&#123;build_num&#125;\n$&#123;branch&#125;&quot;</div><div class="line">echo &quot;caption : $&#123;caption&#125;&quot;</div></pre></td></tr></table></figure>
<p>4.找Icon图片</p>
<p>在编译后的 info.plist 中，可以看到：<br><img src="/2017/04/17/iOS-AppIcon添加打包标识/infoPlist_Icon1.png" alt="image"><br><img src="/2017/04/17/iOS-AppIcon添加打包标识/infoPlist_Icon2.png" alt="image"></p>
<p>通过脚本输出的结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy -c &quot;Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Array &#123;</div><div class="line">    AppIcon20x20</div><div class="line">    AppIcon29x29</div><div class="line">    AppIcon40x40</div><div class="line">    AppIcon60x60</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以真实的 icon 个数为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">real_icon_index=$(($&#123;icon_count&#125; - 2))</div></pre></td></tr></table></figure>
<p>根据数量循环，对找到的每个 Icon 执行加水印的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">i=0</div><div class="line">while [  $i -lt $real_icon_index ]; do</div><div class="line">  icon=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles:$i&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class="line"></div><div class="line">  echo &quot;icon: $&#123;icon&#125;&quot;</div><div class="line"></div><div class="line">  if [[ $icon == *.png ]] || [[ $icon == *.PNG ]]</div><div class="line">  then</div><div class="line">    processIcon $icon</div><div class="line">  else</div><div class="line">    processIcon &quot;$&#123;icon&#125;.png&quot;</div><div class="line">    processIcon &quot;$&#123;icon&#125;@2x.png&quot;</div><div class="line">    processIcon &quot;$&#123;icon&#125;@3x.png&quot;</div><div class="line"></div><div class="line">    processIcon &quot;$&#123;icon&#125;~ipad.png&quot;</div><div class="line">    processIcon &quot;$&#123;icon&#125;@2x~ipad.png&quot;</div><div class="line">  fi</div><div class="line">  let i=i+1</div><div class="line">done</div></pre></td></tr></table></figure>
<p>5.对找到的图片 Icon 加水印处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">function processIcon() &#123;</div><div class="line">    base_file=$1</div><div class="line"></div><div class="line">    cd &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;&quot;</div><div class="line">    base_path=`find . -name $&#123;base_file&#125;`</div><div class="line"></div><div class="line">    real_path=$( abspath &quot;$&#123;base_path&#125;&quot; )</div><div class="line">    echo &quot;base path $&#123;real_path&#125;&quot;</div><div class="line"></div><div class="line">    # 验证存在性</div><div class="line">    if [[ ! -f $&#123;base_path&#125; || -z $&#123;base_path&#125; ]]; then</div><div class="line">      return;</div><div class="line">    fi</div><div class="line"></div><div class="line">    # TODO: if they are the same we need to fix it by introducing temp</div><div class="line">    target_file=`basename $base_path`</div><div class="line">    target_path=&quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;/$&#123;target_file&#125;&quot;</div><div class="line"></div><div class="line">    base_tmp_normalizedFileName=&quot;$&#123;base_file%.*&#125;-normalized.$&#123;base_file##*.&#125;&quot;</div><div class="line">    base_tmp_path=`dirname $base_path`</div><div class="line">    base_tmp_normalizedFilePath=&quot;$&#123;base_tmp_path&#125;/$&#123;base_tmp_normalizedFileName&#125;&quot;</div><div class="line"></div><div class="line">    stored_original_file=&quot;$&#123;base_tmp_normalizedFilePath&#125;-tmp&quot;</div><div class="line">    if [[ -f $&#123;stored_original_file&#125; ]]; then</div><div class="line">      echo &quot;found previous file at path $&#123;stored_original_file&#125;, using it as base&quot;</div><div class="line">      mv &quot;$&#123;stored_original_file&#125;&quot; &quot;$&#123;base_path&#125;&quot;</div><div class="line">    fi</div><div class="line"></div><div class="line">    if [ $CONFIGURATION = &quot;Release&quot; ]; then</div><div class="line">      cp &quot;$&#123;base_path&#125;&quot; &quot;$target_path&quot;</div><div class="line">      return 0;</div><div class="line">    fi</div><div class="line"></div><div class="line">    echo &quot;Reverting optimized PNG to normal&quot;</div><div class="line">    # Normalize</div><div class="line">    echo &quot;xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q $&#123;base_path&#125; $&#123;base_tmp_normalizedFilePath&#125;&quot;</div><div class="line">    xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q &quot;$&#123;base_path&#125;&quot; &quot;$&#123;base_tmp_normalizedFilePath&#125;&quot;</div><div class="line"></div><div class="line">    # move original pngcrush png to tmp file</div><div class="line">    echo &quot;moving pngcrushed png file at $&#123;base_path&#125; to $&#123;stored_original_file&#125;&quot;</div><div class="line">    #rm &quot;$base_path&quot;</div><div class="line">    mv &quot;$base_path&quot; &quot;$&#123;stored_original_file&#125;&quot;</div><div class="line"></div><div class="line">    # Rename normalized png&apos;s filename to original one</div><div class="line">    echo &quot;Moving normalized png file to original one $&#123;base_tmp_normalizedFilePath&#125; to $&#123;base_path&#125;&quot;</div><div class="line">    mv &quot;$&#123;base_tmp_normalizedFilePath&#125;&quot; &quot;$&#123;base_path&#125;&quot;</div><div class="line"></div><div class="line">    width=`identify -format %w $&#123;base_path&#125;`</div><div class="line">    height=`identify -format %h $&#123;base_path&#125;`</div><div class="line">    band_height=$((($height * 47) / 100))</div><div class="line">    band_position=$(($height - $band_height))</div><div class="line">    text_position=$(($band_position - 3))</div><div class="line">    point_size=$(((13 * $width) / 100))</div><div class="line"></div><div class="line">    echo &quot;Image dimensions ($width x $height) - band height $band_height @ $band_position - point size $point_size&quot;</div><div class="line"></div><div class="line">    #</div><div class="line">    # 添加高斯模糊，在模糊图上添加文字</div><div class="line">    #</div><div class="line">    convert $&#123;base_path&#125; -blur 10x8 /tmp/blurred.png</div><div class="line">    convert /tmp/blurred.png -gamma 0 -fill white -draw &quot;rectangle 0,$band_position,$width,$height&quot; /tmp/mask.png</div><div class="line">    convert -size $&#123;width&#125;x$&#123;band_height&#125; xc:none -fill &apos;rgba(0,0,0,0.2)&apos; -draw &quot;rectangle 0,0,$width,$band_height&quot; /tmp/labels-base.png</div><div class="line">    convert -background none -size $&#123;width&#125;x$&#123;band_height&#125; -pointsize $point_size -fill black -gravity center -gravity South caption:&quot;$caption&quot; /tmp/labels.png</div><div class="line"></div><div class="line">    convert $&#123;base_path&#125; /tmp/blurred.png /tmp/mask.png -composite /tmp/temp.png</div><div class="line"></div><div class="line">    rm /tmp/blurred.png</div><div class="line">    rm /tmp/mask.png</div><div class="line"></div><div class="line">    #</div><div class="line">    # 合成最后的图片</div><div class="line">    #</div><div class="line">    filename=New$&#123;base_file&#125;</div><div class="line">    convert /tmp/temp.png /tmp/labels-base.png -geometry +0+$band_position -composite /tmp/labels.png -geometry +0+$text_position -geometry +$&#123;w&#125;-$&#123;h&#125; -composite &quot;$&#123;target_path&#125;&quot;</div><div class="line">    </div><div class="line">    # 只写文字在Icon上</div><div class="line">    # convert -background none -fill black -pointsize $point_size -gravity south caption:&quot;$caption&quot; $&#123;base_path&#125; +swap -composite &quot;$&#123;target_path&#125;&quot;</div><div class="line"></div><div class="line">    # 清除文件</div><div class="line">    rm /tmp/temp.png</div><div class="line">    rm /tmp/labels-base.png</div><div class="line">    rm /tmp/labels.png</div><div class="line"></div><div class="line">    echo &quot;Overlayed $&#123;target_path&#125;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这要就完成了在 AppIcon 上添加 build 信息的处理。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="http://zhoulingyu.com/2017/04/04/iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC/#more" target="_blank" rel="external">iOS——写一个快速定位问题的脚本</a><br><a href="http://beyondvincent.com/2013/11/21/2013-11-23-123-build-process/" target="_blank" rel="external">iOS探索：iOS程序的Build过程</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;iOS 分支开发迭代过程中，测试经常需要装不同分支不同版本的包，有时候测试发现了 BUG 后，会突然忘了自己下的是 CI 上的哪一个包？这时候，我们可以把打包的 build 信息打印在 AppIcon 上，这样只需要根据 Icon 上的 build 信息就一目了然了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>fastlane+jenkins实现iOS持续集成</title>
    <link href="http://mlijin9011.github.io/2017/04/08/fastlane+jenkins%E5%AE%9E%E7%8E%B0iOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://mlijin9011.github.io/2017/04/08/fastlane+jenkins实现iOS持续集成/</id>
    <published>2017-04-08T04:29:31.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>iOS 应用的证书配置、打包和上线，大家都知道，步骤很繁琐，如果纯人工处理的话是非常浪费时间的，因此，我抽空研究了下 fastlane ，fastlane 是用 Ruby 写的一套自动化工具集，用它可以很轻松的完成证书配置，打包发布等工作，配合 jenkins 使用效果更佳。</p>
<a id="more"></a>
<h1 id="fastlane"><a href="#fastlane" class="headerlink" title="fastlane"></a>fastlane</h1><p><img src="/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-logo.png" alt="logo"></p>
<h2 id="1-fastlane-的简介"><a href="#1-fastlane-的简介" class="headerlink" title="1. fastlane 的简介"></a>1. fastlane 的简介</h2><p>fastlane是自动化打包和发布 iOS 和 Android 应用的一套工具集，下图是 fastlane 的一些主要的工具<a href="https://fastlane.tools" target="_blank" rel="external">fastlane tools</a>，如自动化测试，生成截图，生成证书和签名文件，打包，发布程序等。</p>
<p><img src="/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-intro-tree.png" alt="image"></p>
<p>下面详细讲一下 fastlane 里面的几个主要的工具：</p>
<table>
<thead>
<tr>
<th>工具</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/scan" target="_blank" rel="external">scan</a></td>
<td>自动运行自动化测试工具，并且生成 HTML 报告</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/cert" target="_blank" rel="external">cert</a></td>
<td>自动创建管理证书</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/sigh" target="_blank" rel="external">sigh</a></td>
<td>自动创建，更新，下载 Provisioning Profile 文件</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/match" target="_blank" rel="external">match</a></td>
<td>管理证书和 Provisioning Profile</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/pem" target="_blank" rel="external">pem</a></td>
<td>自动生成，更新 Notification 证书</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/snapshot" target="_blank" rel="external">snapshot</a></td>
<td>自动截图</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/deliver" target="_blank" rel="external">deliver</a></td>
<td>自动上传应用截图，元数据，ipa 文件到 iTunes Connect</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/produce" target="_blank" rel="external">produce</a></td>
<td>如果你的产品还没在 iTunes Connect 或者 Apple Developer Center 创建，produce可以自动帮你完成这些工作</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/gym" target="_blank" rel="external">gym</a></td>
<td>自动化编译打包工具</td>
</tr>
</tbody>
</table>
<h2 id="2-fastlane-的安装"><a href="#2-fastlane-的安装" class="headerlink" title="2. fastlane 的安装"></a>2. fastlane 的安装</h2><ol>
<li><p>确保 Xcode command line 工具是最新版</p>
<p><code>xcode-select --install</code></p>
</li>
<li><p>安装fastlane</p>
<p>官方提供了三种安装方法，gem、brew、直接下载安装</p>
<p>简单点，可以直接用 gem 安装：</p>
<p><code>sudo gem install fastlane -NV</code></p>
<p>如果安装过程中报错：</p>
<p><code>ERROR:  While executing gem ... (Errno::EPERM) 
Operation not permitted - /usr/bin/xxxx</code></p>
<p>可以执行命令：</p>
<p> <code>sudo gem install -n /usr/local/bin fastlane</code></p>
<p>安装完成后可以使用 <code>fastlane -v</code> 检查是否安装成功，如果输出下面的结果，表示已安装成功，并且显示版本号。</p>
<p><code>fastlane installation at path:
/usr/local/lib/ruby/gems/2.4.0/gems/fastlane-2.25.0/bin/fastlane 
----------------------------- fastlane 2.25.0</code></p>
</li>
</ol>
<h2 id="3-fastlane-的使用"><a href="#3-fastlane-的使用" class="headerlink" title="3. fastlane 的使用"></a>3. fastlane 的使用</h2><h3 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h3><p>在 工程的 .xcodeproj 文件的同级目录下，执行</p>
<p><code>fastlane init</code></p>
<p>这里会要求你输入 Apple ID，如果是第一次使用的话，还需要输入密码，fastlane 会自动检测当前项目的 App Name 和 App Identifier，也可以手动输入这些信息，如果你没有在 iTC 或者 ADC 中创建的话，他会询问你是否要帮你自动创建，非常智能。</p>
<p>执行完毕后，会根据你输入的信息，在当前目录下生成一个文件夹 fastlane，在 fastlane 文件夹下会自动生成两个配置文件 Appfile，Fastfile，我们可以修改这两个文件来完成我们所需要的功能。</p>
<p>如果在 init 的时候选择了在 iTC 中创建 App 的话，fastlane 会自动调用 produce 进行初始化，在 iTC 中成功创建后，fastlane 文件夹里面还会生成一个 Deliverfile 的文件，或者也可以后续手动创建。</p>
<h3 id="3-2-fastlane-管理证书-amp-Provisioning-Profile"><a href="#3-2-fastlane-管理证书-amp-Provisioning-Profile" class="headerlink" title="3.2 fastlane 管理证书 &amp; Provisioning Profile"></a>3.2 fastlane 管理证书 &amp; Provisioning Profile</h3><h4 id="cert"><a href="#cert" class="headerlink" title="cert"></a>cert</h4><p>自动生成证书，并下载安装到 keychain 中</p>
<h4 id="sigh"><a href="#sigh" class="headerlink" title="sigh"></a>sigh</h4><p>provisioning profile 的生成，管理，下载，签名等</p>
<h5 id="1-生成"><a href="#1-生成" class="headerlink" title="1. 生成"></a>1. 生成</h5><p><code>fastlane sigh --development</code></p>
<h5 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h5><p><code>fastlane sigh download_all</code></p>
<h5 id="3-管理"><a href="#3-管理" class="headerlink" title="3. 管理"></a>3. 管理</h5><p><code>fastlane sigh manage</code>  管理，删除过期的profiles<br><code>fastlane sigh repair</code>  修复过期或者无效的profiles</p>
<h5 id="4-重新签名"><a href="#4-重新签名" class="headerlink" title="4. 重新签名"></a>4. 重新签名</h5><p><code>fastlane sigh resign ./path/app.ipa --signing_identity &quot;iPhone Distribution: Felix Krause&quot; -p &quot;my.mobileprovision&quot;</code></p>
<h4 id="gem"><a href="#gem" class="headerlink" title="gem"></a>gem</h4><h4 id="match-amp-Matchfile"><a href="#match-amp-Matchfile" class="headerlink" title="match &amp; Matchfile"></a>match &amp; Matchfile</h4><h5 id="1-初始化-match"><a href="#1-初始化-match" class="headerlink" title="1. 初始化 match"></a>1. 初始化 match</h5><p>新建一个私有的 Git 仓库来存放和管理证书和 Provisioning Profiles。</p>
<p>执行 <code>fastlane match init</code>，按提示输入你的 Git 仓库地址，执行完毕后会生成一个 Matchfile 文件，像这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git_url <span class="string">"https://github.com/fastlane/fastlane/tree/master/certificates"</span></div><div class="line"></div><div class="line">app_identifier <span class="string">"tools.fastlane.app"</span></div><div class="line">username <span class="string">"user@fastlane.tools"</span></div></pre></td></tr></table></figure>
<h5 id="2-生成和安装"><a href="#2-生成和安装" class="headerlink" title="2. 生成和安装"></a>2. 生成和安装</h5><p>这个证书的仓库可以通过分支来管理不同项目的证书和配置文件，而不需要每个项目都创建一个仓库。</p>
<p>执行 <code>fastlane match</code> 可以从 Git 仓库中下载安装证书和 Provisioning Profile 到电脑中，如果 Git 仓库中没有的话，会创建证书和 profiles 文件，并上传到 Git 仓库中，其他人可以安装使用。</p>
<p>Git 仓库中的证书是加密过的，执行 match 时，会要求输入密码，创建证书的时候会用这个密码进行加密，安装证书的时候会用这个密码进行解密后安装。</p>
<p>也可以手动从你的 keychain 中导出证书，然后在你的仓库中，创建 <code>certs/distribution</code> 和 <code>certs/development</code> 目录，分别存放开发和生产证书。</p>
<p>证书加密方法:</p>
<p><code>openssl pkcs12 -nocerts -nodes -out key.pem -in certificate.p12</code><br><code>openssl aes-256-cbc -k your_password -in key.pem -out cert_id.p12 -a</code><br><code>openssl aes-256-cbc -k your_password -in certificate.cer -out cert_id.cer -a</code></p>
<p>这里的 cert_id 可以通过下面的方法来查找当前账户下所有的证书 ID，然后找出你的证书 ID 就是这里的 cert_id。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">require &apos;spaceship&apos;</div><div class="line"></div><div class="line">Spaceship.login(&apos;your@apple.id&apos;)</div><div class="line">Spaceship.select_team</div><div class="line"></div><div class="line">Spaceship.certificate.all.each do |cert| </div><div class="line">  cert_type = Spaceship::Portal::Certificate::CERTIFICATE_TYPE_IDS[cert.type_display_id].to_s.split(&quot;::&quot;)[-1]</div><div class="line">  puts &quot;Cert id: #&#123;cert.id&#125;, name: #&#123;cert.name&#125;, expires: #&#123;cert.expires.strftime(&quot;%Y-%m-%d&quot;)&#125;, type: #&#123;cert_type&#125;&quot;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>证书加密后存放到相应的目录中，接下来再上传 provisioning profile 文件，可以从 ADC 中下载，然后创建 <code>profiles/development</code>，<code>profiles/adhoc</code>，<code>profiles/appstore</code> 三个目录，分别存放开发，<br>AdHoc，生产环境的配置文件。用上面同样的方法执行 openssl 加密</p>
<p><code>openssl aes-256-cbc -k your_password -in Development_XXX.mobileprovision -out Development_your.bundle.id.mobileprovision -a</code></p>
<p>加密完成后生成三个文件如下：</p>
<p><code>profiles/development/Development_your.bundle.id.mobileprovision</code><br><code>profiles/adhoc/AdHoc_your.bundle.id.mobileprovision
profiles/appstore</code><br><code>AppStore_your.bundle.id.mobileprovision</code></p>
<p>把证书和 profile 上传到你的 Git 仓库中，其他人就可以执行 <code>fastlane match development</code> 来安装。</p>
<p>如果你不希望修改证书，可以在执行时在后面加 <code>--readonly</code>。</p>
<h5 id="3-管理-1"><a href="#3-管理-1" class="headerlink" title="3. 管理"></a>3. 管理</h5><p>你也可以像这样，在 Fastfile 里写 lane 来执行，如</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">desc <span class="string">"match"</span></div><div class="line">  lane <span class="symbol">:sn_match</span> <span class="keyword">do</span> </div><div class="line">    match(<span class="symbol">git_branch:</span> <span class="string">"your_branch"</span>, <span class="symbol">type:</span> <span class="string">"development"</span>, <span class="symbol">readonly:</span> <span class="literal">true</span>)</div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这里可以显示的指定 app_identifier，如</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">match(<span class="symbol">git_branch:</span> <span class="string">"your_branch"</span>, <span class="symbol">type:</span> <span class="string">"development"</span>, <span class="symbol">app_identifier:</span> <span class="string">"your.bundle.id"</span>, <span class="symbol">readonly:</span> <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>如果你有多个 Target，如 Watch，Extension。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">match(<span class="symbol">git_branch:</span> <span class="string">"your_branch"</span>, <span class="symbol">app_identifier:</span> [<span class="string">"com.krausefx.app1"</span>, <span class="string">"com.krausefx.app2"</span>, <span class="string">"com.krausefx.app3"</span>], <span class="symbol">readonly:</span> <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>也可以在 Matchfile 中声明：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git_url <span class="string">"https://github.com/fastlane/fastlane/tree/master/certificates"</span></div><div class="line"></div><div class="line">app_identifier [<span class="string">"com.krausefx.app1"</span>, <span class="string">"com.krausefx.app2"</span>, <span class="string">"com.krausefx.app3"</span>]</div></pre></td></tr></table></figure>
<p>你也可以通过 match 来注册新的设备，通过 <code>force_for_new_devices</code> 来更新 profiles 到Git 仓库中。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">desc <span class="string">"match"</span></div><div class="line">  lane <span class="symbol">:sn_match</span> <span class="keyword">do</span> </div><div class="line">    register_devices(<span class="symbol">devices_file:</span> <span class="string">"./devices.txt"</span>)</div><div class="line">    match(<span class="symbol">git_branch:</span> <span class="string">"your_branch"</span>, <span class="symbol">force_for_new_devices:</span> <span class="literal">true</span>)</div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure>
<p><code>force_for_new_devices</code> 可以自动进行设备检测，是否距离上次 match 有新的设备加入，并更新你的仓库中的 profile 文件。</p>
<h3 id="3-3-fastlane-自动化测试"><a href="#3-3-fastlane-自动化测试" class="headerlink" title="3.3 fastlane 自动化测试"></a>3.3 fastlane 自动化测试</h3><h4 id="scan-amp-Scanfile"><a href="#scan-amp-Scanfile" class="headerlink" title="scan &amp; Scanfile"></a>scan &amp; Scanfile</h4><p>Test 和 UITest</p>
<h3 id="fastlane-打包"><a href="#fastlane-打包" class="headerlink" title="fastlane 打包"></a>fastlane 打包</h3><h4 id="Appfile"><a href="#Appfile" class="headerlink" title="Appfile"></a>Appfile</h4><p><a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md" target="_blank" rel="external">Appfile</a>，存放了一些 app 本身的信息，如，apple_id, app_identifier, team_id 等等。</p>
<p>默认情况下，Appfile 如下所示：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app_identifier <span class="string">"com.mzl.testapp"</span> <span class="comment"># The bundle identifier of your app</span></div><div class="line">apple_id <span class="string">"mlijin9011@163.com"</span>  <span class="comment"># Your Apple email address</span></div><div class="line"></div><div class="line"><span class="comment"># You can uncomment the lines below and add your own </span></div><div class="line"><span class="comment"># team selection in case you're in multiple teams</span></div><div class="line"><span class="comment"># team_name "Team Name"</span></div><div class="line"><span class="comment"># team_id "Q2CBPJ58CA"</span></div><div class="line"></div><div class="line"><span class="comment"># To select a team for iTunes Connect use</span></div><div class="line"><span class="comment"># itc_team_name "Company Name"</span></div><div class="line"><span class="comment"># itc_team_id "18742801"</span></div></pre></td></tr></table></figure>
<p>如果你的 iTunes Connect 和 Apple Developer Portal 有不同的证书，请使用以下代码：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app_identifier <span class="string">"com.mzl.testapp"</span>       <span class="comment"># The bundle identifier of your app</span></div><div class="line"></div><div class="line">apple_dev_portal_id <span class="string">"portal@company.com"</span>  <span class="comment"># Apple Developer Account</span></div><div class="line">itunes_connect_id <span class="string">"tunes@company.com"</span>     <span class="comment"># iTunes Connect Account</span></div><div class="line"></div><div class="line">team_id <span class="string">"Q2CBPJ58CA"</span> <span class="comment"># Developer Portal Team ID</span></div><div class="line">itc_team_id <span class="string">"18742801"</span> <span class="comment"># iTunes Connect Team ID</span></div></pre></td></tr></table></figure>
<p>如果你的项目在每个环境（测试版，Store版，企业版）中的 bundle id 不同的话，则可以使用 for_platform 或 for_lane 模块声明定义。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">app_identifier <span class="string">"com.mzl.testapp"</span></div><div class="line">apple_id <span class="string">"mlijin9011@163.com"</span></div><div class="line">team_id <span class="string">"Q2CBPJ58CC"</span></div><div class="line"></div><div class="line">for_platform <span class="symbol">:ios</span> <span class="keyword">do</span></div><div class="line">  team_id <span class="string">'123'</span> <span class="comment"># for all iOS related things</span></div><div class="line">  for_lane <span class="symbol">:build_inhouse</span> <span class="keyword">do</span></div><div class="line">    app_identifier <span class="string">'com.mzl.testapp.inhouse'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>如果你想从你的 Fastfile 中访问这些值的话，可以在 Fastfile 中这样写</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">identifier = CredentialsManager::AppfileConfig.try_fetch_value(<span class="symbol">:app_identifier</span>)</div><div class="line">team_id = CredentialsManager::AppfileConfig.try_fetch_value(<span class="symbol">:team_id</span>)</div></pre></td></tr></table></figure>
<h4 id="Fastfile"><a href="#Fastfile" class="headerlink" title="Fastfile"></a>Fastfile</h4><p><a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md" target="_blank" rel="external">Fastfile</a> 是最重要的一个文件，主要是些 lane 的集合，在这里可以编写和定制我们的自动化脚本，所有的流程控制功能都写在这个文件里面，利用 lane 来完成我们的自动化需求。</p>
<p>Fastfile 中可以同时支持不同的平台，iOS，macOS，Android，针对不同的平台，可以自定义自己的脚本，像这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">fastlane_version <span class="string">"2.14.2"</span></div><div class="line">default_platform <span class="symbol">:ios</span></div><div class="line"></div><div class="line">before_all <span class="keyword">do</span></div><div class="line">  puts <span class="string">"This block is executed before every action of all platforms"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></div><div class="line">  before_all <span class="keyword">do</span></div><div class="line">    cocoapods</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"build beta"</span></div><div class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span></div><div class="line">    gym</div><div class="line">    hockey</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  after_all <span class="keyword">do</span></div><div class="line">    puts <span class="string">"Finished iOS related work"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">platform <span class="symbol">:mac</span> <span class="keyword">do</span></div><div class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span></div><div class="line">    xcodebuild</div><div class="line">    hockey</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">lane <span class="symbol">:test</span> <span class="keyword">do</span></div><div class="line">  puts <span class="string">"this lane is not platform specific"</span></div><div class="line">  xctool</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">after_all <span class="keyword">do</span></div><div class="line">  puts <span class="string">"Executed after every lane of both Mac and iPhone"</span></div><div class="line">  slack</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">error <span class="keyword">do</span> <span class="params">|lane, exception|</span></div><div class="line">  puts <span class="string">"Executed when every lane of both Mac and iPhone has error"</span></div><div class="line">  slack</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>fastlane_version：指定fastlane使用的最小版本<br>default_platform：指定当前默认的平台，可以选择 ios/android/mac<br>before_all：是在执行每一个 lane 之前都会调用这部分，所以如果有一些前提性的操作，可以写在这里，比如 cocoapods，match 等。最外面的 before_all 表示所有平台的都会执行，写在 platform ios 里面的 before_all 是只有执行 ios 平台的lane 才会执行到的。<br>after_all：同理，是在每个 lane 执行完成之后都会执行这部分的内容<br>error：每个 lane 执行出错就会执行这部分的内容<br>desc：对 lane 的描述，fastlane 会自动将 desc 的内容生成说明文档<br>lane：任务，执行的时候使用 fastlane [ios] lane名称，如上可以这样用：<code>fastlane ios beta</code></p>
<p>fastlane 提供了很多 <a href="https://docs.fastlane.tools/actions" target="_blank" rel="external">action</a> 或者 plugin 可以在 Fastfile 的 lane 里面调用，如上面提到的 match，sigh，gym，deliver 等，还有插件 cocoapods 等。</p>
<p>贴一段我项目中使用的 Fastfile 的一部分看下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line">fastlane_version <span class="string">"2.23.0"</span></div><div class="line"></div><div class="line">default_platform <span class="symbol">:ios</span></div><div class="line"></div><div class="line">PROJECT_FILE_PATH = <span class="string">'MyProject.xcodeproj'</span></div><div class="line">OUTPUT_PATH = <span class="string">'build/'</span></div><div class="line">APP_NAME = <span class="string">'MyProject'</span></div><div class="line">SCHEME_NAME = <span class="string">'MyProject'</span></div><div class="line">PLIST_FILE_PATH = <span class="string">'MyProject/Info.plist'</span></div><div class="line"></div><div class="line">INHOUSE_IDENTIFIER = <span class="string">'com.bundle.id.inhouse'</span></div><div class="line">APPSTORE_IDENTIFIER = <span class="string">'com.bundle.id'</span></div><div class="line"></div><div class="line"><span class="comment"># 上传 ipa 包的平台，可以用 蒲公英，Bugly 等替代</span></div><div class="line">OTA_SERVER_URL = <span class="string">'http://ota.client.xxx.xxx.cn/ios/upload'</span></div><div class="line"></div><div class="line"><span class="comment"># 更新bundle id信息，修改app identifier</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bundle_id</span><span class="params">(app_id)</span></span></div><div class="line">  say <span class="string">'update bundle id'</span></div><div class="line">  update_app_identifier(<span class="symbol">xcodeproj:</span> PROJECT_FILE_PATH,</div><div class="line">                        <span class="symbol">plist_path:</span> PLIST_FILE_PATH,</div><div class="line">                        <span class="symbol">app_identifier:</span> app_id)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 修改build号</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_build_version</span><span class="params">(options)</span></span></div><div class="line">  say <span class="string">'update build version'</span></div><div class="line"></div><div class="line">  buildVersion = options[<span class="symbol">:build</span>]</div><div class="line">  set_info_plist_value(<span class="symbol">path:</span> PLIST_FILE_PATH,</div><div class="line">                       <span class="symbol">key:</span> <span class="string">"ProjectBuildVersion"</span>,</div><div class="line">                       <span class="symbol">value:</span> buildVersion)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 修改bundle号</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bundle_version</span><span class="params">(typePrefix,options)</span></span></div><div class="line">  say <span class="string">'update bundle version'</span></div><div class="line"></div><div class="line">  bundleVersion = options[<span class="symbol">:build</span>] + <span class="string">"<span class="subst">#&#123;typePrefix&#125;</span>"</span></div><div class="line">  set_info_plist_value(<span class="symbol">path:</span> PLIST_FILE_PATH,</div><div class="line">                       <span class="symbol">key:</span> <span class="string">"CFBundleVersion"</span>,</div><div class="line">                       <span class="symbol">value:</span> bundleVersion)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 打包</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_ipa</span><span class="params">(configuration,exportMethod,options)</span></span></div><div class="line">  say <span class="string">'generate ipa'</span></div><div class="line"></div><div class="line">  fullVersion = get_version_number + <span class="string">"_"</span> + options[<span class="symbol">:build</span>]</div><div class="line">  outputName = <span class="string">"<span class="subst">#&#123;APP_NAME&#125;</span>_V<span class="subst">#&#123;fullVersion&#125;</span>_<span class="subst">#&#123;configuration&#125;</span>"</span></div><div class="line">  outputPath = <span class="string">"<span class="subst">#&#123;OUTPUT_PATH&#125;</span><span class="subst">#&#123;outputName&#125;</span>/"</span></div><div class="line"></div><div class="line">  gym(</div><div class="line">    <span class="symbol">scheme:</span> <span class="string">"<span class="subst">#&#123;SCHEME_NAME&#125;</span>"</span>,</div><div class="line">    <span class="symbol">clean:</span> <span class="literal">true</span>,</div><div class="line">    <span class="symbol">output_directory:</span> <span class="string">"<span class="subst">#&#123;outputPath&#125;</span>"</span>,</div><div class="line">    <span class="symbol">output_name:</span> <span class="string">"<span class="subst">#&#123;outputName&#125;</span>.ipa"</span>,</div><div class="line">    <span class="symbol">configuration:</span> <span class="string">"<span class="subst">#&#123;configuration&#125;</span>"</span>,</div><div class="line">    <span class="symbol">include_symbols:</span> <span class="string">"true"</span>,</div><div class="line">    <span class="comment"># archive_path: "#&#123;outputPath&#125;",</span></div><div class="line">    <span class="comment"># 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id</span></div><div class="line">    <span class="symbol">export_method:</span> <span class="string">"<span class="subst">#&#123;exportMethod&#125;</span>"</span></div><div class="line">  )</div><div class="line"></div><div class="line">  upload_ota(<span class="string">"../<span class="subst">#&#123;outputPath&#125;</span>"</span>, outputName, configuration)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 上传 OTA</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_ota</span><span class="params">(output_path, app_name, configuration)</span></span></div><div class="line">  say <span class="string">'upload ipa to ota'</span></div><div class="line"></div><div class="line">  <span class="comment"># 99-AppStore包, 0-正式包, 1-开发临时测试包, 2-第三方渠道包, 3-每日构建包</span></div><div class="line">  <span class="comment"># 默认为1</span></div><div class="line">  force_bundle_id = APPSTORE_IDENTIFIER</div><div class="line">  type = <span class="number">1</span></div><div class="line">  <span class="keyword">if</span> configuration == <span class="string">"Inhouse"</span></div><div class="line">    force_bundle_id = INHOUSE_IDENTIFIER</div><div class="line">    type = <span class="number">2</span></div><div class="line">  <span class="keyword">elsif</span> configuration == <span class="string">"AdHoc"</span></div><div class="line">    type = <span class="number">0</span></div><div class="line">  <span class="keyword">elsif</span> configuration == <span class="string">"Release"</span></div><div class="line">    type = <span class="number">99</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  sh <span class="string">"curl -# -S -F 'pkg_file=@<span class="subst">#&#123;output_path&#125;</span><span class="subst">#&#123;app_name&#125;</span>.ipa' -F 'dsym_file=@<span class="subst">#&#123;output_path&#125;</span><span class="subst">#&#123;app_name&#125;</span>.app.dSYM.zip' -F 'version=<span class="subst">#&#123;app_name&#125;</span>' -F 'description=<span class="subst">#&#123;app_name&#125;</span>' -F 'app_bundle_id=<span class="subst">#&#123;APPSTORE_IDENTIFIER&#125;</span>' -F 'pkg_type=<span class="subst">#&#123;type&#125;</span>' -F 'force_bundle_id=<span class="subst">#&#123;force_bundle_id&#125;</span>' <span class="subst">#&#123;OTA_SERVER_URL&#125;</span>"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></div><div class="line">  before_all <span class="keyword">do</span></div><div class="line">    <span class="comment"># ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."</span></div><div class="line">    <span class="comment"># cocoapods</span></div><div class="line">    puts File.absolute_path(<span class="string">"."</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"更新build号"</span></div><div class="line">  lane <span class="symbol">:buildVersion</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    update_build_version(options)</div><div class="line">  <span class="keyword">end</span> </div><div class="line"></div><div class="line">  desc <span class="string">"更新Debug版bundle号"</span></div><div class="line">  lane <span class="symbol">:debugBundleVersion</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    update_bundle_version(<span class="string">".Debug"</span>,options)</div><div class="line">  <span class="keyword">end</span> </div><div class="line"></div><div class="line">  desc <span class="string">"更新AppStore版bundle号"</span></div><div class="line">  lane <span class="symbol">:storeBundleVersion</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    update_bundle_version(<span class="string">""</span>,options)</div><div class="line">  <span class="keyword">end</span>   </div><div class="line"></div><div class="line">  desc <span class="string">"打Debug包"</span></div><div class="line">  lane <span class="symbol">:build_debug</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    buildVersion options</div><div class="line">    generate_ipa(<span class="string">"Debug"</span>,<span class="string">"development"</span>,options)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"打Inhouse包"</span></div><div class="line">  lane <span class="symbol">:build_inhouse</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    buildVersion options</div><div class="line">    update_bundle_id(<span class="string">"<span class="subst">#&#123;INHOUSE_IDENTIFIER&#125;</span>"</span>)</div><div class="line">    generate_ipa(<span class="string">"Inhouse"</span>,<span class="string">"enterprise"</span>,options)</div><div class="line">    <span class="comment"># 还原</span></div><div class="line">    update_bundle_id(<span class="string">"<span class="subst">#&#123;APPSTORE_IDENTIFIER&#125;</span>"</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"打Adhoc包"</span></div><div class="line">  lane <span class="symbol">:build_adhoc</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    buildVersion options</div><div class="line">    generate_ipa(<span class="string">"AdHoc"</span>,<span class="string">"ad-hoc"</span>,options)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"打Alpha包"</span></div><div class="line">  lane <span class="symbol">:build_alpha</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    development options</div><div class="line">    inhouse options</div><div class="line">    adhoc options</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"打AppStore包"</span></div><div class="line">  lane <span class="symbol">:build_release</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    buildVersion options</div><div class="line">    storeBundleVersion options</div><div class="line">    update_bundle_id(<span class="string">"<span class="subst">#&#123;APPSTORE_IDENTIFIER&#125;</span>"</span>)</div><div class="line">    generate_ipa(<span class="string">"Release"</span>,<span class="string">"app-store"</span>,options)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"match"</span></div><div class="line">  lane <span class="symbol">:sn_match</span> <span class="keyword">do</span> </div><div class="line">    <span class="comment"># 这两行可以注册新设备，并且自动更新仓库下的profiles文件</span></div><div class="line">    <span class="comment"># register_devices(devices_file: "./devices.txt")</span></div><div class="line">    <span class="comment"># match(git_branch: "branch", type: "development", force_for_new_devices: true)</span></div><div class="line">    match(<span class="symbol">git_branch:</span> <span class="string">"branch"</span>, <span class="symbol">readonly:</span> <span class="literal">true</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  after_all <span class="keyword">do</span> <span class="params">|lane|</span></div><div class="line"></div><div class="line">    <span class="comment"># slack(</span></div><div class="line">    <span class="comment">#   message: "Successfully deployed new App Update."</span></div><div class="line">    <span class="comment"># )</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  error <span class="keyword">do</span> <span class="params">|lane, exception|</span></div><div class="line">    <span class="comment"># slack(</span></div><div class="line">    <span class="comment">#   message: exception.message,</span></div><div class="line">    <span class="comment">#   success: false</span></div><div class="line">    <span class="comment"># )</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md</span></div><div class="line"><span class="comment"># All available actions: https://docs.fastlane.tools/actions</span></div><div class="line"></div><div class="line"><span class="comment"># fastlane reports which actions are used</span></div><div class="line"><span class="comment"># No personal data is recorded. Learn more at https://github.com/fastlane/enhancer</span></div></pre></td></tr></table></figure>
<h3 id="3-4-fastlane-发布"><a href="#3-4-fastlane-发布" class="headerlink" title="3.4 fastlane 发布"></a>3.4 fastlane 发布</h3><h4 id="deliver-amp-Deliverfile"><a href="#deliver-amp-Deliverfile" class="headerlink" title="deliver &amp; Deliverfile"></a>deliver &amp; Deliverfile</h4><p><a href="https://github.com/fastlane/fastlane/blob/master/deliver/Deliverfile.md" target="_blank" rel="external">Deliverfile</a> 主要是用于发布上传时的配置文件。</p>
<p>前面介绍了，如果在 <code>fastlane init</code> 的时候选择了在 iTunes Connect 创建 App，那么 fastlane 会调用 produce 进行初始化，同时会执行 <code>deliver init</code>，执行完毕后会创建一个 Deliverfile 文件，如果没有在初始化的时候选择执行 produce 流程当然 deliver 也不会执行，可以手动执行 <code>fastlane deliver init</code> 创建。</p>
<p>执行时，会自动登录你在 Appfile 中设置的 itunes_connect_id，根据 Appfile 中的 app_identifier，会为你下载当前 iTC 中的截图，元数据等等。执行完成后会生成<br>一个 Deliverfile 文件，/metadata 和 /screenshots 文件夹。</p>
<p>本地修改 Deliverfile，元数据，或者截图文件，执行 <code>fastlane deliver</code> 后，可以上传到 iTunes Connect 上。</p>
<p>如果你想把你本地的 ipa 文件上传到 iTunes Connect 上，可以执行：</p>
<p><code>fastlane deliver --ipa &quot;App.ipa&quot; --submit_for_review</code></p>
<p>如果你之前上传过 ipa 包，想选择一个用来提交审核，可以执行：</p>
<p><code>fastlane deliver submit_build --build_number xxxx</code></p>
<p>这里 xxxx 是你想选择的 build number。或者，可以直接选择最新的：</p>
<p><code>fastlane deliver submit_build --latest</code></p>
<p>在 Fastfile 里可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deliver(app_version: ENV[&quot;app_versionName&quot;],</div><div class="line">        ipa: &quot;#&#123;ipa_path&#125;&quot;,</div><div class="line">        submit_for_review: false</div><div class="line">       )</div></pre></td></tr></table></figure>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote>
<p><a href="https://github.com/fastlane/fastlane" target="_blank" rel="external">官方文档</a><br><a href="http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#migration" target="_blank" rel="external">Simplify your life with fastlane match</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;iOS 应用的证书配置、打包和上线，大家都知道，步骤很繁琐，如果纯人工处理的话是非常浪费时间的，因此，我抽空研究了下 fastlane ，fastlane 是用 Ruby 写的一套自动化工具集，用它可以很轻松的完成证书配置，打包发布等工作，配合 jenkins 使用效果更佳。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="fastlane" scheme="http://mlijin9011.github.io/tags/fastlane/"/>
    
      <category term="jenkins" scheme="http://mlijin9011.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>成都游记</title>
    <link href="http://mlijin9011.github.io/2016/10/10/%E6%88%90%E9%83%BD%E6%B8%B8%E8%AE%B0/"/>
    <id>http://mlijin9011.github.io/2016/10/10/成都游记/</id>
    <published>2016-10-10T06:35:24.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多人都说，成都是那个你来了就不想离开的地方！有人留恋的是麻辣鲜香的美食，有人留恋的是独特魅力的景色，有人留恋的是那些漂亮水灵的姑娘……</p>
<p>这次十一借着回家的名义去成都游玩了几天，实在是人很多啊，但也抵挡不了成都的美！</p>
<a id="more"></a>
<p>首先是成都的火车站，跟北京的火车站比起来是小了点。一出车站就体验到了大四川的人真的是多啊，正好还赶上十一。</p>
<p><img src="/2016/10/10/成都游记/1.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/1.2.JPG" alt="image"></p>
<p>提前在去哪儿网定了速8酒店春熙路店，满怀希望的去了一看，真的是破破烂烂，窗户都关不上，囧。</p>
<p>酒店安顿好之后开始了第一站的行程——宽窄巷子。依旧是那么多人，宽窄巷子是宽巷子、窄巷子和井巷子三条平行排列的老式街道及其之间的四合院落群组成，井巷子比较多小吃。</p>
<p><img src="/2016/10/10/成都游记/2.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.2.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.3.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.4.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.5.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.6.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.7.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.8.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.9.JPG" alt="image"></p>
<p>吃饱喝足了之后接着第二站——杜甫草堂，是杜甫流寓成都时的故居。</p>
<p><img src="/2016/10/10/成都游记/3.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.2.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.3.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.4.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.5.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.6.JPG" alt="image"></p>
<p>接下来去了大熊猫养育基地，不得不说，国宝就是可爱啊！</p>
<p><img src="/2016/10/10/成都游记/4.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/4.2.JPG" alt="image"><br><img src="/2016/10/10/成都游记/4.3.JPG" alt="image"><br><img src="/2016/10/10/成都游记/4.4.JPG" alt="image"><br><img src="/2016/10/10/成都游记/4.5.JPG" alt="image"></p>
<p>接下来是美丽的都江堰，本人比较喜欢这种山清水秀的地方</p>
<p><img src="/2016/10/10/成都游记/5.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.2.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.3.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.4.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.5.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.6.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.7.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.8.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.9.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.10.JPG" alt="image"></p>
<p>看了这些照片，是不是有点想去呢，😝</p>
<p>假期结束了，开始上班吧，😒</p>
<p>此文同时收录于我的公众号（小乱谈），<a href="https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&amp;mid=2247483777&amp;idx=1&amp;sn=67a4fa65e9f1b0a032452ac329d604d9&amp;chksm=ea9dfa5cddea734ac9727d182a3970b3230f0ffe151bb2c99720f92ec60f85c4e2abd20f1045#rd" target="_blank" rel="external">成都游记</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人都说，成都是那个你来了就不想离开的地方！有人留恋的是麻辣鲜香的美食，有人留恋的是独特魅力的景色，有人留恋的是那些漂亮水灵的姑娘……&lt;/p&gt;
&lt;p&gt;这次十一借着回家的名义去成都游玩了几天，实在是人很多啊，但也抵挡不了成都的美！&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://mlijin9011.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="成都" scheme="http://mlijin9011.github.io/tags/%E6%88%90%E9%83%BD/"/>
    
      <category term="都江堰" scheme="http://mlijin9011.github.io/tags/%E9%83%BD%E6%B1%9F%E5%A0%B0/"/>
    
  </entry>
  
  <entry>
    <title>首尔之行</title>
    <link href="http://mlijin9011.github.io/2016/09/28/%E9%A6%96%E5%B0%94%E4%B9%8B%E8%A1%8C/"/>
    <id>http://mlijin9011.github.io/2016/09/28/首尔之行/</id>
    <published>2016-09-28T13:53:19.000Z</published>
    <updated>2017-08-21T01:39:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>首尔是个极具小清新的城市，干净的大街上各色店铺、餐馆都色彩缤纷，极具特色与少女心，无意间闯进的街道，转角遇见的花店都让人想要驻足，送你一颗少女心，圆你一场甜美梦。</p>
<a id="more"></a>
<p>这是酒店后面的街道，早上起来溜达，吃点东西，街道两边的店面装饰的都五颜六色的很好看。</p>
<p><img src="/2016/09/28/首尔之行/1.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/1.2.JPG" alt="image"></p>
<p>免税店里面都是中国人，就跟不要钱一样排着队抢着买东西，然后去了南山公园和首尔塔，南山公园有个很著名的地方——爱情锁。</p>
<p><img src="/2016/09/28/首尔之行/2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/3.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/3.2.JPG" alt="image"></p>
<p>在这里买了个韩剧里面经常出现的冰激凌吃，插得那两根甜的中间夹杂着点十三香的味道，不过还挺好吃的。</p>
<p><img src="/2016/09/28/首尔之行/4.JPG" alt="image"></p>
<p>这是韩国的天安门故宫——光华门和景福宫。里面很大但是都是新建的没有什么意思。</p>
<p><img src="/2016/09/28/首尔之行/5.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/5.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/5.3.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/5.4.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/5.5.JPG" alt="image"></p>
<p>这是首尔的天安门广场吧，来的时候正好是韩国的韩服节，大很多本地人穿着韩服来广场上体验传统韩国文化，广场上的世宗大王像，世宗大王是发明韩国文字的一个皇帝。</p>
<p><img src="/2016/09/28/首尔之行/6.JPG" alt="image"></p>
<p>接着去了梨花女子大学，这里的美女真的是多啊，不过没好意思拍照，嘻嘻。</p>
<p>然后是韩屋村，有点像鼓楼大街那样的胡同院子一样，是韩国特色的古代房屋建筑，朝鲜时代的两班居住的区域，现在也还有人在住。街道仍然很干净漂亮。</p>
<p><img src="/2016/09/28/首尔之行/7.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/7.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/7.3.JPG" alt="image"></p>
<p>美食来了，正宗的冷面，大酱汤，拌饭，烤韩牛，参鸡汤</p>
<p><img src="/2016/09/28/首尔之行/8.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.3.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.4.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.5.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.6.JPG" alt="image"></p>
<p>作为一个资深的追星族，来到韩国当然少不了的是追韩星喽，这是一条韩流明星街，街道上有一个挨一个的明星团体应援吉祥物。</p>
<p><img src="/2016/09/28/首尔之行/9.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.3.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.4.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.5.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.6.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.7.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.8.JPG" alt="image"></p>
<p>明星手印</p>
<p><img src="/2016/09/28/首尔之行/10.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/10.1.JPG" alt="image"></p>
<p>这是在江南，首尔的富人区，果然是有钱呢，商店都是奢侈品，连地铁站都这么豪华呢。</p>
<p><img src="/2016/09/28/首尔之行/11.JPG" alt="image"></p>
<p>韩国的炸鸡啤酒，啤酒兑着烧酒，哇好好喝</p>
<p><img src="/2016/09/28/首尔之行/12.JPG" alt="image"></p>
<p>明洞，逛街吃小吃的地方</p>
<p><img src="/2016/09/28/首尔之行/13.JPG" alt="image"></p>
<p>明洞的 711 便利店都这么大</p>
<p><img src="/2016/09/28/首尔之行/14.JPG" alt="image"></p>
<p>这是一家书店，很大，环境也很好</p>
<p><img src="/2016/09/28/首尔之行/15.JPG" alt="image"></p>
<p>壁画村，真的美极了</p>
<p><img src="/2016/09/28/首尔之行/16.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/16.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/16.3.JPG" alt="image"></p>
<p>回来的飞机上拍的，飞上云霄</p>
<p><img src="/2016/09/28/首尔之行/17.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/17.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/17.3.JPG" alt="image"></p>
<p>作为一个看了韩剧N年的人来说，这一趟首尔之行圆了对韩国和韩式生活得好奇心，多年来看韩剧学的韩语也派上了用场，^-^.</p>
<p>此文同时收录于我的公众号（小乱谈），<a href="https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&amp;mid=2247483713&amp;idx=1&amp;sn=361d40c9ddab773f0d28bd9666cc53f9&amp;chksm=ea9dfa9cddea738ab312fee545f55a54ae4d15c25c3d25193a25bc80d969b0218560b30947a2#rd" target="_blank" rel="external">首尔之行</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首尔是个极具小清新的城市，干净的大街上各色店铺、餐馆都色彩缤纷，极具特色与少女心，无意间闯进的街道，转角遇见的花店都让人想要驻足，送你一颗少女心，圆你一场甜美梦。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://mlijin9011.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="首尔" scheme="http://mlijin9011.github.io/tags/%E9%A6%96%E5%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>使用CocoaPods创建私有Spec Repo管理项目公共组件</title>
    <link href="http://mlijin9011.github.io/2016/08/19/%E4%BD%BF%E7%94%A8CocoaPods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89Spec-Repo%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E5%85%AC%E5%85%B1%E7%BB%84%E4%BB%B6/"/>
    <id>http://mlijin9011.github.io/2016/08/19/使用CocoaPods创建私有Spec-Repo管理项目公共组件/</id>
    <published>2016-08-19T11:14:19.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目做多了，你会发现有很多基础功能模块是可以通用的，完全可以独立出来抽象成一个公用库，方便以后开发新项目的时候可以直接使用这些基础组件，不需要再重新开发，提高开发效率。同时，随着项目和业务的发展，工程量越来越大，业务模块越来越多，我们采用组件化的方式来开发，组件化就需要每个业务模块独立开发，方便迭代和代码管理。不管是通用的基础服务组件，还是独立的业务功能组件，都需要我们来进行组件管理。</p>
<p>CocoaPods 是非常好用的一个iOS依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及管理自己的项目中的私有组件库。</p>
<a id="more"></a>
<h1 id="CocoaPods-管理私有组件"><a href="#CocoaPods-管理私有组件" class="headerlink" title="CocoaPods 管理私有组件"></a>CocoaPods 管理私有组件</h1><p>我们通过 CocoaPods 来使用和管理项目中的第三方库非常方便也非常简单，下面我们来学习下如何创建自己的私有的组件仓库，管理私有组件。</p>
<h2 id="1-创建私有-Spec-Repo"><a href="#1-创建私有-Spec-Repo" class="headerlink" title="1.创建私有 Spec Repo"></a>1.创建私有 Spec Repo</h2><p>Spec Repo 是一个存放了所有 Pods 的索引文件 podspec 的仓库，集成的时候就是通过仓库里的 Pod 所对应的索引文件来找到对应的源码或者 framework的，当你使用 CocoaPods 后他会被 clone 到本地的 <code>~/.cocoapods/repos</code> 目录下，Github 官方的 Spec Repo 叫 master，我们可以到这个目录下查看 master 下的结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Specs</div><div class="line">    └── [SPEC_NAME]</div><div class="line">        └── [VERSION]</div><div class="line">            └── [SPEC_NAME].podspec</div></pre></td></tr></table></figure>
<p>我们要存放私有的组件，当然不能用官方的 Repo 库了，所以我们要创建一个私有的 Spec Repo 库，首先我们先在 Gitlab 或者其他 Git 服务中创建一个仓库，例如我这里创建的一个仓库地址：<a href="https://gitlab.com/MZLApp/MZLSpecs.git" target="_blank" rel="external">https://gitlab.com/MZLApp/MZLSpecs.git</a> 。            </p>
<p>仓库创建好之后，执行下面的命令来把这个仓库作为一个 Pod 索引仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</div><div class="line">$ pod repo add MZLSpecs https://gitlab.com/MZLApp/MZLSpecs.git</div></pre></td></tr></table></figure>
<p>执行成功后，进入到 <code>~/.cocoapods/repos</code> 目录，就可以看到我们刚创建的 MZLSpecs 这个目录了，此时创建私有 Spec Repo 就完成了。</p>
<h2 id="2-创建-Pod-组件库"><a href="#2-创建-Pod-组件库" class="headerlink" title="2. 创建 Pod 组件库"></a>2. 创建 Pod 组件库</h2><p><a href="http://guides.cocoapods.org/making/using-pod-lib-create" target="_blank" rel="external">CocoaPods</a>提供了命令 <code>pod lib create xxx</code> 可以给我们很方便的创建一个 Pod，例如，创建一个 ObjC 常用的 Category 分类的公用组件库，执行下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create MZLCategory</div></pre></td></tr></table></figure>
<p>这里会询问几个问题，1.你的仓库是用什么语言（Swift/ObjC）；2.是否要帮你创建一个 Demo 工程；3.你是否需要一个测试框架（Specta/Kiwi/None）；4.你是否需要基于 View 测试；5.你的 Pod 库里类的前缀。按你的具体情况做出选择：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Cloning `https://github.com/CocoaPods/pod-template.git` into `MZLCategory`.</div><div class="line">Configuring MZLCategory template.</div><div class="line"></div><div class="line">------------------------------</div><div class="line"></div><div class="line">To get you started we need to ask a few questions, this should only take a minute.</div><div class="line"></div><div class="line">If this is your first time we recommend running through with the guide:</div><div class="line"> - http://guides.cocoapods.org/making/using-pod-lib-create.html</div><div class="line"> ( hold cmd and click links to open in a browser. )</div><div class="line"></div><div class="line"></div><div class="line">What language do you want to use?? [ Swift / ObjC ]</div><div class="line"> &gt; ObjC</div><div class="line"></div><div class="line">Would you like to include a demo application with your library? [ Yes / No ]</div><div class="line"> &gt; Yes</div><div class="line"></div><div class="line">Which testing frameworks will you use? [ Specta / Kiwi / None ]</div><div class="line"> &gt; None</div><div class="line"></div><div class="line">Would you like to do view based testing? [ Yes / No ]</div><div class="line"> &gt; No</div><div class="line"></div><div class="line">What is your class prefix?</div><div class="line"> &gt; MZL</div></pre></td></tr></table></figure>
<p>问题选择完成后，如果你选择了帮你创建 Demo 的话，CocoaPods 会自动帮你执行 <code>pod install</code> 来生成 workspace 文件，完成后并自动在 Xcode 中打开：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Running pod install on your new library.</div><div class="line"></div><div class="line">Analyzing dependencies</div><div class="line">Fetching podspec for `MZLCategory` from `../`</div><div class="line">Downloading dependencies</div><div class="line">Installing MZLCategory (0.1.0)</div><div class="line">Generating Pods project</div><div class="line">Integrating client project</div><div class="line"></div><div class="line">[!] Please close any current Xcode sessions and use `MZLCategory.xcworkspace` for this project from now on.</div><div class="line">Sending stats</div><div class="line">Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.</div><div class="line"></div><div class="line">[!] Automatically assigning platform ios with version 8.3 on target MZLCategory_Example because no platform was specified. Please specify a platform for this target in your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.</div><div class="line"></div><div class="line"> Ace! you&apos;re ready to go!</div><div class="line"> We will start you off by opening your project in Xcode</div><div class="line">  open &apos;MZLCategory/Example/MZLCategory.xcworkspace&apos;</div><div class="line"></div><div class="line">To learn more about the template see `https://github.com/CocoaPods/pod-template.git`.</div><div class="line">To learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.</div></pre></td></tr></table></figure>
<p>这样，一个 Pod 就创建好了，我们来看这个 Pod 的结构以及相关介绍如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">MZLCategory</div><div class="line">├── Example                     # Demo</div><div class="line">│   ├── MZLCategory</div><div class="line">│   ├── MZLCategory.xcodeproj</div><div class="line">│   ├── MZLCategory.xcworkspace</div><div class="line">│   ├── Podfile</div><div class="line">│   ├── Podfile.lock</div><div class="line">│   ├── Pods</div><div class="line">│   └── Tests</div><div class="line">├── LICENSE</div><div class="line">├── MZLCategory                 # Pod 组件</div><div class="line">│   ├── Assets                  # Pod 中的资源文件目录</div><div class="line">│   └── Classes                 # Pod 中的类文件目录   </div><div class="line">├── MZLCategory.podspec         # Pod 索引文件</div><div class="line">├── README.md</div><div class="line">└── _Pods.xcodeproj -&gt; Example/Pods/Pods.xcodeproj</div></pre></td></tr></table></figure>
<p>第一次提交，我们先配置好 podspec 文件，修改 summary、description、homepage、source 等配置，更多 podspec 的介绍在<a href="http://guides.cocoapods.org/making/specs-and-specs-repo.html" target="_blank" rel="external">这里</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line">  s.name             = &apos;MZLCategory&apos;</div><div class="line">  s.version          = &apos;0.1.0&apos;</div><div class="line">  s.summary          = &apos;公用组件库：ObjC 的常用 Category 库&apos;</div><div class="line"></div><div class="line"># This description is used to generate tags and improve search results.</div><div class="line">#   * Think: What does it do? Why did you write it? What is the focus?</div><div class="line">#   * Try to keep it short, snappy and to the point.</div><div class="line">#   * Write the description between the DESC delimiters below.</div><div class="line">#   * Finally, don&apos;t worry about the indent, CocoaPods strips it!</div><div class="line"></div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">公用组件库：ObjC 的常用 Category 库，包括 NSString，UIImage 等常用的类的分类</div><div class="line">                       DESC</div><div class="line"></div><div class="line">  s.homepage         = &apos;https://gitlab.com/MZLApp/MZLCategory&apos;</div><div class="line">  # s.screenshots     = &apos;www.example.com/screenshots_1&apos;, &apos;www.example.com/screenshots_2&apos;</div><div class="line">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line">  s.author           = &#123; &apos;lijin&apos; =&gt; &apos;mlijin9011@163.com&apos; &#125;</div><div class="line">  s.source           = &#123; :git =&gt; &apos;https://gitlab.com/MZLApp/MZLCategory.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class="line">  # s.social_media_url = &apos;https://twitter.com/&lt;TWITTER_USERNAME&gt;&apos;</div><div class="line"></div><div class="line">  s.ios.deployment_target = &apos;8.0&apos;</div><div class="line"></div><div class="line">  s.source_files = &apos;MZLCategory/Classes/**/*&apos;        #代码源文件地址，**/*表示Classes目录及其子目录下所有文件，如果有多个目录下则用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置</div><div class="line">  </div><div class="line">  # s.resource_bundles = &#123;</div><div class="line">  #   &apos;MZLCategory&apos; =&gt; [&apos;MZLCategory/Assets/*.png&apos;]  #资源文件地址</div><div class="line">  # &#125;</div><div class="line"></div><div class="line">  # s.public_header_files = &apos;Pod/Classes/**/*.h&apos;     #公开头文件地址</div><div class="line">  # s.frameworks = &apos;UIKit&apos;, &apos;MapKit&apos;                 #所需的framework，多个用逗号隔开</div><div class="line">  # s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;              #依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>这个 Pod 已经是一个本地的 Git 仓库，接着我们需要把本地仓库和远程仓库关联起来，先在 Gitlab 上创建一个相应的组件仓库：<a href="https://gitlab.com/MZLApp/MZLCategory.git" target="_blank" rel="external">https://gitlab.com/MZLApp/MZLCategory.git</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd MZLCategory</div><div class="line">$ git add .</div><div class="line">$ git commit -s -m &quot;Initial Commit of Pod Library&quot;</div><div class="line">$ git remote add origin git@gitlab.com:MZLApp/MZLCategory.git   #关联远端仓库</div><div class="line">$ git push origin master     #提交到远端仓库</div></pre></td></tr></table></figure>
<p>创建 tag，这个 tag 需要和 podspec 文件中的 version 一致，不然提交 pod 到 spec repo 的时候就会说找不到此版本，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag -m &quot;Initial Pod&quot; 0.1.0</div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<h2 id="3-提交-Pod-到私有-Spec-Repo"><a href="#3-提交-Pod-到私有-Spec-Repo" class="headerlink" title="3. 提交 Pod 到私有 Spec Repo"></a>3. 提交 Pod 到私有 Spec Repo</h2><p>提交 Pod 到 Spec Repo 就是提交 Pod 的索引文件 podspec，提交之前先验证一下，验证通过后才能提交，执行下面的命令来验证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint --allow-warnings</div></pre></td></tr></table></figure>
<p>验证成功后会输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-&gt; MZLCategory (0.1.0)</div><div class="line">MZLCategory passed validation.</div></pre></td></tr></table></figure>
<p>验证成功后，我们就可以提交 podspec 到 Spec Repo 了，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push MZLSpecs MZLCategory.podspec --use-libraries --allow-warnings</div></pre></td></tr></table></figure>
<p>提交成功后，就可以在 <code>~/.cocoapods/repos/MZLSpecs</code> 目录下看到 MZLCategory 这个 Pod 了，同时 MZLSpecs 的远端仓库中 MZLCategory 这个 pod 的 podspec 也被 push 上去了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MZLSpecs</div><div class="line">└── MZLCategory</div><div class="line">    └── 0.1.0</div></pre></td></tr></table></figure>
<h2 id="4-私有-Pod-库的使用"><a href="#4-私有-Pod-库的使用" class="headerlink" title="4. 私有 Pod 库的使用"></a>4. 私有 Pod 库的使用</h2><p>使用方法同 Github 官方的第三方库，只需要在你的 Podfile 文件中添加你的 Spec Repo 地址作为查找 Pod 库的源地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div><div class="line">source &apos;https://gitlab.com/MZLApp/MZLSpecs.git&apos;</div><div class="line"></div><div class="line">use_frameworks!</div><div class="line">inhibit_all_warnings!</div><div class="line"></div><div class="line">platform :ios, &apos;8.0&apos;</div><div class="line"></div><div class="line">target &apos;SinaNews&apos; do</div><div class="line">    pod &apos;AFNetworking&apos;, &apos;3.1.0&apos;</div><div class="line">    ... ...</div><div class="line">    pod &apos;MZLCategory&apos;,  &apos;0.1.0&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://guides.cocoapods.org/making/private-cocoapods.html" target="_blank" rel="external">CocoaPods官方文档</a></li>
<li><a href="http://www.cocoachina.com/ios/20150228/11206.html" target="_blank" rel="external">使用Cocoapods创建私有podspec</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;项目做多了，你会发现有很多基础功能模块是可以通用的，完全可以独立出来抽象成一个公用库，方便以后开发新项目的时候可以直接使用这些基础组件，不需要再重新开发，提高开发效率。同时，随着项目和业务的发展，工程量越来越大，业务模块越来越多，我们采用组件化的方式来开发，组件化就需要每个业务模块独立开发，方便迭代和代码管理。不管是通用的基础服务组件，还是独立的业务功能组件，都需要我们来进行组件管理。&lt;/p&gt;
&lt;p&gt;CocoaPods 是非常好用的一个iOS依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及管理自己的项目中的私有组件库。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://mlijin9011.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative入门（3）—— ReactNative与原生的交互</title>
    <link href="http://mlijin9011.github.io/2016/05/17/ReactNative%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/"/>
    <id>http://mlijin9011.github.io/2016/05/17/ReactNative入门（3）/</id>
    <published>2016-05-17T08:03:28.000Z</published>
    <updated>2018-03-18T09:15:18.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在项目中，通常我们会使用 RN 和原生混合开发的模式，所以这就涉及到一个重要的内容—— RN 和原生之间的数据交互。现在我们来一起看一下该怎样去实现数据交互。交互涉及到两部分内容:1. OC 打开 RN 页面；2. RN 调用 OC 方法；3. OC 调用 RN 方法。</p>
<a id="more"></a>
<h3 id="iOS-原生页面打开-RN-页面"><a href="#iOS-原生页面打开-RN-页面" class="headerlink" title="iOS 原生页面打开 RN 页面"></a>iOS 原生页面打开 RN 页面</h3><p>可以自定义一个 <code>ReactViewController</code> 类，在这个控制器中添加一个 <code>RCTRootView</code> 作为子 View。这样这个 ViewController 就可以显示一个 RN 页面了，具体实现方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view.</div><div class="line">    </div><div class="line">	NSURL *jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</div><div class="line">	RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</div><div class="line">                                                      moduleName:@&quot;test&quot;</div><div class="line">                                               initialProperties:nil</div><div class="line">                                                   launchOptions:nil];</div><div class="line">	reactView.frame = self.view.bounds;</div><div class="line">	[self.view addSubView:rootView];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="RN-调用-OC-方法"><a href="#RN-调用-OC-方法" class="headerlink" title="RN 调用 OC 方法"></a>RN 调用 OC 方法</h3><p>首先创建一个工具类，来专门处理 RN 和 OC 间的交互，例如 <code>ReactUtil</code>，这个类需要实现 <code>RCTBridgeModule</code> 协议，<code>RCTBridgeModule</code> 是定义好的 protocol，实现该协议的类，会自动注册到 OC 对应的 Bridge 中。<br>OC-Bridge 上层负责与 OC 通信，下层负责和 JS-Bridge 通信，而 JS-Bridge 负责和 JS 通信。<br>这样通过 OC-Bridge 和 JS-Bridge 就可以实现 JS 和 OC 的相互调用了。</p>
<p>ReactUtil 类的具体实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_MODULE()</div><div class="line"></div><div class="line">RCT_EXPORT_METHOD(jsInvokeApp:(NSString *)eventName parameter:(NSDictionary *)parameter resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) &#123;</div><div class="line">    NSLog(@&quot;接收到RN传过来的事件名：%@，数据为:%@&quot;, eventName, parameter);</div><div class="line">    </div><div class="line">    //  TODO: 具体业务处理，可根据eventName，parameter等区分</div><div class="line">    BOOL result;</div><div class="line">    if (result) &#123;</div><div class="line">        resolve(@&quot;&quot;);</div><div class="line">    &#125; else &#123;</div><div class="line">        NSError *error = [NSError errorWithDomain:@&quot;com.XXX.domain&quot; code:1 userInfo:nil];</div><div class="line">        reject(@&quot;code&quot;, @&quot;message&quot;, error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有实现 <code>RCTBridgeModule</code> 协议的类都必须显示的 include 宏命令: <code>RCT_EXPORT_MODULE()</code>。<br><code>RCT_EXPORT_MODULE</code> 的作用是当 OC-Bridge 加载的时候，自动注册一个 Module。这个 Module 可以在 JS-Bridge 中调用。<br><code>RCT_EXPORT_MODULE</code> 接受字符串作为其 Module 的名称，如果不设置名称的话默认就使用类名作为 Module 的名称。</p>
<p>最后我们需要在 JS 文件中调用 <code>ReactUtil</code> 中的方法即可:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var &#123; NativeModules &#125; = require(&apos;react-native&apos;);</div><div class="line">var ReactUtil = NativeModules.ReactUtil;</div><div class="line"> </div><div class="line">//获取Promise对象处理</div><div class="line">async _updateEvents() &#123;</div><div class="line">    try &#123;</div><div class="line">       var events = await ReactUtil.jsInvokeApp(&apos;eventName&apos;, &#123;&apos;key&apos;:&apos;value&apos;&#125;);</div><div class="line">       this.setState(&#123;events&#125;);</div><div class="line">    &#125; catch(e) &#123;</div><div class="line">       this.setState(&#123;events:e.message&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="OC-调用-RN-方法"><a href="#OC-调用-RN-方法" class="headerlink" title="OC 调用 RN 方法"></a>OC 调用 RN 方法</h3><p>在 0.27 版本之前，调用方式是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@synthesize bridge = _bridge; </div><div class="line">- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody &#123; </div><div class="line">  [_bridge.eventDispatcher sendDeviceEventWithName:eventName body:eventBody];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在 xcode 里面一直提示这种方式可能要被取代：</p>
<p><code>&#39;sendDeviceEventWithName:body:&#39; is deprecated: Subclass RCTEventEmitter instead</code></p>
<p>现在可以这样写：修改我们刚才写的 <code>ReactUtil</code> 继承自 <code>RCTEventEmitter</code></p>
<p>然后要重写下面这个方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// TODO: 所有 app 通知 JS 的方法</div><div class="line">- (NSArray&lt;NSString *&gt; *)supportedEvents &#123;</div><div class="line">  return @[@&quot;appInvokeJs&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后实现你导出的所有方法，里面都使用 sendEventWithName 方法即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody &#123;</div><div class="line">    NSMutableDictionary *body = [[NSMutableDictionary alloc] init];</div><div class="line">    [body setObject:eventName forKey:@&quot;eventName&quot;];</div><div class="line">    [body setObject:eventBody forKey:@&quot;eventBody&quot;];</div><div class="line">    [self sendEventWithName:@&quot;appInvokeJs&quot; body:body];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后 JS 端调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import &#123;</div><div class="line">  ... </div><div class="line">  NativeModules,</div><div class="line">  NativeEventEmitter,  //导入 NativeEventEmitter 模块</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">  </div><div class="line">var ReactUtil = NativeModules.ReactUtil;</div><div class="line">const myNativeEvent = new NativeEventEmitter(ReactUtil);  //创建自定义事件接口</div><div class="line">  </div><div class="line">//在组件中使用</div><div class="line">componentWillMount() &#123;</div><div class="line">    this.listener = myNativeEvent.addListener(&apos;appInvokeJs&apos;, this.appInvokeJs.bind(this)); </div><div class="line">&#125;</div><div class="line">componentWillUnmount() &#123; </div><div class="line">    this.listener &amp;&amp; this.listener.remove();</div><div class="line">    this.listener = null; </div><div class="line">&#125; </div><div class="line"></div><div class="line">appInvokeJs(data) &#123;</div><div class="line">    //接受原生传过来的数据 </div><div class="line">    data = &#123;eventName:,eventBody:&#125;</div><div class="line">    if (data.eventName == &apos;EventName&apos;) &#123;</div><div class="line">       //</div><div class="line">    &#125; else &#123;</div><div class="line">        </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在项目中，通常我们会使用 RN 和原生混合开发的模式，所以这就涉及到一个重要的内容—— RN 和原生之间的数据交互。现在我们来一起看一下该怎样去实现数据交互。交互涉及到两部分内容:1. OC 打开 RN 页面；2. RN 调用 OC 方法；3. OC 调用 RN 方法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="React Native" scheme="http://mlijin9011.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative入门（2）—— 接入原生应用</title>
    <link href="http://mlijin9011.github.io/2016/04/24/ReactNative%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/"/>
    <id>http://mlijin9011.github.io/2016/04/24/ReactNative入门（2）/</id>
    <published>2016-04-24T02:18:09.000Z</published>
    <updated>2018-03-18T09:15:10.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-React-Native-依赖"><a href="#安装-React-Native-依赖" class="headerlink" title="安装 React Native 依赖"></a>安装 React Native 依赖</h2><p>在工程所在目录新建一个文件夹，作为 JS 文件目录，在这个文件夹下，安装 React 和 React Native 依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd x/xx/xxx #你的工程路径</div><div class="line">npm install react</div><div class="line">npm install react-native</div></pre></td></tr></table></figure>
<p>这时这个文件夹下会出现一个 node_modules 文件夹，react 依赖库就在这个文件夹下。</p>
<a id="more"></a>
<h2 id="CocoaPods安装"><a href="#CocoaPods安装" class="headerlink" title="CocoaPods安装"></a>CocoaPods安装</h2><p>在 Podfile 文件中增加以下的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># path 后面的内容修改为正确的路径，根据你的 node_modules 文件夹路径。</div><div class="line">pod &apos;React&apos;, :path =&gt; &apos;./node_modules/react-native&apos;, :subspecs =&gt; [</div><div class="line">  &apos;Core&apos;,</div><div class="line">  &apos;RCTImage&apos;,</div><div class="line">  &apos;RCTNetwork&apos;,</div><div class="line">  &apos;RCTText&apos;,</div><div class="line">  # 添加其他你想在工程中使用的依赖。</div><div class="line">]</div></pre></td></tr></table></figure>
<p>接着安装 pods：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod install</div></pre></td></tr></table></figure>
<h2 id="创建-React-Native-应用"><a href="#创建-React-Native-应用" class="headerlink" title="创建 React Native 应用"></a>创建 React Native 应用</h2><p>首先，创建一个文件夹来保存 React 代码，然后创建一个 js 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir ReactViews</div><div class="line">$ touch ReactViews/test.js</div></pre></td></tr></table></figure>
<p>然后写你的 js 代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Text,</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: &apos;red&apos;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">class SimpleApp extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;Text&gt;This is a simple react native application.&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;SimpleApp&apos;, () =&gt; SimpleApp);</div></pre></td></tr></table></figure>
<p>SimpleApp 是你的模块名，这个在后面会要用到。</p>
<p>接着，往应用里添加容器视图，来容纳 React Native 组件，它可以是你应用里任何的 UIView。</p>
<p>新建一个 ReactView 继承 UIView。</p>
<p>// ReactView.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@interface ReactView : UIView</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>往 ReactView 里添加 RCTRootView，来包含你的 React Native 应用。</p>
<p>// ReactView.m </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#import &quot;RCTRootView.h&quot;</div><div class="line"></div><div class="line">@implementation MZLReactView</div><div class="line"></div><div class="line">- (instancetype)initWithFrame:(CGRect)frame &#123;</div><div class="line">    self = [super initWithFrame:frame];</div><div class="line">    if (self) &#123;</div><div class="line">        self.backgroundColor = [UIColor grayColor];</div><div class="line">        </div><div class="line">        NSURL *jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/test.bundle?platform=ios&quot;];</div><div class="line">        // NSURL *jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;test&quot; withExtension:@&quot;jsbundle&quot;];</div><div class="line">    </div><div class="line">        RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:@&quot;SimpleComponent&quot; initialProperties:nil launchOptions:nil];</div><div class="line">        [self addSubview:rootView];</div><div class="line">        </div><div class="line">        rootView.frame = self.bounds;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>在 UIViewController 中使用这个 ReactView，这样就创建了一个 React Native 应用。</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在工程的根目录下，开启 React Native 开发服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(JS_DIR=`pwd`/ReactViews; cd node_modules/react-native; npm run start -- --root $JS_DIR)</div></pre></td></tr></table></figure>
<p>这条命令会启动一个 React Native 开发服务器，用于构建我们的 bundle 文件。–root 选项用来标明你的 React Native 应用所在的根目录。在我们这里是 ReactViews 目录，里面有一个test.js 文件。开发服务器启动后会打包出 test.bundle 文件来，并可以通过 <code>http://localhost:8081/test.bundle</code> 来访问。</p>
<p>现在编译和运行你的应用，就可以看到你的 React Native 应用在 ReactView 内运行。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在底层，当 RCTRootView 初始化完成以后，它会尝试从开发服务器下载、解析并运行打包后的脚本文件。所以你所要做的就是实现你自己的容器视图或者视图控制器，然后把 RCTRootView 作为子视图加入，接下来 RCTRootView 会搞定你的脚本文件然后渲染你的 React 组件。</p>
<p>你可以在这里获得一个样例应用的完整源代码。</p>
<p>参考博文：<a href="http://reactnative.cn/docs/0.31/integration-with-existing-apps.html#content" target="_blank" rel="external">React Native 中文网：嵌入到现有原生应用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-React-Native-依赖&quot;&gt;&lt;a href=&quot;#安装-React-Native-依赖&quot; class=&quot;headerlink&quot; title=&quot;安装 React Native 依赖&quot;&gt;&lt;/a&gt;安装 React Native 依赖&lt;/h2&gt;&lt;p&gt;在工程所在目录新建一个文件夹，作为 JS 文件目录，在这个文件夹下，安装 React 和 React Native 依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd x/xx/xxx #你的工程路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install react&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install react-native&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时这个文件夹下会出现一个 node_modules 文件夹，react 依赖库就在这个文件夹下。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="React Native" scheme="http://mlijin9011.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native入门（1）—— 组件及生命周期</title>
    <link href="http://mlijin9011.github.io/2016/04/10/ReactNative%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/"/>
    <id>http://mlijin9011.github.io/2016/04/10/ReactNative入门（1）/</id>
    <published>2016-04-10T03:54:34.000Z</published>
    <updated>2018-03-18T09:15:04.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一个 iOS 原生应用的开发者，刚开始接触 React Native，先来学习下 React Native 中的组件结构和生命周期，理解一个 React Native 组件如何进行展示，如何进行开发。</p>
<a id="more"></a>
<h2 id="组件的构成"><a href="#组件的构成" class="headerlink" title="组件的构成"></a>组件的构成</h2><p>在 React Native 中，所有展示的界面，都可以看做是一个组件（Component），每一个组件根据功能和逻辑的复杂程度，又都是由许多小的组件拼成，每个小的组件也都有自己对应的逻辑，不过他们都遵循同样的代码结构。</p>
<p>先来看一个完整的 js 文件中的代码，然后我们以它为例来分析其中的代码结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">class AwesomeProject extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;&#123;alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">          Welcome to React Native!</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          To get started, edit index.ios.js</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          Press Cmd+R to reload,&#123;&apos;\n&apos;&#125;</div><div class="line">          Cmd+D or shake for dev menu</div><div class="line">        &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: 20,</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    margin: 10,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    color: &apos;#333333&apos;,</div><div class="line">    marginBottom: 5,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;AwesomeProject&apos;, () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>
<p>这段代码中组件的代码结构：</p>
<h3 id="包和组件引用"><a href="#包和组件引用" class="headerlink" title="包和组件引用"></a>包和组件引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>
<p><code>&#39;use strict&#39;</code> 表示开启了 Strict Mode，Strict Mode 使 JavaScript 的错误处理可以有所提高，一些语言缺陷也可以避免。</p>
<p><code>import {} from &#39;&#39;</code> 表示将 react、react-native 包加载进来，{ } 中的内容是引用来自 React Native 官方的组件、API 以及第三方或开发者项目中构建的组件，形式为该组件或 API 的 React 类名。import 是 ES6 的语法，这个概念等同于 iOS 或者 Swift 中的 “链接库” 或者 “导入库”。</p>
<h3 id="组件类的声明"><a href="#组件类的声明" class="headerlink" title="组件类的声明"></a>组件类的声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class AwesomeProject extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      ...</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这部分用于构造组件的状态和具体的展示结构，class 是在 ES6 中被引入的，利用 <code>class xxx extends Component {...}</code> 来实例化一个 React Native 组件对象，{ } 中的内容会包含组件的几个重要的生命周期（见下文），这部分是一个组件必不可少的地方，没有这些内容，就无法构成一个组件。</p>
<h3 id="组件样式的声明"><a href="#组件样式的声明" class="headerlink" title="组件样式的声明"></a>组件样式的声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: 20,</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    margin: 10,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    color: &apos;#333333&apos;,</div><div class="line">    marginBottom: 5,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用 <code>StyleSheet.create({...})</code> 来实例化 React Native 样式对象，{ } 中的内容为 JSON 形式的 React Native 样式，来源于 CSS3，这些声明的样式可以在上面构建组件时（JSX 代码中）使用。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppRegistry.registerComponent(&apos;AwesomeProject&apos;, () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>
<p>AppRegistry 定义了 App 的入口，并提供了根组件。这部分只有在作为入口的 js 文件中才会有。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module.exports = HelloWorld;</div></pre></td></tr></table></figure>
<p>这里导出了 HelloWorld 类，可以在外部 js 文件中引入 HelloWorld 组件。这部分只有在非入口js 文件中才会有。</p>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>一个 React Native 组件的生命周期分为实例化、存在期和销毁期三个阶段，如下图。</p>
<p>第一阶段：实例化期，是组件第一次绘制阶段，如图中的上面的虚线框内，在这个阶段完成了组件的加载和初始化；</p>
<p>第二阶段：存在期，是组件正在运行和交互阶段，如图中的左下的虚线框内，在这个阶段组件可以处理用户交互，或者接收事件更新界面；</p>
<p>第三阶段：销毁期，是组件被卸载消亡的阶段，如图中的右下的虚线框内，在这个阶段做一些组件的清理工作。</p>
<p><img src="/2016/04/10/ReactNative入门（1）/component-lifecycle.jpg" alt="logo"></p>
<p>下面具体分析组件生命周期的各个阶段：</p>
<h3 id="实例化阶段"><a href="#实例化阶段" class="headerlink" title="实例化阶段"></a>实例化阶段</h3><p>实例化期分为5个阶段，每个阶段以一个函数来进行控制：</p>
<p><strong>getDefaultProps</strong></p>
<p>在组件创建的时候，会先调用 <code>getDefaultProps()</code>。由于这个函数在整个生命周期中只会调用一次，所以通常在这里会初始化组件的一些默认属性，将固定的内容放在这个过程中进行初始化和赋值。</p>
<p><strong>getInitialState</strong></p>
<p>在组件被创建后并加载的时候，会先调用 <code>getInitialState()</code> 来初始化组件的状态。该函数在整个生命周期中只会调用一次。</p>
<p><strong>componentWillMount</strong></p>
<p>在组件初始化后准备加载组件的时候，会先调用 <code>componentWillMount()</code>，在第一次绘制 <code>render()</code> 之前调用，也是渲染一个组件前最后一次修改 state 的机会。这个函数在整个生命周期中也只被调用一次，可以在这里做一些业务初始化操作，也可以设置组件状态。</p>
<p><strong>render</strong></p>
<p>这是一个组件必须有的方法，形式为一个有返回值的函数，会返回一段 JSX 或其他 React 组件来构成 DOM，表示该组件的结构和布局，和 Android 的 XML 布局类似。在 <code>render()</code> 函数中，只能通过 this.state 和 this.props 来访问在之前函数中初始化的数据值。</p>
<p><strong>componentDidMount</strong></p>
<p>在组件第一次绘制之后，会调用 <code>componentDidMount()</code>，表示组件已经加载完成，这个函数在整个生命周期中也只被调用一次。</p>
<p>从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout、setInterval，或者发起网络请求，放在这个函数里进行，来保证不会出现UI上的错误。这个函数之后，就进入了稳定运行状态，等待事件触发。</p>
<blockquote>
<p>注：先调用子组件的 componentDidMount()，然后才调用父组件的。</p>
</blockquote>
<h3 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h3><p>运行期主要是用来处理与用户的交互：</p>
<p><strong>componentWillReceiveProps</strong></p>
<p>如果父元素对组件的属性（props）进行了修改，组件收到新的属性时，就会调用 <code>componentWillReceiveProps(object nextProps)</code>，参数 nextProps 是即将被设置的属性，可以通过 <code>this.props</code> 来获取旧的属性。</p>
<p>在这个回调函数里面，你可以根据属性的变化，通过调用 <code>this.setState()</code> 来更新组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps: function(nextProps) &#123;  </div><div class="line">  this.setState(&#123;</div><div class="line">    likesIncreasing: nextProps.likeCount &gt; this.props.likeCount</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>shouldComponentUpdate</strong></p>
<p>当组件接收到新的属性或者状态改变时，都会触发调用 <code>boolean shouldComponentUpdate(object nextProps, object nextState)</code>，参数 nextProps 是即将被设置的属性，同 <code>componentWillReceiveProps(...)</code> 一样，nextState 是即将更新的状态值。这个函数返回一个布尔值，来决定是否需要更新组件进行渲染，返回 true 表示需要更新，继续走后面的更新流程。否则不更新，直接进入等待状态。</p>
<p><strong>componentWillUpdate</strong></p>
<p>如果组件状态或者属性改变，并且上面的 <code>shouldComponentUpdate(...)</code> 返回为 true 时，会在开始渲染组件之前调用 <code>componentWillUpdate(object nextProps, object nextState)</code>，参数同 <code>shouldComponentUpdate(...)</code> 。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。接着就会调用 render() 来更新界面了。</p>
<p><strong>componentDidUpdate</strong></p>
<p>调用了 <code>render()</code> 更新完成界面之后，会调用 <code>componentDidUpdate(object prevProps, object prevState)</code>，此函数的输入参数变成了 prevProps 和 prevState，因为到这里已经完成了属性和状态的更新了。</p>
<h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h3><p><strong>componentWillUnmount</strong></p>
<p>当组件要被从界面上移除的时候，就会调用 <code>componentWillUnmount()</code>，在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求、点击事件Listener等。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组件的生命周期分成三个状态：</p>
<pre><code>Mounting：  已插入真实 DOM
Updating：  正在被重新渲染
Unmounting：已移出真实 DOM
</code></pre><p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数：</p>
<pre><code>componentWillMount()
componentDidMount()
componentWillUpdate(object nextProps, object nextState)
componentDidUpdate(object prevProps, object prevState)
componentWillUnmount()
</code></pre><p>此外，React 还提供两种特殊状态的处理函数：</p>
<pre><code>componentWillReceiveProps(object nextProps)：组件收到新的参数时调用
shouldComponentUpdate(object nextProps, object nextState)：判断是否重新渲染时调用
</code></pre><p>两个初始化函数：</p>
<pre><code>getDefaultProps()：进行初始化和赋值
getInitialState()：初始化组件的状态
</code></pre><p>渲染函数：</p>
<pre><code>render()
</code></pre><p>参考博文：<a href="http://www.race604.com/react-native-component-lifecycle/" target="_blank" rel="external">React Native 中组件的生命周期</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作为一个 iOS 原生应用的开发者，刚开始接触 React Native，先来学习下 React Native 中的组件结构和生命周期，理解一个 React Native 组件如何进行展示，如何进行开发。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="http://mlijin9011.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>iOS9下Safari和app间cookie互通</title>
    <link href="http://mlijin9011.github.io/2016/03/13/iOS9%E4%B8%8BSafari%E5%92%8Capp%E9%97%B4cookie%E4%BA%92%E9%80%9A/"/>
    <id>http://mlijin9011.github.io/2016/03/13/iOS9下Safari和app间cookie互通/</id>
    <published>2016-03-13T08:10:02.000Z</published>
    <updated>2018-03-18T09:12:26.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在项目有一个需求，比如某新闻业务，当用户还没有下载 app 时，在手机上的 Safari 中浏览了一篇新闻，然后在浏览器中点击“在 app 中查看”，会自动跳转到 AppStore 中下载 app，此时用户可能希望在下载完 app 后能够继续刚才在 Safari 中的浏览内容和一些用户行为。但是用户被引导下载后，并不会希望需要重新回到浏览器，重新再由浏览器发起一个拉起 app 的操作来实现在 app 中的继续浏览，而是更希望在下载后，直接点击 AppStore 中的打开，或者手动打开 app 后，就能够继续刚才的浏览，这就需要在 Safari 和 app 间形成一种数据的互通。</p>
<a id="more"></a>
<p>大概有这么两种方案可以实现这个功能：</p>
<p>一是当用户在 Safari 中浏览新闻内容时，上传用户行为和用户数据到我们服务器中，以一个唯一标识来标识这个设备的数据，这个数据会有一定的时效性，在这个时效性内下载并打开 app，我们会当做用户是希望能够继续延续刚才的浏览。当用户下载 app 打开后，用唯一标识从服务器请求用户行为数据，通过这个数据来打开相应的浏览内容，这样就实现了上面所说的功能。</p>
<p>二是当用户在 Safari 中浏览新闻内容时，保存用户行为数据到 Safari 中的 cookie 里，当用户下载并打开 app 后，我们去读取 Safari 中的 cookie，通过 cookie 内容来打开相应的浏览内容。</p>
<p>第一种方式，能够唯一标识设备的这个值要具备苛刻的条件，想找到其实很不容易，而且可能还会有一定的误伤几率，所以我们选择了第二种方式。</p>
<h2 id="Cookie-互通"><a href="#Cookie-互通" class="headerlink" title="Cookie 互通"></a>Cookie 互通</h2><p>iOS 系统中每个 app 都有自己的沙盒，无法跨越沙盒去访问数据，但是在 iOS9 以后，苹果提供了一个 API：<code>APISFSafariViewController</code>，它跟系统的 Safari 同属于一个 app，所以通过它可以读到 Safari 中的 cookie，那么我们可以在我们的 app 中打开这个 <code>APISFSafariViewController</code>，这样就可以拿到系统 Safari 中保存的 cookie 数据了。但是这个 cookie 内容只是在 <code>APISFSafariViewController</code> 中打开的 wap 页面可以读到，在 app 内是读不到的，可以通过 URL Scheme（OpenUrl）的方式，把这个 cookie 内容传递到 app 中，这样就可以实现我们上面的需求了。</p>
<p>具体的实现思路如下：</p>
<p>用户通过 Safari 浏览 wap1 页面，wap1 页面把用户行为数据写到 cookie 中，当用户通过引导下载 app 后，第一次打开 app 时，在 app 内打开 <code>APISFSafariViewController</code>，打开一个 wap2 页面，在这个 wap2 页面先取到刚才 wap1 页面保存的 cookie 数据，然后在 wap2 中通过 openUrl 的方式，把这个 cookie 数据传递到 app 中，然后通过这个 cookie 数据来实现延续阅读的功能。</p>
<p>在这里，wap1 页面是我们正常的一个 html 页面，里面只是加一个写用户行为数据到 Safari 中的cookie 的操作，这个 cookie 的域采用我们约定好的值，即只有在这个域下的 html 才能读取到这个 cookie。wap2 页面是一个专门用来静默的获取 wap1 的 cookie 值的页面，并且可以静默的通过 openUrl 的方式把 cookie 回传给 app。</p>
<p>可能你会觉得在程序启动后，弹出一个 Safari 页面有点不妥，那么我们可以把这个 <code>APISFSafariViewController</code> 设置为纯透明，这样用户就感觉不到了，然后这个纯透明的 Safari 再通过 openUrl 的方式呼起我们要延续阅读的页面，如果不需要延续阅读，那么就设定一个时间值，在这个时间值后，把这个纯透明的 Safari 隐藏。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前提：safari中打开h5页面，在app中还原</p>
<p>html1 页面写 cookie 到 safari，app启动后打开一个透明的safari页面，这个safari页面请求另外一个与 html1 同域名的 html2,<br>html2 读取到 html1 存的 cookie 后，通过 scheme 的方式，在app中打开相对应的页面，完成场景还原</p>
<h2 id="后期补充"><a href="#后期补充" class="headerlink" title="后期补充"></a>后期补充</h2><p>上述使用 <code>APISFSafariViewController</code> 这种获取 cookie 的方式，SafariViewController 始终是隐藏的，而 iOS 10 以后这是苹果命令禁止的：</p>
<blockquote>
<p>SafariViewContoller must be used to visibly present information to users; the controller may not be hidden or obscured by other views or layers. Additionally, an app may not use SafariViewController to track users without their knowledge and consent.</p>
</blockquote>
<p>所以这种方式，目前仅能支持 iOS 9 ，iOS 10 以上需要再找别的途径。</p>
<p>参考博文：<a href="http://www.jianshu.com/p/1a46187141fc" target="_blank" rel="external">iOS app与浏览器 跨域互通</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现在项目有一个需求，比如某新闻业务，当用户还没有下载 app 时，在手机上的 Safari 中浏览了一篇新闻，然后在浏览器中点击“在 app 中查看”，会自动跳转到 AppStore 中下载 app，此时用户可能希望在下载完 app 后能够继续刚才在 Safari 中的浏览内容和一些用户行为。但是用户被引导下载后，并不会希望需要重新回到浏览器，重新再由浏览器发起一个拉起 app 的操作来实现在 app 中的继续浏览，而是更希望在下载后，直接点击 AppStore 中的打开，或者手动打开 app 后，就能够继续刚才的浏览，这就需要在 Safari 和 app 间形成一种数据的互通。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用oh-my-zsh和iTerm2</title>
    <link href="http://mlijin9011.github.io/2016/01/28/Mac%E4%BD%BF%E7%94%A8oh-my-zsh%E5%92%8CiTerm2/"/>
    <id>http://mlijin9011.github.io/2016/01/28/Mac使用oh-my-zsh和iTerm2/</id>
    <published>2016-01-28T04:45:27.000Z</published>
    <updated>2018-03-18T09:18:45.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Shell 是 Linux/Unix 的一个外壳，它负责外界与 Linux 内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。</p>
<p>Mac 的最大优势是 GUI 和命令行的完美结合，本文介绍如何使用 iTerm2 和 oh my zsh 打造 Mac 最强终端。</p>
<a id="more"></a>
<h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><p>iTerm2 是一个终端模拟器，官方网站：<a href="http://www.iterm2.com/" target="_blank" rel="external">http://www.iterm2.com/</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接去 <a href="http://www.iterm2.com/" target="_blank" rel="external">官网</a> 下载就可以</p>
<h3 id="更改配色"><a href="#更改配色" class="headerlink" title="更改配色"></a>更改配色</h3><p>iTerm2 比较好看的配色方案当属 <code>Solarized</code> ，直接在 <code>iTerm2 - Preferences - Profiles - Colors</code> 里面配置就好了，我使用的是 Solarized-Dark。</p>
<h3 id="更改-powerline-字体"><a href="#更改-powerline-字体" class="headerlink" title="更改 powerline 字体"></a>更改 powerline 字体</h3><p>1.安装 Powerline</p>
<p>下载 Powerline 工程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/powerline/fonts.git --depth=1</div></pre></td></tr></table></figure>
<p>将工程下载下来后 cd 到 install.sh 文件所在目录，然后执行 <code>./install.sh</code> 指令安装所有 Powerline 字体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd fonts</div><div class="line">$ ./install.sh</div></pre></td></tr></table></figure>
<p>安装完成后，删除下载的工程，也可以不清，主要是为了保持电脑空间干净整洁</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ..</div><div class="line">$ rm -rf fonts</div></pre></td></tr></table></figure>
<p>2.设置 iTerm 2 的字体</p>
<p>安装完字体库之后，在 <code>iTerm2 - Preferences - Profiles - Text</code> 选项卡中里的字体设置成 Powerline 的字体，我这里设置的字体是 <code>Meslo LG M DZ for Powerline</code>。</p>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh my zsh"></a>oh my zsh</h2><p>Mac 终端默认使用的 Shell 是 bash，设置当前用户使用 zsh：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh -s /bin/zsh</div></pre></td></tr></table></figure>
<p>执行命令后，根据提示输入当前用户的密码就可以了。</p>
<p>如果以后想恢复为 bash，可执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh -s /bin/bash</div></pre></td></tr></table></figure>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>执行下面的两个命令可以自动安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</div></pre></td></tr></table></figure>
<p>安装完后会输出这样的结果：</p>
<p><img src="/2016/01/28/Mac使用oh-my-zsh和iTerm2/oh-my-zsh.png" alt="image"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>zsh 的配置主要集中在用户目录的 .zshrc 里，用 vim 或你喜欢的其他编辑器打开.zshrc，在最下面会发现这么一行字：</p>
<pre><code># Customize to your needs…
</code></pre><p>可以在此处定义自己的环境变量和别名，当然，oh my zsh 在安装时已经自动读取当前的环境变量并进行了设置，你可以继续追加其他环境变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">alias zshconfig=&quot;sublime ~/.zshrc&quot;</div><div class="line">alias ohmyzsh=&quot;sublime ~/.oh-my-zsh&quot;</div><div class="line">alias cls=&apos;clear&apos;</div><div class="line">alias h=&apos;history&apos;</div><div class="line">alias ll=&apos;ls -l&apos;</div><div class="line">alias la=&apos;ls -a&apos;</div><div class="line">alias vi=&apos;vim&apos;</div><div class="line">alias sublime=&quot;open -a /Applications/Sublime\ Text\.app&quot;</div><div class="line">alias javac=&quot;javac -J-Dfile.encoding=utf8&quot;</div><div class="line">alias grep=&quot;grep --color=auto&quot;</div><div class="line">alias -s html=sublime # 在命令行直接输入后缀为 html 的文件名，会在 sublime  中打开</div><div class="line">alias -s rb=sublime   # 在命令行直接输入 ruby 文件，会在 sublime 中打开</div><div class="line">alias -s py=sublime   # 在命令行直接输入 python 文件，会用 sublime 中打开，以下类似</div><div class="line">alias -s js=sublime</div><div class="line">alias -s c=sublime</div><div class="line">alias -s java=sublime</div><div class="line">alias -s txt=sublime</div><div class="line">alias -s gz=&apos;tar -xzvf&apos;</div><div class="line">alias -s tgz=&apos;tar -xzvf&apos;</div><div class="line">alias -s zip=&apos;unzip&apos;</div><div class="line">alias -s bz2=&apos;tar -xjvf&apos;</div></pre></td></tr></table></figure>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>为了美观，可以设置主题，在 .zshrc 里找到 ZSH_THEME，就可以设置主题了，默认主题是：ZSH_THEME=”robbyrussell”。</p>
<p>oh my zsh 提供了数十种主题，相关文件在~/.oh-my-zsh/themes 目录下，你可以随意选择，也可以自定义主题。</p>
<p>复制一个主题文件作为自定义主题 <code>mzl-powerline.zsh-theme</code>，修改里面的内容为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">if [ &quot;$POWERLINE_DATE_FORMAT&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_DATE_FORMAT=%D&#123;%Y-%m-%d&#125;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_RIGHT_B&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_RIGHT_B=%D&#123;%H:%M:%S&#125;</div><div class="line">elif [ &quot;$POWERLINE_RIGHT_B&quot; = &quot;none&quot; ]; then</div><div class="line">  POWERLINE_RIGHT_B=&quot;&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;mixed&quot; ]; then</div><div class="line">  POWERLINE_RIGHT_A=%(?.&quot;$POWERLINE_DATE_FORMAT&quot;.%F&#123;red&#125;✘ %?)</div><div class="line">elif [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;exit-status&quot; ]; then</div><div class="line">  POWERLINE_RIGHT_A=%(?.%F&#123;green&#125;✔ %?.%F&#123;red&#125;✘ %?)</div><div class="line">elif [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;date&quot; ]; then</div><div class="line">  POWERLINE_RIGHT_A=&quot;$POWERLINE_DATE_FORMAT&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_HIDE_USER_NAME&quot; = &quot;&quot; ] &amp;&amp; [ &quot;$POWERLINE_HIDE_HOST_NAME&quot; = &quot;&quot; ]; then</div><div class="line">    POWERLINE_USER_NAME=&quot;%n@&quot;&apos;%M&apos;</div><div class="line">elif [ &quot;$POWERLINE_HIDE_USER_NAME&quot; != &quot;&quot; ] &amp;&amp; [ &quot;$POWERLINE_HIDE_HOST_NAME&quot; = &quot;&quot; ]; then</div><div class="line">    POWERLINE_USER_NAME=&quot;@%M&quot;</div><div class="line">elif [ &quot;$POWERLINE_HIDE_USER_NAME&quot; = &quot;&quot; ] &amp;&amp; [ &quot;$POWERLINE_HIDE_HOST_NAME&quot; != &quot;&quot; ]; then</div><div class="line">    POWERLINE_USER_NAME=&quot;%n&quot;</div><div class="line">else</div><div class="line">    POWERLINE_USER_NAME=&quot;λ&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">POWERLINE_CURRENT_PATH=&quot;%d&quot;</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_FULL_CURRENT_PATH&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_CURRENT_PATH=&quot;%1~&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_GIT_CLEAN&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_GIT_CLEAN=&quot;✔&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_GIT_DIRTY&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_GIT_DIRTY=&quot;✘&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_GIT_ADDED&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_GIT_ADDED=&quot;%F&#123;green&#125;✚%F&#123;black&#125;&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_GIT_MODIFIED&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_GIT_MODIFIED=&quot;%F&#123;blue&#125;✹%F&#123;black&#125;&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_GIT_DELETED&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_GIT_DELETED=&quot;%F&#123;red&#125;✖%F&#123;black&#125;&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_GIT_UNTRACKED&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_GIT_UNTRACKED=&quot;%F&#123;yellow&#125;✭%F&#123;black&#125;&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_GIT_RENAMED&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_GIT_RENAMED=&quot;➜&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_GIT_UNMERGED&quot; = &quot;&quot; ]; then</div><div class="line">  POWERLINE_GIT_UNMERGED=&quot;═&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">ZSH_THEME_GIT_PROMPT_PREFIX=&quot; \ue0a0 &quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_DIRTY=&quot; $POWERLINE_GIT_DIRTY&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_CLEAN=&quot; $POWERLINE_GIT_CLEAN&quot;</div><div class="line"></div><div class="line">ZSH_THEME_GIT_PROMPT_ADDED=&quot; $POWERLINE_GIT_ADDED&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_MODIFIED=&quot; $POWERLINE_GIT_MODIFIED&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_DELETED=&quot; $POWERLINE_GIT_DELETED&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_UNTRACKED=&quot; $POWERLINE_GIT_UNTRACKED&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_RENAMED=&quot; $POWERLINE_GIT_RENAMED&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_UNMERGED=&quot; $POWERLINE_GIT_UNMERGED&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_AHEAD=&quot; ⬆&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_BEHIND=&quot; ⬇&quot;</div><div class="line">ZSH_THEME_GIT_PROMPT_DIVERGED=&quot; ⬍&quot;</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_SHOW_GIT_ON_RIGHT&quot; = &quot;&quot; ]; then</div><div class="line">    if [ &quot;$POWERLINE_HIDE_GIT_PROMPT_STATUS&quot; = &quot;&quot; ]; then</div><div class="line">        POWERLINE_GIT_INFO_LEFT=&quot; %F&#123;blue&#125;%K&#123;white&#125;&quot;$&apos;\ue0b0&apos;&quot;%F&#123;white&#125;%F&#123;black&#125;%K&#123;white&#125;&quot;$&apos;$(git_prompt_info)$(git_prompt_status)%F&#123;white&#125;&apos;</div><div class="line">    else</div><div class="line">        POWERLINE_GIT_INFO_LEFT=&quot; %F&#123;blue&#125;%K&#123;white&#125;&quot;$&apos;\ue0b0&apos;&quot;%F&#123;white&#125;%F&#123;black&#125;%K&#123;white&#125;&quot;$&apos;$(git_prompt_info)%F&#123;white&#125;&apos;</div><div class="line">    fi</div><div class="line">    POWERLINE_GIT_INFO_RIGHT=&quot;&quot;</div><div class="line">else</div><div class="line">    POWERLINE_GIT_INFO_LEFT=&quot;&quot;</div><div class="line">    POWERLINE_GIT_INFO_RIGHT=&quot;%F&#123;white&#125;&quot;$&apos;\ue0b2&apos;&quot;%F&#123;black&#125;%K&#123;white&#125;&quot;$&apos;$(git_prompt_info)&apos;&quot; %K&#123;white&#125;&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">if [ $(id -u) -eq 0 ]; then</div><div class="line">    POWERLINE_SEC1_BG=%K&#123;red&#125;</div><div class="line">    POWERLINE_SEC1_FG=%F&#123;red&#125;</div><div class="line">else</div><div class="line">    POWERLINE_SEC1_BG=%K&#123;green&#125;</div><div class="line">    POWERLINE_SEC1_FG=%F&#123;green&#125;</div><div class="line">fi</div><div class="line">POWERLINE_SEC1_TXT=%F&#123;black&#125;</div><div class="line">if [ &quot;$POWERLINE_DETECT_SSH&quot; != &quot;&quot; ]; then</div><div class="line">  if [ -n &quot;$SSH_CLIENT&quot; ]; then</div><div class="line">    POWERLINE_SEC1_BG=%K&#123;red&#125;</div><div class="line">    POWERLINE_SEC1_FG=%F&#123;red&#125;</div><div class="line">    POWERLINE_SEC1_TXT=%F&#123;white&#125;</div><div class="line">  fi</div><div class="line">fi</div><div class="line">PROMPT=&quot;$POWERLINE_SEC1_BG$POWERLINE_SEC1_TXT $POWERLINE_USER_NAME %k%f$POWERLINE_SEC1_FG%K&#123;blue&#125;&quot;$&apos;\ue0b0&apos;&quot;%k%f%F&#123;white&#125;%K&#123;blue&#125; &quot;$POWERLINE_CURRENT_PATH&quot;%F&#123;blue&#125;&quot;$POWERLINE_GIT_INFO_LEFT&quot; %k&quot;$&apos;\ue0b0&apos;&quot;%f &quot;</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_NO_BLANK_LINE&quot; = &quot;&quot; ]; then</div><div class="line">    PROMPT=&quot;</div><div class="line">&quot;$PROMPT</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$POWERLINE_DISABLE_RPROMPT&quot; = &quot;&quot; ]; then</div><div class="line">    if [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;&quot; ]; then</div><div class="line">        RPROMPT=&quot;$POWERLINE_GIT_INFO_RIGHT%F&#123;white&#125;&quot;$&apos;\ue0b2&apos;&quot;%k%F&#123;black&#125;%K&#123;white&#125; $POWERLINE_RIGHT_B %f%k&quot;</div><div class="line">    elif [ &quot;$POWERLINE_RIGHT_B&quot; = &quot;&quot; ]; then</div><div class="line">        RPROMPT=&quot;$POWERLINE_GIT_INFO_RIGHT%F&#123;white&#125;&quot;$&apos;\ue0b2&apos;&quot;%k%F&#123;240&#125;%K&#123;white&#125; $POWERLINE_RIGHT_A %f%k&quot;</div><div class="line">    else</div><div class="line">        RPROMPT=&quot;$POWERLINE_GIT_INFO_RIGHT%F&#123;white&#125;&quot;$&apos;\ue0b2&apos;&quot;%k%F&#123;black&#125;%K&#123;white&#125; $POWERLINE_RIGHT_B %f%F&#123;240&#125;&quot;$&apos;\ue0b2&apos;&quot;%f%k%K&#123;240&#125;%F&#123;255&#125; $POWERLINE_RIGHT_A %f%k&quot;</div><div class="line">    fi</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>然后修改 .zshrc 文件，修改 <code>ZSH_THEME=”mzl-powerline”</code>，然后在后面添加主题配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">POWERLINE_HIDE_USER_NAME=&quot;true&quot;</div><div class="line">POWERLINE_HIDE_HOST_NAME=&quot;true&quot;</div><div class="line">POWERLINE_DETECT_SSH=&quot;true&quot;</div><div class="line">POWERLINE_GIT_CLEAN=&quot;✔&quot;</div><div class="line">POWERLINE_GIT_DIRTY=&quot;✘&quot;</div><div class="line">POWERLINE_GIT_ADDED=&quot;%F&#123;green&#125;✚%F&#123;black&#125;&quot;</div><div class="line">POWERLINE_GIT_MODIFIED=&quot;%F&#123;blue&#125;✹%F&#123;black&#125;&quot;</div><div class="line">POWERLINE_GIT_DELETED=&quot;%F&#123;red&#125;✖%F&#123;black&#125;&quot;</div><div class="line">POWERLINE_GIT_UNTRACKED=&quot;%F&#123;yellow&#125;✭%F&#123;black&#125;&quot;</div><div class="line">POWERLINE_GIT_RENAMED=&quot;➜&quot;</div><div class="line">POWERLINE_GIT_UNMERGED=&quot;═&quot;</div></pre></td></tr></table></figure>
<p>设置完后效果如图：<br><img src="/2016/01/28/Mac使用oh-my-zsh和iTerm2/iterm2.png" alt="image"></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1.<a href="https://coderwall.com/p/sun7za/mac-os-x-oh-my-zsh-theme-on-iterm2" target="_blank" rel="external">Mac OS X &amp; Oh My ZSH Theme on iTerm2</a><br>2.<a href="http://macshuo.com/?p=676" target="_blank" rel="external">终极 Shell</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Shell 是 Linux/Unix 的一个外壳，它负责外界与 Linux 内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。&lt;/p&gt;
&lt;p&gt;Mac 的最大优势是 GUI 和命令行的完美结合，本文介绍如何使用 iTerm2 和 oh my zsh 打造 Mac 最强终端。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac" scheme="http://mlijin9011.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>日常问题及解决方法</title>
    <link href="http://mlijin9011.github.io/2015/09/29/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://mlijin9011.github.io/2015/09/29/日常问题及解决方法/</id>
    <published>2015-09-29T12:02:38.000Z</published>
    <updated>2018-03-28T15:07:57.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文中记录了遇到的一些错误或问题的一些命令与解决方案的总结，持续更新。</p>
<a id="more"></a>
<h2 id="日常问题汇总"><a href="#日常问题汇总" class="headerlink" title="日常问题汇总"></a>日常问题汇总</h2><ul>
<li>使用 ssh 方式无法克隆 git：</li>
</ul>
<p>在 clone 前执行一下这个命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<ul>
<li>报错：打开软件时，报文件损坏的问题：</li>
</ul>
<p>执行以下命令，回车之后输入开机密码即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo spctl --master-disable</div></pre></td></tr></table></figure>
<ul>
<li>Finder中显示隐藏文件：</li>
</ul>
<p>打开，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</div></pre></td></tr></table></figure>
<p>关闭，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool false</div></pre></td></tr></table></figure>
<ul>
<li>报错：Fastlane：Command timed out after 10 seconds on try 1 of 4, trying again…</li>
</ul>
<p>在执行 fastlane 打包前，执行一下这个命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ FASTLANE_XCODE_LIST_TIMEOUT = 120</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本文中记录了遇到的一些错误或问题的一些命令与解决方案的总结，持续更新。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="总结" scheme="http://mlijin9011.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Runtime - 消息机制</title>
    <link href="http://mlijin9011.github.io/2015/08/15/Objective-C-Runtime-3/"/>
    <id>http://mlijin9011.github.io/2015/08/15/Objective-C-Runtime-3/</id>
    <published>2015-08-15T04:22:48.000Z</published>
    <updated>2018-04-06T07:44:35.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Objective-C 最大的特色是承自 Smalltalk 的消息传递模型，Objective-C 里，对象互相调用方法，就是对象之间互相传递消息。</p>
<p>C++ 里类别与方法的关系严格清楚，一个方法必定属于一个类别，而且在编译时（compile time）就已经紧密绑定，不可能调用一个类别里不存在的方法。但在Objective-C，类别与消息的关系比较松散，调用方法视为对对象发送消息，所有方法都被视为对消息的回应。所有消息处理直到运行时（runtime）才会动态决定，并交由类别自行决定如何处理收到的消息。也就是说，一个类别不保证一定会回应收到的消息，如果类别收到了一个无法处理的消息，程序只会抛出异常，不会出错或崩溃。</p>
<a id="more"></a>
<h1 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h1><p>调用编译阶段并不会去绑定执行的函数，只有在运行的时候才回去对象中查找方法，接受方法的类中有个方法列表，如果能找到方法就调用，找不到的话就回去父类中查找。</p>
<h2 id="消息相关的数据结构"><a href="#消息相关的数据结构" class="headerlink" title="消息相关的数据结构"></a>消息相关的数据结构</h2><p>在第一篇讲 Runtime 基本数据结构的时候，我们了解了与方法相关的数据结构，再来回忆一下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// An opaque type that represents a method in a class definition.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_method *Method;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_method &#123;</div><div class="line">    SEL method_name                                          OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">char</span> *method_types                                       OBJC2_UNAVAILABLE;</div><div class="line">    IMP method_imp                                           OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// An opaque type that represents a method selector.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_selector     *SEL;</div><div class="line"></div><div class="line"><span class="comment">/// A pointer to the function of a method implementation. </span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">id</span> <span class="params">(*IMP)</span><span class="params">(id, SEL, ...)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="objc-msgSend"><a href="#objc-msgSend" class="headerlink" title="objc_msgSend"></a>objc_msgSend</h2><p>所有的 Objective-C 方法调用都是基于 Objective-C Runtime 进行的。 比如最简单的方法调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[object hello];</div></pre></td></tr></table></figure>
<p>从 Objective-C Runtime 的角度来说，这个代码实际上是在发送一个消息，编译器实际上会将它转换成这样一个函数调用：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_msgSend(object, @selector(hello))</div></pre></td></tr></table></figure>
<p>我们在 Objective-C 中所有通过一对方括号所进行的方法调用，其实都是通过 Objective-C Runtime 的 <code>objc_msgSend</code> 函数发送的一个消息传递。</p>
<p>Objective-C 中 <code>objc_msgSend</code> 的实现并没有开源，它只存在于 <code>message.h</code> 这个头文件中。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * Sends a message with a simple return value to an instance of a class.</div><div class="line"> * </div><div class="line"> * @param self A pointer to the instance of the class that is to receive the message.</div><div class="line"> * @param op The selector of the method that handles the message.</div><div class="line"> * @param ... </div><div class="line"> *   A variable argument list containing the arguments to the method.</div><div class="line"> * </div><div class="line"> * @return The return value of the method.</div><div class="line"> * </div><div class="line"> * @note When it encounters a method call, the compiler generates a call to one of the</div><div class="line"> *  functions \c objc_msgSend, \c objc_msgSend_stret, \c objc_msgSendSuper, or \c objc_msgSendSuper_stret.</div><div class="line"> *  Messages sent to an object’s superclass (using the \c super keyword) are sent using \c objc_msgSendSuper; </div><div class="line"> *  other messages are sent using \c objc_msgSend. Methods that have data structures as return values</div><div class="line"> *  are sent using \c objc_msgSendSuper_stret and \c objc_msgSend_stret.</div><div class="line"> */</div><div class="line"><span class="function">OBJC_EXPORT id <span class="title">objc_msgSend</span><span class="params">(id self, SEL op, ...)</span></span></div><div class="line">    __<span class="title">OSX_AVAILABLE_STARTING</span><span class="params">(<span class="number">__</span>MAC_10_0, <span class="number">__</span>IPHONE_2_0)</span>;</div></pre></td></tr></table></figure>
<p>在这个头文件的注释中对消息发送的一系列方法解释得非常清楚：<br>当编译器遇到一个方法调用时，它会将方法的调用翻译成以下函数中的一个 <code>objc_msgSend</code>、<code>objc_msgSend_stret</code>、<code>objc_msgSendSuper</code> 和 <code>objc_msgSendSuper_stret</code>。 发送给对象的父类的消息会使用 <code>objc_msgSendSuper</code>，有数据结构作为返回值的方法会使用 <code>objc_msgSendSuper_stret</code> 或 <code>objc_msgSend_stret</code>，其它的消息都是使用 <code>objc_msgSend</code> 发送的。</p>
<p>对 <code>objc_msgSend</code> 解析总共分两个步骤，我们会向 <code>CustomObject</code> 的实例发送两次 <code>hello</code> 消息，分别模拟无缓存和有缓存两种情况下的调用栈。</p>
<h3 id="无缓存"><a href="#无缓存" class="headerlink" title="无缓存"></a>无缓存</h3><p><code>objc_msgSend</code> 的调用栈，可以通过这个<a href="https://www.youtube.com/watch?v=bCdjdI4VhwQ&amp;feature=youtu.be" target="_blank" rel="external">视频</a>里打断点查看。我们来看下，在调用 <code>[object hello]</code> 方法时的调用栈（<code>cls</code>, <code>sel</code> 值分别是 <code>CustomObject</code>, <code>&quot;hello&quot;</code>，说明这就是当调用 <code>hello</code> 方法时执行的函数）：</p>
<p><img src="/2015/08/15/Objective-C-Runtime-3/lookUpImpOrForward.png" alt="image"></p>
<p>左侧的调用栈是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">lookUpImpOrForward</div><div class="line">_class_lookupMethodAndLoadCache3</div><div class="line">objc_msgSend_uncached</div><div class="line">main</div><div class="line">start</div></pre></td></tr></table></figure>
<p><code>obj_msgSend</code> 的实际动作就是：找到这个函数指针，然后调用它。而找到函数指针的方法就是 <code>lookUpImpOrForward</code>。</p>
<p><code>lookUpImpOrForward</code> 并不是 <code>objc_msgSend</code> 直接调用的，而是通过 <code>_class_lookupMethodAndLoadCache3</code> 方法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IMP <span class="number">_</span>class_lookupMethodAndLoadCache3(id obj, SEL sel, Class cls)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> lookUpImpOrForward(cls, sel, obj,</div><div class="line">                              YES<span class="comment">/*initialize*/</span>, NO<span class="comment">/*cache*/</span>, YES<span class="comment">/*resolver*/</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>lookUpImpOrForward</code> 实现的方法的查找，分以下几个部分：</p>
<h4 id="无锁的缓存查找"><a href="#无锁的缓存查找" class="headerlink" title="无锁的缓存查找"></a>无锁的缓存查找</h4><p>下面是在没有加锁的时候对缓存进行查找，提高缓存使用的性能：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">runtimeLock.assertUnlocked();</div><div class="line"></div><div class="line"><span class="comment">// Optimistic cache lookup</span></div><div class="line"><span class="keyword">if</span> (cache) &#123;</div><div class="line">   imp = cache_getImp(cls, sel);</div><div class="line">   <span class="keyword">if</span> (imp) <span class="keyword">return</span> imp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过因为 <code>_class_lookupMethodAndLoadCache3</code> 传入的 cache = NO，所以这里会直接跳过 if 中代码的执行。</p>
<h4 id="类的实现和初始化"><a href="#类的实现和初始化" class="headerlink" title="类的实现和初始化"></a>类的实现和初始化</h4><p>在 Objective-C 运行时初始化的过程中，如果类没有实现（isRealized），则执行 <code>realizeClass</code> 方法实现类，如果没有初始化（isInitialized），则通过 <code>_class_initialize</code> 方法初始化，会调用类的 <code>initialize</code> 方法。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!cls-&gt;isRealized()) &#123;</div><div class="line">    <span class="keyword">rwlock_writer_t</span> lock(runtimeLock);</div><div class="line">    realizeClass(cls);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (initialize  &amp;&amp;  !cls-&gt;isInitialized()) &#123;</div><div class="line">    <span class="number">_</span>class_initialize (<span class="number">_</span>class_getNonMetaClass(cls, inst));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p>加锁的主要目的是，保证方法查找以及缓存填充（cache-fill）的原子性，保证在运行以下代码时不会有新方法添加导致缓存被冲洗（flush）。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">runtimeLock.read();</div></pre></td></tr></table></figure>
<h4 id="在当前类中查找实现"><a href="#在当前类中查找实现" class="headerlink" title="在当前类中查找实现"></a>在当前类中查找实现</h4><p>在当前类中查找，先调用了 <code>cache_getImp</code> 从类的缓存中查找，如果缓存中查找不到，（第一次调用 hello 方法），则从类的方法列表中寻找方法的实现 <code>getMethodNoSuper_nolock</code>，找到后通过 <code>log_and_fill_cache</code> 将它加入类的缓存中：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Try this class's cache.</span></div><div class="line">imp = cache_getImp(cls, sel);</div><div class="line"><span class="keyword">if</span> (imp) <span class="keyword">goto</span> done;</div><div class="line"></div><div class="line"><span class="comment">// Try this class's method lists.</span></div><div class="line">&#123;</div><div class="line">    Method meth = getMethodNoSuper_nolock(cls, sel);</div><div class="line">    <span class="keyword">if</span> (meth) &#123;</div><div class="line">        log_and_fill_cache(cls, meth-&gt;imp, sel, inst, cls);</div><div class="line">        imp = meth-&gt;imp;</div><div class="line">        <span class="keyword">goto</span> done;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在父类中寻找实现"><a href="#在父类中寻找实现" class="headerlink" title="在父类中寻找实现"></a>在父类中寻找实现</h4><p>如果在当前类中找不到方法的实现，则会去父类查找，这一部分与上面的实现基本上相同，只是多了一个循环用来判断根类：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Try superclass caches and method lists.</span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> attempts = unreasonableClassCount();</div><div class="line">   <span class="keyword">for</span> (Class curClass = cls-&gt;superclass;</div><div class="line">        curClass != nil;</div><div class="line">        curClass = curClass-&gt;superclass)</div><div class="line">   &#123;</div><div class="line">       <span class="comment">// Halt if there is a cycle in the superclass chain.</span></div><div class="line">       <span class="keyword">if</span> (--attempts == <span class="number">0</span>) &#123;</div><div class="line">           <span class="number">_</span>objc_fatal(<span class="string">"Memory corruption in class list."</span>);</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">// Superclass cache.</span></div><div class="line">       imp = cache_getImp(curClass, sel);</div><div class="line">       <span class="keyword">if</span> (imp) &#123;</div><div class="line">           <span class="keyword">if</span> (imp != (IMP)<span class="number">_</span>objc_msgForward_impcache) &#123;</div><div class="line">               <span class="comment">// Found the method in a superclass. Cache it in this class.</span></div><div class="line">               log_and_fill_cache(cls, imp, sel, inst, curClass);</div><div class="line">               <span class="keyword">goto</span> done;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">else</span> &#123;</div><div class="line">               <span class="comment">// Found a forward:: entry in a superclass.</span></div><div class="line">               <span class="comment">// Stop searching, but don't cache yet; call method </span></div><div class="line">               <span class="comment">// resolver for this class first.</span></div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">// Superclass method list.</span></div><div class="line">       Method meth = getMethodNoSuper_nolock(curClass, sel);</div><div class="line">       <span class="keyword">if</span> (meth) &#123;</div><div class="line">           log_and_fill_cache(cls, meth-&gt;imp, sel, inst, curClass);</div><div class="line">           imp = meth-&gt;imp;</div><div class="line">           <span class="keyword">goto</span> done;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与当前类寻找实现的区别是：在父类中寻找到的 <code>_objc_msgForward_impcache</code> 实现会交给当前类来处理。</p>
<h4 id="方法决议"><a href="#方法决议" class="headerlink" title="方法决议"></a>方法决议</h4><p>如果在当前类和父类中都没有找到方法实现，就进入了方法决议（method resolve）的过程：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// No implementation found. Try method resolver once.</span></div><div class="line"><span class="keyword">if</span> (resolver  &amp;&amp;  !triedResolver) &#123;</div><div class="line">   runtimeLock.unlockRead();</div><div class="line">   <span class="number">_</span>class_resolveMethod(cls, sel, inst);</div><div class="line">   runtimeLock.read();</div><div class="line">   <span class="comment">// Don't cache the result; we don't hold the lock so it may have </span></div><div class="line">   <span class="comment">// changed already. Re-do the search from scratch instead.</span></div><div class="line">   triedResolver = YES;</div><div class="line">   <span class="keyword">goto</span> retry;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内部实现：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="number">_</span>class_resolveMethod(Class cls, SEL sel, id inst)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (! cls-&gt;isMetaClass()) &#123;</div><div class="line">        <span class="comment">// try [cls resolveInstanceMethod:sel]</span></div><div class="line">        <span class="number">_</span>class_resolveInstanceMethod(cls, sel, inst);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// try [nonMetaClass resolveClassMethod:sel]</span></div><div class="line">        <span class="comment">// and [cls resolveInstanceMethod:sel]</span></div><div class="line">        <span class="number">_</span>class_resolveClassMethod(cls, sel, inst);</div><div class="line">        <span class="keyword">if</span> (!lookUpImpOrNil(cls, sel, inst, </div><div class="line">                            NO<span class="comment">/*initialize*/</span>, YES<span class="comment">/*cache*/</span>, NO<span class="comment">/*resolver*/</span>)) </div><div class="line">        &#123;</div><div class="line">            <span class="number">_</span>class_resolveInstanceMethod(cls, sel, inst);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="number">_</span>class_resolveInstanceMethod(Class cls, SEL sel, id inst) &#123;</div><div class="line">    <span class="keyword">if</span> (! lookUpImpOrNil(cls-&gt;ISA(), SEL_resolveInstanceMethod, cls,</div><div class="line">                         NO<span class="comment">/*initialize*/</span>, YES<span class="comment">/*cache*/</span>, NO<span class="comment">/*resolver*/</span>)) &#123;</div><div class="line">        <span class="comment">// 没有找到 resolveInstanceMethod: 方法，直接返回。</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    BOOL (*msg)(Class, SEL, SEL) = (<span class="number">__</span>typeof__(msg))objc_msgSend;</div><div class="line">    <span class="keyword">bool</span> resolved = msg(cls, SEL_resolveInstanceMethod, sel);</div><div class="line"></div><div class="line">    <span class="comment">// 缓存结果，以防止下次在调用 resolveInstanceMethod: 方法影响性能。</span></div><div class="line">    IMP imp = lookUpImpOrNil(cls, sel, inst,</div><div class="line">                             NO<span class="comment">/*initialize*/</span>, YES<span class="comment">/*cache*/</span>, NO<span class="comment">/*resolver*/</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个方法的实现其实就是判断当前类是否实现了 <code>resolveInstanceMethod:</code> 或者 <code>resolveClassMethod:</code> 方法，然后用 <code>objc_msgSend</code> 执行上述方法，并传入需要决议的选择子。</p>
<p>在执行了 <code>resolveInstanceMethod:</code> 之后，会跳转到 <code>retry</code> 标签，重新执行查找方法实现的流程，只不过不会再调用 <code>resolveInstanceMethod:</code> 方法了（将 <code>triedResolver</code> 标记为 YES）。</p>
<h4 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h4><p>在缓存、当前类、父类以及 <code>resolveInstanceMethod:</code> 都没有解决实现查找的问题时，Objective-C 还为我们提供了最后一次翻身的机会，进行方法转发：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// No implementation found, and method resolver didn't help. </span></div><div class="line"><span class="comment">// Use forwarding.</span></div><div class="line">imp = (IMP)<span class="number">_</span>objc_msgForward_impcache;</div><div class="line">cache_fill(cls, sel, imp, inst);</div></pre></td></tr></table></figure>
<p>返回实现 <code>_objc_msgForward_impcache</code>，然后加入缓存。</p>
<h4 id="解锁、返回实现"><a href="#解锁、返回实现" class="headerlink" title="解锁、返回实现"></a>解锁、返回实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">done:</div><div class="line">    runtimeLock.unlockRead();</div><div class="line"></div><div class="line"><span class="keyword">return</span> imp;</div></pre></td></tr></table></figure>
<p>上面查找方法的过程中，一旦找到方法的实现，就会跳转到 <code>done</code> 标签进行解锁，然后返回方法实现。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>根据上面截图中 demo 中的示例，由于 <code>CustomObject</code> 实现了方法 <code>hello</code>，当我们调用 <code>[object hello]</code> 时，虽然缓存没有命中，但是在当前类的方法列表中找到了 <code>hello</code> 方法的实现，调用了该方法，这样就结束了整个方法第一次的调用过程。</p>
<h3 id="有缓存"><a href="#有缓存" class="headerlink" title="有缓存"></a>有缓存</h3><p>如果使用对应的选择子时，缓存命中了，那么情况就大不相同了，我们修改主程序中的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        <span class="comment">// insert code here...</span></div><div class="line">        NSLog(@<span class="string">"Hello, World!"</span>);</div><div class="line">        </div><div class="line">        CustomObject *object = [[CustomObject alloc] init];</div><div class="line">        [object hello];</div><div class="line">        [object hello];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在第二次调用 <code>hello</code> 方法时，同第一次一样加断点，发现第二次 <code>objc_msgSend</code> 并没有走 <code>lookupImpOrForward</code> 这个方法，而是直接调用了 <code>hello</code> 方法，结束了。</p>
<p>为了验证有缓存时，<code>objc_msgSend</code> 是否真的访问了类中的缓存来加速实现寻找的过程，我们进行了两种实验：</p>
<blockquote>
<p>一个重要的问题：<code>objc_class *</code> 的地址偏移 0x10，可以得到成员 <code>cache</code> 的地址</p>
</blockquote>
<h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><p>在执行第二个 <code>hello</code> 方法前，将其中 <code>hello</code> 的缓存清空：</p>
<p><img src="/2015/08/15/Objective-C-Runtime-3/clear_imp_cache.png" alt="image"></p>
<p>这样 <code>CustomObject</code> 中就不存在 <code>hello</code> 方法对应实现的缓存了。然后继续运行程序，果然像第一次调用 <code>hello</code> 一样，会再次进入 <code>lookupImpOrForward</code> 方法。</p>
<h4 id="添加伪缓存"><a href="#添加伪缓存" class="headerlink" title="添加伪缓存"></a>添加伪缓存</h4><p>修改代码为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        <span class="comment">// insert code here...</span></div><div class="line">        NSLog(@<span class="string">"Hello, World!"</span>);</div><div class="line">        </div><div class="line">        <span class="number">__u</span>nused IMP cached_hello_imp = imp_implementationWithBlock(^() &#123;</div><div class="line">            NSLog(@<span class="string">"Cached Hello"</span>);</div><div class="line">        &#125;);</div><div class="line">        CustomObject *object = [[CustomObject alloc] init];</div><div class="line">        [object hello];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在第一个 <code>hello</code> 方法调用之前，打断点将实现加入缓存：</p>
<p><img src="/2015/08/15/Objective-C-Runtime-3/add_imp_cache.png" alt="image"></p>
<p>我们看到添加缓存后，打印出的 <code>_imp</code> 的地址和上面我们定义的 <code>cached_hello_imp</code> 的地址一样，执行代码后，输出了 <code>Cached Hello</code>，可见在 <code>objc_msgSend</code> 的消息发送链路中，使用错误的缓存实现 <code>cached_hello_imp</code> 拦截了实现的查找，没有再调用 <code>lookupImpOrForward</code> 进行方法查找，打印出了 <code>Cached Hello</code>。</p>
<p>由此可以推定，<code>objc_msgSend</code> 在实现中确实检查了缓存，如果没有缓存会调用 <code>lookupImpOrForward</code> 进行方法查找。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看了大神 Draveness 的<a href="https://draveness.me/message" target="_blank" rel="external">从源代码看 ObjC 中消息的发送</a>，对 OC 中的消息机制介绍的很透彻。参考原文对 <code>objc_msgSend</code> 部分进行了深入的学习，感谢大神。（2016.5.15）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://draveness.me/message" target="_blank" rel="external">https://draveness.me/message</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Objective-C 最大的特色是承自 Smalltalk 的消息传递模型，Objective-C 里，对象互相调用方法，就是对象之间互相传递消息。&lt;/p&gt;
&lt;p&gt;C++ 里类别与方法的关系严格清楚，一个方法必定属于一个类别，而且在编译时（compile time）就已经紧密绑定，不可能调用一个类别里不存在的方法。但在Objective-C，类别与消息的关系比较松散，调用方法视为对对象发送消息，所有方法都被视为对消息的回应。所有消息处理直到运行时（runtime）才会动态决定，并交由类别自行决定如何处理收到的消息。也就是说，一个类别不保证一定会回应收到的消息，如果类别收到了一个无法处理的消息，程序只会抛出异常，不会出错或崩溃。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://mlijin9011.github.io/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Runtime - 类与对象</title>
    <link href="http://mlijin9011.github.io/2015/08/08/Objective-C-Runtime-2/"/>
    <id>http://mlijin9011.github.io/2015/08/08/Objective-C-Runtime-2/</id>
    <published>2015-08-08T12:12:18.000Z</published>
    <updated>2018-04-06T07:35:11.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>上文讲了 Runtime 中的基本数据结构，在此基础上，我们继续来研究类与对象相关的 Runtime 函数。Runtime 有很多的函数可以操作类和对象，类相关的是 class<em> 为前缀，对象相关操作是 objc</em> 或 object_ 为前缀。</p>
<a id="more"></a>
<h2 id="NSObject-amp-Runtime"><a href="#NSObject-amp-Runtime" class="headerlink" title="NSObject &amp; Runtime"></a>NSObject &amp; Runtime</h2><p>首先从我们非常熟悉的 OC 中的根类 <code>NSObject</code> 来入手，看一下 <code>NSObject</code> 是怎么实现的。</p>
<h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><p><code>+ load</code> 作为 Objective-C 中的一个方法，与其它方法有很大的不同。它是一个<strong>在整个文件被加载到运行时，在 <code>main</code> 函数调用之前被 ObjC 运行时调用的钩子方法</strong>。</p>
<h4 id="load-方法调用栈"><a href="#load-方法调用栈" class="headerlink" title="load 方法调用栈"></a>load 方法调用栈</h4><p>首先来通过 load 方法的调用栈，分析一下它到底是如何被调用的。</p>
<p>下面是程序的全部代码：</p>
<p><img src="/2015/08/08/Objective-C-Runtime-2/+load.png" alt="image"></p>
<p>左侧的调用栈很清楚的告诉我们，哪些方法被调用了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+[CustomObject load]</div><div class="line">call_class_loads()</div><div class="line">call_load_methods</div><div class="line">load_images</div><div class="line">dyld::notifySingle(dyld_image_states, ImageLoader const*)</div><div class="line">_dyld_start</div></pre></td></tr></table></figure>
<blockquote>
<p>dyld 是 the dynamic link editor 的缩写，它是苹果的动态链接器。<br>在系统内核做好程序准备工作之后，交由 dyld 负责余下的工作。</p>
<p>Q：<code>load</code> 方法是如何被调用的？<br>A：当 Objective-C 运行时初始化的时候，会通过 <code>dyld_register_image_state_change_handler</code> 在每次有新的镜像加入运行时的时候，进行回调。执行 <code>load_images</code> 将所有包含 <code>load</code> 方法的文件加入列表 <code>loadable_classes</code> ，然后从这个列表中找到对应的 <code>load</code> 方法的实现，调用 <code>load</code> 方法。</p>
<p>Q：<code>load</code> 方法的调用顺序？<br>A：<code>load</code> 方法的调用顺序有两条规则：父类先于子类调用；类先于分类调用。</p>
</blockquote>
<h3 id="initialize"><a href="#initialize" class="headerlink" title="initialize"></a>initialize</h3><h4 id="initialize-方法调用栈"><a href="#initialize-方法调用栈" class="headerlink" title="initialize 方法调用栈"></a>initialize 方法调用栈</h4><p>我们在 <code>initialize</code> 方法中打一个断点，来查看这个方法的调用栈：<br><img src="/2015/08/08/Objective-C-Runtime-2/+initialize.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+[CustomObject initialize]</div><div class="line">_class_initialize</div><div class="line">lookUpImpOrForward</div><div class="line">_class_lookupMethodAndLoadCache3</div><div class="line">_objc_msgSend_uncached</div><div class="line">main</div><div class="line">start</div></pre></td></tr></table></figure>
<p>运行后 log 输出内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CustomObject load</div><div class="line">Hello, World!</div><div class="line">CustomObject initialize</div><div class="line">&lt;CustomObject: 0x100607c70&gt; is init</div><div class="line">&lt;CustomObject: 0x100607660&gt; is init</div></pre></td></tr></table></figure>
<blockquote>
<p><code>initialize</code> 的调用是惰性的，它只会在第一次调用当前类的方法时被调用。<br><code>initialize</code> 方法是在 <code>alloc</code> 方法之前调用的，<code>alloc</code> 的调用导致了前者的执行。<br>与 <code>load</code> 不同，<code>initialize</code> 方法调用时，所有的类都已经加载到了内存中。<br><code>initialize</code> 的运行是线程安全的。<br>会强制父类先发送 <code>+initialize</code>，子类会继承父类的 <code>initialize</code> 方法。</p>
</blockquote>
<h3 id="alloc-amp-init-amp-new"><a href="#alloc-amp-init-amp-new" class="headerlink" title="alloc &amp; init &amp; new"></a>alloc &amp; init &amp; new</h3><p><code>+ alloc</code> 和 <code>- init</code> 这一对是 <code>NSObject</code> 对象初始化的，整个对象的初始化过程其实只是为一个分配内存空间，并且初始化 <code>isa_t</code> 结构体的过程。</p>
<h4 id="alloc-的实现"><a href="#alloc-的实现" class="headerlink" title="alloc 的实现"></a>alloc 的实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">+ (id)alloc &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">_</span>objc_rootAlloc(self);</div><div class="line">&#125;</div><div class="line"></div><div class="line">id <span class="number">_</span>objc_rootAlloc(Class cls)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> callAlloc(cls, <span class="literal">false</span><span class="comment">/*checkNil*/</span>, <span class="literal">true</span><span class="comment">/*allocWithZone*/</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 中间省略了很多的代码，展示了最常见的执行路径</span></div><div class="line"><span class="function"><span class="keyword">static</span> id <span class="title">callAlloc</span><span class="params">(Class cls, <span class="keyword">bool</span> checkNil, <span class="keyword">bool</span> allocWithZone=<span class="literal">false</span>)</span> </span>&#123;</div><div class="line">    id obj = class_createInstance(cls, <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">id <span class="title">class_createInstance</span><span class="params">(Class cls, <span class="keyword">size_t</span> extraBytes)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">_</span>class_createInstanceFromZone(cls, extraBytes, nil);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 中间省略了很多的代码，展示了最常见的执行路径</span></div><div class="line"><span class="keyword">static</span> id <span class="number">_</span>class_createInstanceFromZone(Class cls, <span class="keyword">size_t</span> extraBytes, <span class="keyword">void</span> *zone, <span class="keyword">bool</span> cxxConstruct = <span class="literal">true</span>, <span class="keyword">size_t</span> *outAllocatedSize = nil) &#123;</div><div class="line">    <span class="keyword">size_t</span> size = cls-&gt;instanceSize(extraBytes);</div><div class="line"></div><div class="line">    id obj = (id)<span class="built_in">calloc</span>(<span class="number">1</span>, size);</div><div class="line">    <span class="keyword">if</span> (!obj) <span class="keyword">return</span> nil;</div><div class="line">    obj-&gt;initInstanceIsa(cls, hasCxxDtor);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个对象的初始化过程很符合直觉，只是分配内存空间、然后初始化 <code>isa_t</code> 结构体。</p>
<h4 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a>init 方法</h4><p><code>NSObject</code> 的 <code>- init</code> 方法只是调用了 <code>_objc_rootInit</code> 并返回了当前对象。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (id)init &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">_</span>objc_rootInit(self);</div><div class="line">&#125;</div><div class="line"></div><div class="line">id <span class="number">_</span>objc_rootInit(id obj) &#123;</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (id)<span class="keyword">new</span> &#123;</div><div class="line">    <span class="keyword">return</span> [callAlloc(self, <span class="literal">false</span><span class="comment">/*checkNil*/</span>) init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，<code>+ new</code> 方法中也调用了 <code>callAlloc</code>，和 <code>alloc</code> 差不多，然后再调用 <code>init</code>，也就是说 <code>[NSObject new]</code> 就相当于 <code>[[NSObject alloc] init]</code>。</p>
<h3 id="isKindOfClass-amp-isMindOfClass"><a href="#isKindOfClass-amp-isMindOfClass" class="headerlink" title="isKindOfClass &amp; isMindOfClass"></a>isKindOfClass &amp; isMindOfClass</h3><p>这两个方法很多人都混淆，现在我们看一下里面的具体实现就知道了：</p>
<p><code>isKindOfClass</code> 的实现如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (BOOL)isKindOfClass:(Class)cls &#123;</div><div class="line">    <span class="keyword">for</span> (Class tcls = [self <span class="keyword">class</span>]; tcls; tcls = tcls-&gt;superclass) &#123;</div><div class="line">        <span class="keyword">if</span> (tcls == cls) <span class="keyword">return</span> YES;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (Class)<span class="keyword">class</span> &#123;</div><div class="line">    <span class="keyword">return</span> object_getClass(self);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Class <span class="title">object_getClass</span><span class="params">(id obj)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (obj) <span class="keyword">return</span> obj-&gt;getIsa();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说，如果实例对象的 <code>isa</code> 或 <code>isa-&gt;superclass</code> 或者是 <code>isa-&gt;superclass-&gt;superclass</code>（循环遍历）和传过来的类(Class) 相等，就返回 YES，否则返回 NO。</p>
<p><code>isMemberOfClass</code> 的实现如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (BOOL)isMemberOfClass:(Class)cls &#123;</div><div class="line">    <span class="keyword">return</span> [self <span class="keyword">class</span>] == cls;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (Class)<span class="keyword">class</span> &#123;</div><div class="line">    <span class="keyword">return</span> object_getClass(self);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Class <span class="title">object_getClass</span><span class="params">(id obj)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (obj) <span class="keyword">return</span> obj-&gt;getIsa();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，<code>isMemberOfClass</code> 只是通过比较实例对象的 <code>isa</code> 是否和传过来的类(Class) 一样来判断的，比 <code>isKindOfClass</code> 的条件更局限。</p>
<h3 id="isEqual"><a href="#isEqual" class="headerlink" title="isEqual"></a>isEqual</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)isEqual:(id)obj &#123;</div><div class="line">    <span class="keyword">return</span> obj == (id)self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)isEqual:(id)obj &#123;</div><div class="line">    <span class="keyword">return</span> obj == self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接比较类的地址，或者实例对象的地址是否相等。</p>
<h3 id="respondsToSelector"><a href="#respondsToSelector" class="headerlink" title="respondsToSelector"></a>respondsToSelector</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (BOOL)respondsToSelector:(SEL)sel &#123;</div><div class="line">    <span class="keyword">if</span> (!sel) <span class="keyword">return</span> NO;</div><div class="line">    <span class="keyword">return</span> class_respondsToSelector_inst([self <span class="keyword">class</span>], sel, self);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">class_respondsToSelector_inst</span><span class="params">(Class cls, SEL sel, id inst)</span></span></div><div class="line">&#123;</div><div class="line">    IMP imp;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!sel  ||  !cls) <span class="keyword">return</span> NO;</div><div class="line"></div><div class="line">    <span class="comment">// Avoids +initialize because it historically did so.</span></div><div class="line">    <span class="comment">// We're not returning a callable IMP anyway.</span></div><div class="line">    imp = lookUpImpOrNil(cls, sel, inst, </div><div class="line">                         NO<span class="comment">/*initialize*/</span>, YES<span class="comment">/*cache*/</span>, YES<span class="comment">/*resolver*/</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">bool</span>(imp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">IMP <span class="title">lookUpImpOrForward</span><span class="params">(Class cls, SEL sel, id inst, </span></span></div><div class="line">                       <span class="keyword">bool</span> initialize, <span class="keyword">bool</span> cache, <span class="keyword">bool</span> resolver)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Optimistic cache lookup.</span></div><div class="line">    <span class="comment">// Try this class's cache.</span></div><div class="line">    <span class="comment">// Try this class's method lists.</span></div><div class="line">    <span class="comment">// Try superclass caches and method lists. (循环)</span></div><div class="line">    <span class="comment">// No implementation found. Try method resolver once.</span></div><div class="line">    <span class="comment">// No implementation found, and method resolver didn't help. </span></div><div class="line">    <span class="comment">// Use forwarding.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看实例对象是否对传入的方法有响应，其实就是去它的 <code>isa</code> 所指向的类或者父类中去查找是否实现了此方法，查找实现的方法 <code>lookUpImpOrForward</code> 中省略了代码部分，只列出了注释部分，但是看注释也可以看出它的实现思路，具体实现后面在消息机制部分会详细阐述。</p>
<h3 id="conformsToProtocol"><a href="#conformsToProtocol" class="headerlink" title="conformsToProtocol"></a>conformsToProtocol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">- (BOOL)conformsToProtocol:(Protocol *)protocol &#123;</div><div class="line">    <span class="keyword">if</span> (!protocol) <span class="keyword">return</span> NO;</div><div class="line">    <span class="keyword">for</span> (Class tcls = [self <span class="keyword">class</span>]; tcls; tcls = tcls-&gt;superclass) &#123;</div><div class="line">        <span class="keyword">if</span> (class_conformsToProtocol(tcls, protocol)) <span class="keyword">return</span> YES;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BOOL <span class="title">class_conformsToProtocol</span><span class="params">(Class cls, Protocol *proto_gen)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protocol_t</span> *proto = newprotocol(proto_gen);</div><div class="line">    ... <span class="comment">// 省略部分代码</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; proto_ref : cls-&gt;data()-&gt;protocols) &#123;</div><div class="line">        <span class="keyword">protocol_t</span> *p = remapProtocol(proto_ref);</div><div class="line">        <span class="keyword">if</span> (p == proto || protocol_conformsToProtocol_nolock(p, proto)) &#123;</div><div class="line">            <span class="keyword">return</span> YES;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> </span></div><div class="line"><span class="title">protocol_conformsToProtocol_nolock</span><span class="params">(<span class="keyword">protocol_t</span> *self, <span class="keyword">protocol_t</span> *other)</span></div><div class="line">&#123;</div><div class="line">    ... <span class="comment">// 省略部分代码</span></div><div class="line">    <span class="keyword">if</span> (self-&gt;protocols) &#123;</div><div class="line">        <span class="keyword">uintptr_t</span> i;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; self-&gt;protocols-&gt;count; i++) &#123;</div><div class="line">            <span class="keyword">protocol_t</span> *proto = remapProtocol(self-&gt;protocols-&gt;<span class="built_in">list</span>[i]);</div><div class="line">            <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(other-&gt;mangledName, proto-&gt;mangledName)) &#123;</div><div class="line">                <span class="keyword">return</span> YES;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (protocol_conformsToProtocol_nolock(proto, other)) &#123;</div><div class="line">                <span class="keyword">return</span> YES;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>conformsToProtocol</code> 是个递归查找，查找实例对象的 <code>isa</code> 或 <code>isa-&gt;superclass</code> 或者是 <code>isa-&gt;superclass-&gt;superclass</code>（循环遍历），是否有实现传入的这个 <code>protocol</code>，是否实现这个协议，是从 <code>self-&gt;protocols</code> 里遍历查找。</p>
<h3 id="performSelector"><a href="#performSelector" class="headerlink" title="performSelector"></a>performSelector</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (id)performSelector:(SEL)sel &#123;</div><div class="line">    <span class="keyword">if</span> (!sel) [self doesNotRecognizeSelector:sel];</div><div class="line">    <span class="keyword">return</span> ((id(*)(id, SEL))objc_msgSend)(self, sel);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)performSelector:(SEL)sel withObject:(id)obj1 withObject:(id)obj2 &#123;</div><div class="line">    <span class="keyword">if</span> (!sel) [self doesNotRecognizeSelector:sel];</div><div class="line">    <span class="keyword">return</span> ((id(*)(id, SEL, id, id))objc_msgSend)(self, sel, obj1, obj2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是 <code>objc_msgSend</code>，这个后面讲消息机制的时候再具体讲述。 </p>
<h2 id="Class-amp-Runtime"><a href="#Class-amp-Runtime" class="headerlink" title="Class &amp; Runtime"></a>Class &amp; Runtime</h2><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>先看下这个demo例子，使用了常用的 runtime 中类相关的操作函数，然后具体再讲解：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// CustomClass.h</span></div><div class="line">@interface CustomClass : NSObject &lt;NSCopying, NSCoding&gt;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSArray *<span class="built_in">array</span>;</div><div class="line">@property (nonatomic, copy) NSString *<span class="built_in">string</span>;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)method1;</div><div class="line">- (<span class="keyword">void</span>)method2;</div><div class="line">+ (<span class="keyword">void</span>)classMethod1;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"><span class="comment">// CustomClass.m</span></div><div class="line">@<span class="function">interface <span class="title">CustomClass</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    NSInteger       <span class="number">_</span>instance1;</div><div class="line">    NSString    *   <span class="number">_</span>instance2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@property (nonatomic, assign) NSUInteger integer;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)method3WithArg1:(NSInteger)arg1 arg2:(NSString *)arg2;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation CustomClass</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)classMethod1 &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)method1 &#123;</div><div class="line">    NSLog(@<span class="string">"call method method1"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)method2 &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)method3WithArg1:(NSInteger)arg1 arg2:(NSString *)arg2 &#123;</div><div class="line">    NSLog(@<span class="string">"arg1 : %ld, arg2 : %@"</span>, arg1, arg2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"><span class="comment">// main.m</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        CustomClass *myClass = [[CustomClass alloc] init];</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount = <span class="number">0</span>;</div><div class="line">        Class cls = myClass.<span class="keyword">class</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// 类名</span></div><div class="line">        NSLog(@<span class="string">"class name: %s"</span>, class_getName(cls));</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 父类</span></div><div class="line">        NSLog(@<span class="string">"super class name: %s"</span>, class_getName(class_getSuperclass(cls)));</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 是否是元类</span></div><div class="line">        NSLog(@<span class="string">"MyClass is %@ a meta-class"</span>, (class_isMetaClass(cls) ? @<span class="string">""</span> : @<span class="string">"not"</span>));</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        Class meta_class = objc_getMetaClass(class_getName(cls));</div><div class="line">        NSLog(@<span class="string">"%s's meta-class is %s"</span>, class_getName(cls), class_getName(meta_class));</div><div class="line">        Class meta_class_super = class_getSuperclass(meta_class);</div><div class="line">        NSLog(@<span class="string">"%s's meta-class's super-class is %s"</span>, class_getName(cls), class_getName(meta_class_super));</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 变量实例大小</span></div><div class="line">        NSLog(@<span class="string">"instance size: %zu"</span>, class_getInstanceSize(cls));</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 成员变量</span></div><div class="line">        Ivar *ivars = class_copyIvarList(cls, &amp;outCount);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">            Ivar ivar = ivars[i];</div><div class="line">            NSLog(@<span class="string">"instance variable's name: %s at index: %d"</span>, ivar_getName(ivar), i);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">free</span>(ivars);</div><div class="line">        Ivar <span class="built_in">string</span> = class_getInstanceVariable(cls, <span class="string">"_string"</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">string</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">            NSLog(@<span class="string">"instace variable %s"</span>, ivar_getName(<span class="built_in">string</span>));</div><div class="line">        &#125;</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 属性操作</span></div><div class="line">        <span class="keyword">objc_property_t</span> * properties = class_copyPropertyList(cls, &amp;outCount);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">            <span class="keyword">objc_property_t</span> property = properties[i];</div><div class="line">            NSLog(@<span class="string">"property's name: %s"</span>, property_getName(property));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">free</span>(properties);</div><div class="line">        <span class="keyword">objc_property_t</span> <span class="built_in">array</span> = class_getProperty(cls, <span class="string">"array"</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">array</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">            NSLog(@<span class="string">"property %s"</span>, property_getName(<span class="built_in">array</span>));</div><div class="line">        &#125;</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 方法操作</span></div><div class="line">        Method *methods = class_copyMethodList(cls, &amp;outCount);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">            Method method = methods[i];</div><div class="line">            NSLog(@<span class="string">"method's signature: %s"</span>, method_getName(method));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">free</span>(methods);</div><div class="line">        Method method1 = class_getInstanceMethod(cls, @selector(method1));</div><div class="line">        <span class="keyword">if</span> (method1 != <span class="literal">NULL</span>) &#123;</div><div class="line">            NSLog(@<span class="string">"method %s"</span>, method_getName(method1));</div><div class="line">        &#125;</div><div class="line">        Method classMethod = class_getClassMethod(cls, @selector(classMethod1));</div><div class="line">        <span class="keyword">if</span> (classMethod != <span class="literal">NULL</span>) &#123;</div><div class="line">            NSLog(@<span class="string">"class method : %s"</span>, method_getName(classMethod));</div><div class="line">        &#125;</div><div class="line">        NSLog(@<span class="string">"MyClass is%@ responsd to selector: method3WithArg1:arg2:"</span>, class_respondsToSelector(cls, @selector(method3WithArg1:arg2:)) ? @<span class="string">""</span> : @<span class="string">" not"</span>);</div><div class="line">        IMP imp = class_getMethodImplementation(cls, @selector(method1));</div><div class="line">        imp();</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 协议</span></div><div class="line">        Protocol * <span class="number">__u</span>nsafe_unretained * protocols = class_copyProtocolList(cls, &amp;outCount);</div><div class="line">        Protocol * protocol;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">            protocol = protocols[i];</div><div class="line">            NSLog(@<span class="string">"protocol name: %s"</span>, protocol_getName(protocol));</div><div class="line">        &#125;</div><div class="line">        NSLog(@<span class="string">"MyClass is%@ responsed to protocol %s"</span>, class_conformsToProtocol(cls, protocol) ? @<span class="string">""</span> : @<span class="string">" not"</span>, protocol_getName(protocol));</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 动态添加类</span></div><div class="line">        NSLog(@<span class="string">"动态添加类=========================================================="</span>);</div><div class="line">        IMP imp_submethod1 = imp_implementationWithBlock(^(id <span class="number">_</span>self) &#123;</div><div class="line">            NSLog(@<span class="string">"run sub method 1"</span>);</div><div class="line">        &#125;);</div><div class="line">        Class subClass = objc_allocateClassPair(myClass.<span class="keyword">class</span>, <span class="string">"SubClass"</span>, <span class="number">0</span>);</div><div class="line">        class_addMethod(subClass, @selector(submethod1), (IMP)imp_submethod1, <span class="string">"v@:"</span>);</div><div class="line">        class_replaceMethod(subClass, @selector(method1), (IMP)imp_submethod1, <span class="string">"v@:"</span>);</div><div class="line">        class_addIvar(subClass, <span class="string">"_ivar1"</span>, <span class="keyword">sizeof</span>(NSString *), <span class="built_in">log</span>(<span class="keyword">sizeof</span>(NSString *)), <span class="string">"i"</span>);</div><div class="line">        <span class="keyword">objc_property_attribute_t</span> type = &#123;<span class="string">"T"</span>, <span class="string">"@\"NSString\""</span>&#125;;</div><div class="line">        <span class="keyword">objc_property_attribute_t</span> ownership = &#123; <span class="string">"C"</span>, <span class="string">""</span> &#125;;</div><div class="line">        <span class="keyword">objc_property_attribute_t</span> backingivar = &#123; <span class="string">"V"</span>, <span class="string">"_ivar1"</span>&#125;;</div><div class="line">        <span class="keyword">objc_property_attribute_t</span> attrs[] = &#123;type, ownership, backingivar&#125;;</div><div class="line">        class_addProperty(subClass, <span class="string">"property2"</span>, attrs, <span class="number">3</span>);</div><div class="line">        objc_registerClassPair(subClass);</div><div class="line">        </div><div class="line">        id subInstance = [[subClass alloc] init];</div><div class="line">        </div><div class="line">        <span class="comment">// 成员变量</span></div><div class="line">        Ivar *ivars1 = class_copyIvarList(subClass, &amp;outCount);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">            Ivar ivar = ivars1[i];</div><div class="line">            NSLog(@<span class="string">"instance variable's name: %s at index: %d"</span>, ivar_getName(ivar), i);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">free</span>(ivars1);</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        <span class="comment">// 属性操作</span></div><div class="line">        <span class="keyword">objc_property_t</span> *properties1 = class_copyPropertyList(subClass, &amp;outCount);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">            <span class="keyword">objc_property_t</span> property = properties1[i];</div><div class="line">            NSLog(@<span class="string">"property's name: %s"</span>, property_getName(property));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">free</span>(properties1);</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">        </div><div class="line">        [subInstance performSelector:@selector(submethod1)];</div><div class="line">        [subInstance performSelector:@selector(method1)];</div><div class="line">        NSLog(@<span class="string">"=========================================================="</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印 log 输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">2015-08-08 17:16:32.129952+0800 TestRuntime[30516:9002867] class name: CustomClass</div><div class="line">2015-08-08 17:16:32.130589+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.130837+0800 TestRuntime[30516:9002867] super class name: NSObject</div><div class="line">2015-08-08 17:16:32.131012+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.131293+0800 TestRuntime[30516:9002867] MyClass is not a meta-class</div><div class="line">2015-08-08 17:16:32.131451+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.131564+0800 TestRuntime[30516:9002867] CustomClass&apos;s meta-class is CustomClass</div><div class="line">2015-08-08 17:16:32.132398+0800 TestRuntime[30516:9002867] CustomClass&apos;s meta-class&apos;s super-class is NSObject</div><div class="line">2015-08-08 17:16:32.132485+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.132672+0800 TestRuntime[30516:9002867] instance size: 48</div><div class="line">2015-08-08 17:16:32.132816+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.132982+0800 TestRuntime[30516:9002867] instance variable&apos;s name: _instance1 at index: 0</div><div class="line">2015-08-08 17:16:32.133105+0800 TestRuntime[30516:9002867] instance variable&apos;s name: _instance2 at index: 1</div><div class="line">2015-08-08 17:16:32.133262+0800 TestRuntime[30516:9002867] instance variable&apos;s name: _array at index: 2</div><div class="line">2015-08-08 17:16:32.133437+0800 TestRuntime[30516:9002867] instance variable&apos;s name: _string at index: 3</div><div class="line">2015-08-08 17:16:32.133714+0800 TestRuntime[30516:9002867] instance variable&apos;s name: _integer at index: 4</div><div class="line">2015-08-08 17:16:32.133835+0800 TestRuntime[30516:9002867] instace variable _string</div><div class="line">2015-08-08 17:16:32.134005+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.134140+0800 TestRuntime[30516:9002867] property&apos;s name: integer</div><div class="line">2015-08-08 17:16:32.134251+0800 TestRuntime[30516:9002867] property&apos;s name: array</div><div class="line">2015-08-08 17:16:32.134399+0800 TestRuntime[30516:9002867] property&apos;s name: string</div><div class="line">2015-08-08 17:16:32.134561+0800 TestRuntime[30516:9002867] property array</div><div class="line">2015-08-08 17:16:32.134712+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.134883+0800 TestRuntime[30516:9002867] method&apos;s signature: method1</div><div class="line">2015-08-08 17:16:32.134989+0800 TestRuntime[30516:9002867] method&apos;s signature: method3WithArg1:arg2:</div><div class="line">2015-08-08 17:16:32.135134+0800 TestRuntime[30516:9002867] method&apos;s signature: method2</div><div class="line">2015-08-08 17:16:32.135314+0800 TestRuntime[30516:9002867] method&apos;s signature: integer</div><div class="line">2015-08-08 17:16:32.135388+0800 TestRuntime[30516:9002867] method&apos;s signature: setInteger:</div><div class="line">2015-08-08 17:16:32.135492+0800 TestRuntime[30516:9002867] method&apos;s signature: setArray:</div><div class="line">2015-08-08 17:16:32.135602+0800 TestRuntime[30516:9002867] method&apos;s signature: .cxx_destruct</div><div class="line">2015-08-08 17:16:32.135774+0800 TestRuntime[30516:9002867] method&apos;s signature: setString:</div><div class="line">2015-08-08 17:16:32.135892+0800 TestRuntime[30516:9002867] method&apos;s signature: array</div><div class="line">2015-08-08 17:16:32.136003+0800 TestRuntime[30516:9002867] method&apos;s signature: string</div><div class="line">2015-08-08 17:16:32.136167+0800 TestRuntime[30516:9002867] method method1</div><div class="line">2015-08-08 17:16:32.136317+0800 TestRuntime[30516:9002867] class method : classMethod1</div><div class="line">2015-08-08 17:16:32.136436+0800 TestRuntime[30516:9002867] MyClass is responsd to selector: method3WithArg1:arg2:</div><div class="line">2015-08-08 17:16:32.136537+0800 TestRuntime[30516:9002867] call method method1</div><div class="line">2015-08-08 17:16:32.136635+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.136792+0800 TestRuntime[30516:9002867] protocol name: NSCopying</div><div class="line">2015-08-08 17:16:32.136866+0800 TestRuntime[30516:9002867] protocol name: NSCoding</div><div class="line">2015-08-08 17:16:32.137016+0800 TestRuntime[30516:9002867] MyClass is responsed to protocol NSCoding</div><div class="line">2015-08-08 17:16:32.137138+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.137442+0800 TestRuntime[30516:9002867] 动态添加类==========================================================</div><div class="line">2015-08-08 17:16:32.137793+0800 TestRuntime[30516:9002867] instance variable&apos;s name: _ivar1 at index: 0</div><div class="line">2015-08-08 17:16:32.137909+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.138061+0800 TestRuntime[30516:9002867] property&apos;s name: property2</div><div class="line">2015-08-08 17:16:32.138182+0800 TestRuntime[30516:9002867] ==========================================================</div><div class="line">2015-08-08 17:16:32.138269+0800 TestRuntime[30516:9002867] run sub method 1</div><div class="line">2015-08-08 17:16:32.138419+0800 TestRuntime[30516:9002867] run sub method 1</div><div class="line">2015-08-08 17:16:32.138528+0800 TestRuntime[30516:9002867] ==========================================================</div></pre></td></tr></table></figure>
<p>对照上面的例子，我们一一介绍：</p>
<h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取类的类名</span></div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">class_getName</span><span class="params">(Class cls)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="super-class-和-meta-class"><a href="#super-class-和-meta-class" class="headerlink" title="super_class 和 meta-class"></a>super_class 和 meta-class</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取类的父类</span></div><div class="line"><span class="function">Class <span class="title">class_getSuperclass</span><span class="params">(Class cls)</span></span>;</div><div class="line"><span class="comment">// 判断给定的Class是否是一个meta class</span></div><div class="line"><span class="function">BOOL <span class="title">class_isMetaClass</span><span class="params">(Class cls)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="instance-size"><a href="#instance-size" class="headerlink" title="instance_size"></a>instance_size</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取实例大小</span></div><div class="line"><span class="keyword">size_t</span> class_getInstanceSize(Class cls);</div></pre></td></tr></table></figure>
<h3 id="成员变量-ivars-及属性"><a href="#成员变量-ivars-及属性" class="headerlink" title="成员变量(ivars)及属性"></a>成员变量(ivars)及属性</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//成员变量操作函数</span></div><div class="line"><span class="comment">// 获取类中指定名称实例成员变量的信息</span></div><div class="line"><span class="function">Ivar <span class="title">class_getInstanceVariable</span><span class="params">(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div><div class="line"><span class="comment">// 获取类成员变量的信息</span></div><div class="line"><span class="function">Ivar <span class="title">class_getClassVariable</span><span class="params">(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div><div class="line"><span class="comment">// 添加成员变量</span></div><div class="line"><span class="function">BOOL <span class="title">class_addIvar</span><span class="params">(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">size_t</span> size, <span class="keyword">uint8_t</span> alignment, <span class="keyword">const</span> <span class="keyword">char</span> *types)</span></span>; <span class="comment">//这个只能够向在runtime时创建的类添加成员变量</span></div><div class="line"><span class="comment">// 获取整个成员变量列表</span></div><div class="line"><span class="function">Ivar * <span class="title">class_copyIvarList</span><span class="params">(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span></span>; <span class="comment">//必须使用free()来释放这个数组</span></div><div class="line"></div><div class="line"><span class="comment">//属性操作函数</span></div><div class="line"><span class="comment">// 获取类中指定名称实例成员变量的信息</span></div><div class="line"><span class="function">Ivar <span class="title">class_getInstanceVariable</span><span class="params">(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div><div class="line"><span class="comment">// 获取类成员变量的信息</span></div><div class="line"><span class="function">Ivar <span class="title">class_getClassVariable</span><span class="params">(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div><div class="line"><span class="comment">// 添加成员变量</span></div><div class="line"><span class="function">BOOL <span class="title">class_addIvar</span><span class="params">(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">size_t</span> size, <span class="keyword">uint8_t</span> alignment, <span class="keyword">const</span> <span class="keyword">char</span> *types)</span></span>;</div><div class="line"><span class="comment">// 获取整个成员变量列表</span></div><div class="line"><span class="function">Ivar * <span class="title">class_copyIvarList</span><span class="params">(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="methodLists"><a href="#methodLists" class="headerlink" title="methodLists"></a>methodLists</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加方法</span></div><div class="line"><span class="function">BOOL <span class="title">class_addMethod</span><span class="params">(Class cls, SEL name, IMP imp, <span class="keyword">const</span> <span class="keyword">char</span> *types)</span></span>; <span class="comment">//和成员变量不同的是可以为类动态添加方法。如果有同名会返回NO，修改的话需要使用method_setImplementation</span></div><div class="line"><span class="comment">// 获取实例方法</span></div><div class="line"><span class="function">Method <span class="title">class_getInstanceMethod</span><span class="params">(Class cls, SEL name)</span></span>;</div><div class="line"><span class="comment">// 获取类方法</span></div><div class="line"><span class="function">Method <span class="title">class_getClassMethod</span><span class="params">(Class cls, SEL name)</span></span>;</div><div class="line"><span class="comment">// 获取所有方法的数组</span></div><div class="line"><span class="function">Method * <span class="title">class_copyMethodList</span><span class="params">(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span></span>;</div><div class="line"><span class="comment">// 替代方法的实现</span></div><div class="line"><span class="function">IMP <span class="title">class_replaceMethod</span><span class="params">(Class cls, SEL name, IMP imp, <span class="keyword">const</span> <span class="keyword">char</span> *types)</span></span>;</div><div class="line"><span class="comment">// 返回方法的具体实现</span></div><div class="line"><span class="function">IMP <span class="title">class_getMethodImplementation</span><span class="params">(Class cls, SEL name)</span></span>;</div><div class="line"><span class="function">IMP <span class="title">class_getMethodImplementation_stret</span><span class="params">(Class cls, SEL name)</span></span>;</div><div class="line"><span class="comment">// 类实例是否响应指定的selector</span></div><div class="line"><span class="function">BOOL <span class="title">class_respondsToSelector</span><span class="params">(Class cls, SEL sel)</span></span>;</div><div class="line">objc_protocol_list</div><div class="line"><span class="comment">// 添加协议</span></div><div class="line"><span class="function">BOOL <span class="title">class_addProtocol</span><span class="params">(Class cls, Protocol *protocol)</span></span>;</div><div class="line"><span class="comment">// 返回类是否实现指定的协议</span></div><div class="line"><span class="function">BOOL <span class="title">class_conformsToProtocol</span><span class="params">(Class cls, Protocol *protocol)</span></span>;</div><div class="line"><span class="comment">// 返回类实现的协议列表</span></div><div class="line"><span class="function">Protocol * <span class="title">class_copyProtocolList</span><span class="params">(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="动态创建类"><a href="#动态创建类" class="headerlink" title="动态创建类"></a>动态创建类</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个新类和元类</span></div><div class="line"><span class="function">Class <span class="title">objc_allocateClassPair</span><span class="params">(Class superclass, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">size_t</span> extraBytes)</span></span>; <span class="comment">//如果创建的是root class，则superclass为Nil。extraBytes通常为0</span></div><div class="line"><span class="comment">// 销毁一个类及其相关联的类</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_disposeClassPair</span><span class="params">(Class cls)</span></span>; <span class="comment">//在运行中还存在或存在子类实例，就不能够调用这个。</span></div><div class="line"><span class="comment">// 在应用中注册由objc_allocateClassPair创建的类</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_registerClassPair</span><span class="params">(Class cls)</span></span>; <span class="comment">//创建了新类后，然后使用class_addMethod，class_addIvar函数为新类添加方法，实例变量和属性后再调用这个来注册类，再之后就能够用了。</span></div></pre></td></tr></table></figure>
<h2 id="Meta-Class"><a href="#Meta-Class" class="headerlink" title="Meta Class"></a>Meta Class</h2><p>上面我们介绍了怎么在运行时创建一个类：<br>1、为 <code>class pair</code> 创建存储空间 (<code>objc_allocateClassPair</code>)<br>2、为这个类添加所需的 methods 和 ivars<br>3、注册这个类 (<code>objc_registerClassPair</code>)</p>
<p>这里的 <code>class pair</code> 对，其中之一是返回的那个 <code>class</code>，那另一个就是 <code>meta-class</code>。</p>
<p>之前我们说过，类的 <code>isa</code> 指针指向了它的 <code>meta-class</code>，向一个类发送消息时，会在这个类的 <code>meta-class</code>的方法列表中查找。</p>
<p>而 <code>meta-class</code> 也是一个类，<code>meta-class</code> 的 <code>isa</code> 指向基类的 <code>meta-class</code>，以此作为它的所属类。也就是说任何 <code>NSObject</code> 继承体系下的 <code>meta-class</code> 都使用 <code>NSObject</code> 的 <code>meta-class</code> 作为自己的所属类，而基类的 <code>meta-class</code> 的 <code>isa</code> 指针指向它自己，这样就形成了一个完美的闭环。从上节中的 log 日志也可以看出。</p>
<p><img src="/2015/08/08/Objective-C-Runtime-2/class_diagram.png" alt="image"></p>
<h2 id="Object-amp-Runtime"><a href="#Object-amp-Runtime" class="headerlink" title="Object &amp; Runtime"></a>Object &amp; Runtime</h2><p>这些函数是针对创建的实例对象的一系列操作函数。</p>
<h3 id="整个对象操作的函数"><a href="#整个对象操作的函数" class="headerlink" title="整个对象操作的函数"></a>整个对象操作的函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回指定对象的一份拷贝</span></div><div class="line"><span class="function">id <span class="title">object_copy</span><span class="params">(id obj, <span class="keyword">size_t</span> size)</span></span>;</div><div class="line"><span class="comment">// 释放指定对象占用的内存</span></div><div class="line"><span class="function">id <span class="title">object_dispose</span><span class="params">(id obj)</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>备注：在ARC下不可用。</p>
</blockquote>
<h3 id="对象实例变量进行操作的函数"><a href="#对象实例变量进行操作的函数" class="headerlink" title="对象实例变量进行操作的函数"></a>对象实例变量进行操作的函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 修改类实例的实例变量的值</span></div><div class="line"><span class="function">Ivar <span class="title">object_setInstanceVariable</span><span class="params">(id obj, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">void</span> *value)</span></span>;</div><div class="line"><span class="comment">// 获取对象实例变量的值</span></div><div class="line"><span class="function">Ivar <span class="title">object_getInstanceVariable</span><span class="params">(id obj, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">void</span> **outValue)</span></span>;</div><div class="line"><span class="comment">// 返回指向给定对象分配的任何额外字节的指针</span></div><div class="line"><span class="function"><span class="keyword">void</span> * <span class="title">object_getIndexedIvars</span><span class="params">(id obj)</span></span>;</div><div class="line"><span class="comment">// 返回对象中实例变量的值</span></div><div class="line"><span class="function">id <span class="title">object_getIvar</span><span class="params">(id obj, Ivar ivar)</span></span>;</div><div class="line"><span class="comment">// 设置对象中实例变量的值</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">object_setIvar</span> <span class="params">( id obj, Ivar ivar, id value )</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>备注：在ARC下不可用。<br>1.<code>object_setInstanceVariable</code> 内部实现是先通过 <code>class_getInstanceVariable</code> 获取到对应的 <code>Ivar</code>，然后调用 <code>object_setIvar</code> 设置 <code>Ivar</code> 的值。<br>2.<code>object_getInstanceVariable</code> 内部实现是先通过 <code>class_getInstanceVariable</code> 获取 <code>Ivar</code>，然后调用<code>object_getIvar</code> 获取 <code>Ivar</code> 的值，并把值赋值给 <code>outValue</code>，然后返回Ivar。<br>3.在已经知道 <code>Ivar</code> 的情况下，<code>object_getIvar</code> 比 <code>object_getInstanceVariable</code> 更快。相同情况下，<code>object_setIvar</code> 也比 <code>object_setInstanceVariable</code> 快。</p>
</blockquote>
<h3 id="对对象类操作"><a href="#对对象类操作" class="headerlink" title="对对象类操作"></a>对对象类操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回给定对象的类名</span></div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">object_getClassName</span><span class="params">(id obj)</span></span>;</div><div class="line"><span class="comment">// 返回对象的类</span></div><div class="line"><span class="function">Class <span class="title">object_getClass</span><span class="params">(id obj)</span></span>;</div><div class="line"><span class="comment">// 设置对象的类</span></div><div class="line"><span class="function">Class <span class="title">object_setClass</span><span class="params">(id obj, Class cls)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="动态创建对象"><a href="#动态创建对象" class="headerlink" title="动态创建对象"></a>动态创建对象</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建类实例</span></div><div class="line"><span class="function">id <span class="title">class_createInstance</span><span class="params">(Class cls, <span class="keyword">size_t</span> extraBytes)</span></span>; <span class="comment">//会在heap里给类分配内存。这个方法和+alloc方法类似。</span></div><div class="line"><span class="comment">// 在指定位置创建类实例</span></div><div class="line"><span class="function">id <span class="title">objc_constructInstance</span><span class="params">(Class cls, <span class="keyword">void</span> *bytes)</span></span>; </div><div class="line"><span class="comment">// 销毁类实例</span></div><div class="line"><span class="function"><span class="keyword">void</span> * <span class="title">objc_destructInstance</span><span class="params">(id obj)</span></span>; <span class="comment">//不会释放移除任何相关引用</span></div></pre></td></tr></table></figure>
<h3 id="关联对象"><a href="#关联对象" class="headerlink" title="关联对象"></a>关联对象</h3><p>在分类中 <code>@property</code> 并不会自动生成实例变量以及存取方法，所以一般使用关联对象为已经存在的类添加关“属性”。</p>
<p>向下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &quot;CustomClass+Category.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line"></div><div class="line">@implementation CustomClass (Category)</div><div class="line"></div><div class="line">- (NSString *)categoryProperty &#123;</div><div class="line">    return objc_getAssociatedObject(self, _cmd);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setCategoryProperty:(NSString *)categoryProperty &#123;</div><div class="line">    objc_setAssociatedObject(self, @selector(categoryProperty), categoryProperty, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="objc-setAssociatedObject"><a href="#objc-setAssociatedObject" class="headerlink" title="objc_setAssociatedObject"></a>objc_setAssociatedObject</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy) &#123;</div><div class="line">    _object_set_associative_reference(object, (void *)key, value, policy);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void _object_set_associative_reference(id object, void *key, id value, uintptr_t policy) &#123;</div><div class="line">    // retain the new value (if any) outside the lock.</div><div class="line">    ObjcAssociation old_association(0, nil);</div><div class="line">    id new_value = value ? acquireValue(value, policy) : nil;</div><div class="line">    &#123;</div><div class="line">        AssociationsManager manager;</div><div class="line">        AssociationsHashMap &amp;associations(manager.associations());</div><div class="line">        disguised_ptr_t disguised_object = DISGUISE(object);</div><div class="line">        if (new_value) &#123;</div><div class="line">            // break any existing association.</div><div class="line">            AssociationsHashMap::iterator i = associations.find(disguised_object);</div><div class="line">            if (i != associations.end()) &#123;</div><div class="line">                // secondary table exists</div><div class="line">                ObjectAssociationMap *refs = i-&gt;second;</div><div class="line">                ObjectAssociationMap::iterator j = refs-&gt;find(key);</div><div class="line">                if (j != refs-&gt;end()) &#123;</div><div class="line">                    old_association = j-&gt;second;</div><div class="line">                    j-&gt;second = ObjcAssociation(policy, new_value);</div><div class="line">                &#125; else &#123;</div><div class="line">                    (*refs)[key] = ObjcAssociation(policy, new_value);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                // create the new association (first time).</div><div class="line">                ObjectAssociationMap *refs = new ObjectAssociationMap;</div><div class="line">                associations[disguised_object] = refs;</div><div class="line">                (*refs)[key] = ObjcAssociation(policy, new_value);</div><div class="line">                object-&gt;setHasAssociatedObjects();</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // setting the association to nil breaks the association.</div><div class="line">            AssociationsHashMap::iterator i = associations.find(disguised_object);</div><div class="line">            if (i !=  associations.end()) &#123;</div><div class="line">                ObjectAssociationMap *refs = i-&gt;second;</div><div class="line">                ObjectAssociationMap::iterator j = refs-&gt;find(key);</div><div class="line">                if (j != refs-&gt;end()) &#123;</div><div class="line">                    old_association = j-&gt;second;</div><div class="line">                    refs-&gt;erase(j);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // release the old value (outside of the lock).</div><div class="line">    if (old_association.hasValue()) ReleaseValue()(old_association);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="objc-getAssociatedObject"><a href="#objc-getAssociatedObject" class="headerlink" title="objc_getAssociatedObject"></a>objc_getAssociatedObject</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">id objc_getAssociatedObject(id object, const void *key) &#123;</div><div class="line">    return _object_get_associative_reference(object, (void *)key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">id _object_get_associative_reference(id object, void *key) &#123;</div><div class="line">    id value = nil;</div><div class="line">    uintptr_t policy = OBJC_ASSOCIATION_ASSIGN;</div><div class="line">    &#123;</div><div class="line">        AssociationsManager manager;</div><div class="line">        AssociationsHashMap &amp;associations(manager.associations());</div><div class="line">        disguised_ptr_t disguised_object = DISGUISE(object);</div><div class="line">        AssociationsHashMap::iterator i = associations.find(disguised_object);</div><div class="line">        if (i != associations.end()) &#123;</div><div class="line">            ObjectAssociationMap *refs = i-&gt;second;</div><div class="line">            ObjectAssociationMap::iterator j = refs-&gt;find(key);</div><div class="line">            if (j != refs-&gt;end()) &#123;</div><div class="line">                ObjcAssociation &amp;entry = j-&gt;second;</div><div class="line">                value = entry.value();</div><div class="line">                policy = entry.policy();</div><div class="line">                if (policy &amp; OBJC_ASSOCIATION_GETTER_RETAIN) &#123;</div><div class="line">                    objc_retain(value);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (value &amp;&amp; (policy &amp; OBJC_ASSOCIATION_GETTER_AUTORELEASE)) &#123;</div><div class="line">        objc_autorelease(value);</div><div class="line">    &#125;</div><div class="line">    return value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="objc-removeAssociatedObjects"><a href="#objc-removeAssociatedObjects" class="headerlink" title="objc_removeAssociatedObjects"></a>objc_removeAssociatedObjects</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">void objc_removeAssociatedObjects(id object) </div><div class="line">&#123;</div><div class="line">    if (object &amp;&amp; object-&gt;hasAssociatedObjects()) &#123;</div><div class="line">        _object_remove_assocations(object);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void _object_remove_assocations(id object) &#123;</div><div class="line">    vector&lt; ObjcAssociation,ObjcAllocator&lt;ObjcAssociation&gt; &gt; elements;</div><div class="line">    &#123;</div><div class="line">        AssociationsManager manager;</div><div class="line">        AssociationsHashMap &amp;associations(manager.associations());</div><div class="line">        if (associations.size() == 0) return;</div><div class="line">        disguised_ptr_t disguised_object = DISGUISE(object);</div><div class="line">        AssociationsHashMap::iterator i = associations.find(disguised_object);</div><div class="line">        if (i != associations.end()) &#123;</div><div class="line">            // copy all of the associations that need to be removed.</div><div class="line">            ObjectAssociationMap *refs = i-&gt;second;</div><div class="line">            for (ObjectAssociationMap::iterator j = refs-&gt;begin(), end = refs-&gt;end(); j != end; ++j) &#123;</div><div class="line">                elements.push_back(j-&gt;second);</div><div class="line">            &#125;</div><div class="line">            // remove the secondary table.</div><div class="line">            delete refs;</div><div class="line">            associations.erase(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // the calls to releaseValue() happen outside of the lock.</div><div class="line">    for_each(elements.begin(), elements.end(), ReleaseValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>关联对象其实就是 <code>ObjcAssociation</code> 对象。<br>关联对象由 <code>AssociationsManager</code> 管理并在 <code>AssociationsHashMap</code> 存储。<br>对象的指针以及其对应 <code>ObjectAssociationMap</code> 以键值对的形式存储在 <code>AssociationsHashMap</code> 中。<br><code>ObjectAssociationMap</code> 则是用于存储关联对象的数据结构。<br>每一个对象都有一个标记位 <code>has_assoc</code> 指示对象是否含有关联对象。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://draveness.me/load" target="_blank" rel="external">https://draveness.me/load</a><br><a href="https://draveness.me/initialize" target="_blank" rel="external">https://draveness.me/initialize</a><br><a href="https://draveness.me/object-init" target="_blank" rel="external">https://draveness.me/object-init</a><br><a href="https://draveness.me/ao" target="_blank" rel="external">https://draveness.me/ao</a><br><a href="https://ming1016.github.io/2015/04/01/objc-runtime/" target="_blank" rel="external">https://ming1016.github.io/2015/04/01/objc-runtime/</a></p>
<h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><p>2016.04.30<br>2016.08.10</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;上文讲了 Runtime 中的基本数据结构，在此基础上，我们继续来研究类与对象相关的 Runtime 函数。Runtime 有很多的函数可以操作类和对象，类相关的是 class&lt;em&gt; 为前缀，对象相关操作是 objc&lt;/em&gt; 或 object_ 为前缀。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://mlijin9011.github.io/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Runtime - 基础结构</title>
    <link href="http://mlijin9011.github.io/2015/08/01/Objective-C-Runtime-1/"/>
    <id>http://mlijin9011.github.io/2015/08/01/Objective-C-Runtime-1/</id>
    <published>2015-08-01T14:12:18.000Z</published>
    <updated>2018-04-06T07:33:18.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Objective-C 在 C 语言的基础上，借鉴了 Smalltalk 的面向对象与消息机制，扩展了 C 语言，这个扩展的核心是一个用 C 和 编译语言 写的 Runtime 库，它是 Objective-C 面向对象和动态机制的基石。Objective-C Runtime 使得 C 具有了面向对象能力，在程序运行时创建，检查，修改类、对象和它们的方法。理解 Objective-C 的 Runtime 机制可以帮我们更好的了解这个语言，适当的时候还能对语言进行扩展，从系统层面解决项目中的一些设计或技术问题。了解 Runtime ，要先了解它的基础 - 基础结构。<a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="external">这里</a> 可以下载到 Runtime 的源码来研究。</p>
<a id="more"></a>
<h2 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h2><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><h4 id="objc-class"><a href="#objc-class" class="headerlink" title="objc_class"></a>objc_class</h4><p>在 Objective-C 中的类在 Runtime 中是用 <code>Class</code> 来表示的，<code>Class</code>  是一个 <code>struct objc_class</code> 类型的指针，<code>struct objc_class</code> 才是保存真正数据的地方，也就是说任何一个类都是用 <code>objc_class</code> 这样一个结构体来描述的，其定义为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// An opaque type that represents an Objective-C class.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_class &#123;</div><div class="line">    Class isa;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !__OBJC2__</span></div><div class="line">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div><div class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></div></pre></td></tr></table></figure>
<blockquote>
<p>具体解释一下：</p>
<p><strong>isa</strong>：对象的 isa 指针指向它的类，而在 OC 中，类本身也是一个对象，这个对象的 Class 里面也有一个 isa 指针，指向 <code>Meta Class</code> （元类，这个后面再具体介绍）</p>
<p><strong>super_class</strong>：指向该类的父类，如果该类已经是最顶层的根类 (如 NSObject 或 NSProxy)，则 super_class 为 NULL</p>
<p><strong>name</strong>：类名</p>
<p><strong>version</strong>：类的版本信息，默认为 0，这对于对象的序列化非常有用，它可是让我们识别出不同类定义版本中实例变量布局的改变</p>
<p><strong>info</strong>：类信息，运行时使用的一些位标识。</p>
<p><strong>instance_size</strong>：该类的实例变量大小</p>
<p><strong>ivars</strong>：该类的成员变量链表，NULL代表没有实例变量，不包括父类的变量</p>
<p><strong>methodLists</strong>：该类的方法定义的链表</p>
<p><strong>cache</strong>：该类的方法缓存，后面具体讲 cache 的作用。</p>
<p><strong>protocols</strong>：该类的协议链表</p>
</blockquote>
<p>可见，我们平常调用的 <code>[NSObject class]</code> 方法就是返回这样一个指向其类结构的指针。</p>
<h3 id="id-amp-Object"><a href="#id-amp-Object" class="headerlink" title="id &amp; Object"></a>id &amp; Object</h3><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>在 Objective-C 中 id 表示通用对象类型，可以转换为任何数据类型，即 id类型的变量可以存放任何数据类型的对象。id 的定义为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// A pointer to an instance of a class.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object *id;</div></pre></td></tr></table></figure>
<p>id，是一个 <code>objc_object</code> 结构类型的指针，它的存在可以让我们实现类似于C++ 中泛型的一些操作。该类型的对象可以转换为任何一种对象，有点类似于C语言中void *指针类型的作用。</p>
<h4 id="objc-object"><a href="#objc-object" class="headerlink" title="objc_object"></a>objc_object</h4><p><code>struct objc_object</code> 的声明如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Represents an instance of a class.</span></div><div class="line"><span class="keyword">struct</span> objc_object &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>可以看到，<code>struct objc_object</code> 中有一个指向其类的 isa 指针。向一个对象发送消息时，Runtime 库会根据对象 object 的 isa 指针找到 object 所属于的类，然后在类的方法列表以及父类方法列表寻找对应的方法运行。</p>
<p>可以看出 <code>objc_object</code> 的第一个成员是 <code>Class</code> 类型的 isa 指针，而 <code>objc_class</code> 的第一个元素也是一个 <code>Class</code> 类型的 isa 指针，因为第一个元素相同，也就意味着可以互相 cast 而不损失信息。这个定义表明：任何以一个指向 <code>Class</code> 类型的指针作为首个成员的数据结构都可以被认为是一个<code>objc_object</code>，也就可以解释，为什么说 OC 中类本身也是一个对象。</p>
<h4 id="id-与-NSObject"><a href="#id-与-NSObject" class="headerlink" title="id 与 NSObject"></a>id 与 NSObject</h4><p><code>NSObject</code> 的定义：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface NSObject &lt;NSObject&gt; &#123;</div><div class="line">    Class    isa;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样， <code>NSObject</code> 的第一个成员是 <code>Class</code> 类型的 isa 指针，而 id 是一个指向 <code>objc_object</code> 结构体的指针，该结构体只有一个成员 isa，所以任何继承自 <code>NSObject</code> 的类对象都可以用 <code>id</code> 来指代。</p>
<p>可见，每一个基于 NSObject 的类的实例对象都有一个指向该对象的类结构的指针，叫做 isa，通过该指针，对象可以访问它对应的类以及相应的父类。</p>
<h3 id="Ivar"><a href="#Ivar" class="headerlink" title="Ivar"></a>Ivar</h3><h4 id="objc-ivar"><a href="#objc-ivar" class="headerlink" title="objc_ivar"></a>objc_ivar</h4><p>在 Objective-C 中的实例变量在 Runtime 中是用 <code>Ivar</code> 来表示的，其定义为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// An opaque type that represents an instance variable.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_ivar *Ivar;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_ivar &#123;</div><div class="line">    <span class="keyword">char</span> *ivar_name                                          OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">char</span> *ivar_type                                          OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">int</span> ivar_offset                                          OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></div><div class="line">    <span class="keyword">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;                                                            OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>ivar_name</strong>：变量名<br><strong>ivar_type</strong>：变量类型<br><strong>ivar_offset</strong>：实例结构的基地址偏移字节</p>
</blockquote>
<p>可以看出 <code>Ivar</code> 是一个指向 <code>struct objc_ivar</code> 类型的指针，<code>Ivar</code> 指针地址是根据 class 结构体的地址加上基地址偏移字节 <code>ivar_offset</code> 得到的。</p>
<h4 id="objc-ivar-list"><a href="#objc-ivar-list" class="headerlink" title="objc_ivar_list"></a>objc_ivar_list</h4><p>在 <code>objc_class</code> 中，所有的实例变量（成员变量、属性）的信息是放在链表 ivars 中的，ivars 是一个指向 <code>struct objc_ivar_list</code> 类型的指针，<code>objc_ivar_list</code> 结构体存储了 <code>objc_ivar</code> 的数组列表，<code>struct objc_ivar_list</code> 的声明如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_ivar_list &#123;</div><div class="line">    <span class="keyword">int</span> ivar_count                                           OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></div><div class="line">    <span class="keyword">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="comment">/* variable length structure */</span></div><div class="line">    <span class="keyword">struct</span> objc_ivar ivar_list[<span class="number">1</span>]                            OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><h4 id="objc-method"><a href="#objc-method" class="headerlink" title="objc_method"></a>objc_method</h4><p>Objective-C 中的方法在 Runtime 中是用 <code>Method</code> 来表示的，其定义为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// An opaque type that represents a method in a class definition.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_method *Method;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_method &#123;</div><div class="line">    SEL method_name                                          OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">char</span> *method_types                                       OBJC2_UNAVAILABLE;</div><div class="line">    IMP method_imp                                           OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>method_name</strong>：表示方法名称<br><strong>method_types</strong>：方法的参数类型<br><strong>method_imp</strong>：指向该方法的具体实现的函数指针</p>
</blockquote>
<h4 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h4><p><code>SEL</code> 表示该方法的名字/签名，定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// An opaque type that represents a method selector.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_selector     *SEL;</div></pre></td></tr></table></figure>
<p>没有找到 <code>struct objc_selector</code> 的定义，从一些博客文章上看到过可以将 <code>SEL</code> 理解为一个 <code>char*</code> 指针，可以猜测到 <code>struct objc_selector</code> 的定义为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_selector  &#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">64</span> or ...];</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>只要遵循如上原型，就可以将 <code>SEL</code> 理解为一个 <code>char*</code>。</p>
<h4 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h4><p><code>IMP</code> 是一个函数指针，定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// A pointer to the function of a method implementation. </span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">id</span> <span class="params">(*IMP)</span><span class="params">(id, SEL, ...)</span></span>;</div></pre></td></tr></table></figure>
<p>这个被指向的函数包含一个接收消息的对象（id 类型）, 一个调用方法的名称（SEL 类型），以及不定个数的方法参数，并返回一个 id。也就是说 IMP 是消息最终调用的执行代码，是方法真正的实现代码。我们可以像在Ｃ语言里面一样使用这个函数指针。</p>
<p>NSObject 类中的方法 <code>- (IMP)methodForSelector:(SEL)aSelector</code> 的作用就是可以获取指向方法实现 IMP 的指针，返回的指针和赋值的变量类型必须完全一致，包括方法参数类型和返回值类型。</p>
<h4 id="objc-method-list"><a href="#objc-method-list" class="headerlink" title="objc_method_list"></a>objc_method_list</h4><p><code>objc_class</code> 中的方法列表 <code>methodLists</code> 是一个二级指针，一个指向结构体 <code>objc_method_list</code> 的二级指针，指针变量当中存的是一个地址，你可以改变这个地址的值从而改变最终指向的变量。动态的修改 <code>*methodLists</code> 的值来添加方法，这也是实现 category 的原理。</p>
<p><code>struct objc_method_list</code> 的声明如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_method_list &#123;</div><div class="line">    <span class="keyword">struct</span> objc_method_list *obsolete                        OBJC2_UNAVAILABLE;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> method_count                                         OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></div><div class="line">    <span class="keyword">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="comment">/* variable length structure */</span></div><div class="line">    <span class="keyword">struct</span> objc_method method_list[<span class="number">1</span>]                        OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h3><h4 id="objc-category"><a href="#objc-category" class="headerlink" title="objc_category"></a>objc_category</h4><p>Runtime 中 <code>Category</code> 是一个指向分类的结构体的指针，定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// An opaque type that represents a category.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_category *Category;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_category &#123;</div><div class="line">    <span class="keyword">char</span> *category_name                                      OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">char</span> *class_name                                         OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_method_list *instance_methods                OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_method_list *class_methods                   OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>category_name</strong>：分类名<br><strong>class_name</strong>：分类所属的类名<br><strong>instance_methods</strong>：实例方法列表<br><strong>class_methods</strong>：类方法列表，Meta Class方法列表的子集<br><strong>protocols</strong>：分类所遵循的协议列表</p>
</blockquote>
<p>可以看出，<code>Catagory</code> 可以动态地为已经存在的类添加新的实例方法，类方法，协议。后面再单独介绍 <code>Category</code> 里面的方法加载过程。</p>
<h3 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h3><h4 id="Protocol-1"><a href="#Protocol-1" class="headerlink" title="Protocol"></a>Protocol</h4><p>Runtime 中 <code>Protocol</code> 其实就是一个对象结构体，定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object Protocol</div></pre></td></tr></table></figure>
<h4 id="objc-protocol-list"><a href="#objc-protocol-list" class="headerlink" title="objc_protocol_list"></a>objc_protocol_list</h4><p>在 <code>objc_class</code> 中，所有实现的协议是放在链表 protocols 中的，protocols 是一个指向 <code>struct objc_protocol_list</code> 类型的指针，<code>objc_protocol_list</code> 结构体存储了 <code>Protocol</code> 的数组列表，<code>struct objc_protocol_list</code> 的声明如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_protocol_list &#123;</div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *next;</div><div class="line">    <span class="keyword">long</span> count;</div><div class="line">    Protocol *<span class="built_in">list</span>[<span class="number">1</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="objc-property-t"><a href="#objc-property-t" class="headerlink" title="objc_property_t"></a>objc_property_t</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// An opaque type that represents an Objective-C declared property.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_property *<span class="keyword">objc_property_t</span>;</div></pre></td></tr></table></figure>
<p>没有找到 <code>struct objc_property</code> 的定义，但看了下 <code>objc_runtime-new</code><br> 中有个 <code>struct property_t</code> 的定义：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> <span class="keyword">property_t</span> &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *attributes;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><h4 id="objc-cache"><a href="#objc-cache" class="headerlink" title="objc_cache"></a>objc_cache</h4><p>Runtime 中的 <code>Cache</code> 定义为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_cache *Cache                             OBJC2_UNAVAILABLE;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_cache &#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mask <span class="comment">/* total = mask + 1 */</span>                 OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> occupied                                    OBJC2_UNAVAILABLE;</div><div class="line">    Method buckets[<span class="number">1</span>]                                        OBJC2_UNAVAILABLE;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>objc_class</code> 结构体中的 cache 字段用于缓存调用过的 method，cache 指针指向 <code>objc_cache</code> 结构体。</p>
<p>当对象接到一个消息时，会根据 isa 指针查找能够响应这个消息的对象，这时会在 methodLists 中遍历，在实际使用中，这个对象只有一部分方法是常用的，很多方法其实很少用或者根本用不上，如果每次消息来时，我们都是在 methodLists 中遍历一遍，性能会很差。cache 的作用就是在每次调用过一个方法后，把这个方法缓存到 cache 列表中，下次调用的时候 Runtime 就会优先去 cache 中查找，如果 cache 没有，才去methodLists 中查找方法，找到后再放到 cache 中，下次使用时就会直接在 cache 中找到，这样，对于那些经常用到的方法的调用，提高了调用的效率。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要从 <code>objc_class</code> 开始，围绕 <code>objc_class</code> 介绍了 Runtime 运行时中的一些最基本的数据结构，通过这些数据结构，我们可以大概了解 Objective-C 底层面向对象实现的一些信息。下文继续讲 Runtime 中的类与对象，MetaClass 等相关的内容。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/whyandinside/archive/2013/02/26/2933552.html" target="_blank" rel="external">http://www.cnblogs.com/whyandinside/archive/2013/02/26/2933552.html</a></p>
<p><a href="https://ming1016.github.io/2015/04/01/objc-runtime/" target="_blank" rel="external">https://ming1016.github.io/2015/04/01/objc-runtime/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Objective-C 在 C 语言的基础上，借鉴了 Smalltalk 的面向对象与消息机制，扩展了 C 语言，这个扩展的核心是一个用 C 和 编译语言 写的 Runtime 库，它是 Objective-C 面向对象和动态机制的基石。Objective-C Runtime 使得 C 具有了面向对象能力，在程序运行时创建，检查，修改类、对象和它们的方法。理解 Objective-C 的 Runtime 机制可以帮我们更好的了解这个语言，适当的时候还能对语言进行扩展，从系统层面解决项目中的一些设计或技术问题。了解 Runtime ，要先了解它的基础 - 基础结构。&lt;a href=&quot;https://opensource.apple.com/tarballs/objc4/&quot;&gt;这里&lt;/a&gt; 可以下载到 Runtime 的源码来研究。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://mlijin9011.github.io/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Git 使用总结 (持续更新)</title>
    <link href="http://mlijin9011.github.io/2015/07/26/Git-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://mlijin9011.github.io/2015/07/26/Git-使用总结/</id>
    <published>2015-07-26T11:22:52.000Z</published>
    <updated>2018-03-18T11:56:31.717Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个开发人员，Git 在我们工作中不可或缺，但是很多人都并没有真正了解 Git 强大的功能，本文是做一个 Git 常用功能的积累。</p>
<a id="more"></a>
<h2 id="开始-Git"><a href="#开始-Git" class="headerlink" title="开始 Git"></a>开始 Git</h2><h3 id="Git-的简单介绍"><a href="#Git-的简单介绍" class="headerlink" title="Git 的简单介绍"></a>Git 的简单介绍</h3><h4 id="4个区"><a href="#4个区" class="headerlink" title="4个区"></a>4个区</h4><blockquote>
<p>工作区 (Working Area)<br>暂存区 (Stage)<br>本地仓库 (Local Repository)<br>远程仓库 (Remote Repository)</p>
</blockquote>
<p>工作区是从远端某个版本中提取出来的文件，放在磁盘上供你使用或修改；</p>
<p>暂存区保存了下次将提交的文件列表信息，有时候也被称作‘索引’；</p>
<p>Git 仓库是 Git 用来保存项目的元数据和对象数据库的地方。</p>
<h4 id="5种状态"><a href="#5种状态" class="headerlink" title="5种状态"></a>5种状态</h4><p>以上4个区，进入每一个区成功之后会产生一个状态，再加上最初始的一个状态，一共是5种状态。以下我们把这5种状态分别命名为：</p>
<blockquote>
<p>未修改(Origin)<br>已修改(Modified)<br>已暂存(Staged)<br>已提交(Committed)<br>已推送(Pushed)</p>
</blockquote>
<p>未修改表示与远程仓库相同；</p>
<p>已修改表示修改了文件，但还没保存到数据库中； </p>
<p>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交中；</p>
<p>已提交表示数据已经安全的保存在本地数据库中；</p>
<p>已推送表示已经推送到远程仓库。</p>
<h4 id="基本-Git-工作流程"><a href="#基本-Git-工作流程" class="headerlink" title="基本 Git 工作流程"></a>基本 Git 工作流程</h4><p>在工作目录中修改文件。</p>
<p>暂存文件，将文件的快照放入暂存区域。</p>
<p>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</p>
<h3 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h3><p>一些简单常用的大家都知道的命令就不记录了：clone, add, commit, pull, push 等</p>
<h4 id="修改commit"><a href="#修改commit" class="headerlink" title="修改commit"></a><strong>修改commit</strong></h4><p>大家可能都有过有时候不小心，commit 提交错的情况，可以这么解决：</p>
<p>1.如果还没 push 到远端 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit --amend</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 编辑了 README.md 和 README_ZH.md</div><div class="line">git add README.md</div><div class="line">git commit</div><div class="line"></div><div class="line"># 意识到你忘记添加 README_ZH.md 的更改</div><div class="line">git add README_ZH.md</div><div class="line">git commit --amend --no-edit</div></pre></td></tr></table></figure>
<p>编辑器会弹出上一次提交的信息，加入 <code>--no-edit</code> 标记会修复提交但不修改提交信息。需要的话你也可以修改，不然的话就像往常一样保存并关闭文件。完整的提交会替换之前不完整的提交，看上去就像我们在同一个快照中提交了 README.md 和 README_ZH.md。</p>
<p>如果你的缓存区没有文件时，运行这个命令可以用来编辑上次提交的提交信息，而不会更改快照。</p>
<p>2.如果已经push到了远端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rebase -i &lt;base&gt;</div></pre></td></tr></table></figure>
<p>将当前分支 rebase 到 base，它会打开一个编辑器，你可为每个将要 rebase 的提交输入命令。这些命令决定了每个提交将会怎样被转移到新的基上去。你还可以对这些提交进行排序。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 新的功能分支</div><div class="line">$ git checkout -b feature master</div><div class="line"># 编辑文件</div><div class="line">$ git commit -a -m &quot;Start developing a featureA&quot;</div><div class="line"># 编辑更多文件</div><div class="line">$ git commit -a -m &quot;Fix something from the previous commit&quot;</div><div class="line"></div><div class="line"># 直接在 master 上添加文件</div><div class="line">$ git checkout master</div><div class="line"># 编辑文件</div><div class="line">$ git commit -a -m &quot;FeatureB&quot;</div><div class="line"></div><div class="line"># 开始交互式 rebase</div><div class="line">$ git checkout feature</div><div class="line">$ git rebase -i master</div></pre></td></tr></table></figure>
<p>最后的那个命令会打开一个编辑器，包含 feature 的两个提交，和一些指示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pick 32618c4 Start developing a featureA</div><div class="line">pick 62eed47 Fix something from the previous commit</div></pre></td></tr></table></figure>
<p>如果第二个提交修复了第一个提交中的小问题，你可以用 fixup 命令把它们合到一个提交中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pick 32618c4 Start developing a featureA</div><div class="line">fixup 62eed47 Fix something from the previous commit</div></pre></td></tr></table></figure>
<p>保存后关闭文件，Git 会根据你的指令来执行 rebase。</p>
<h4 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a><strong>代码回滚</strong></h4><p>还有一种常见的情况就是，代码已经提交后，发现此代码有问题，想回滚此提交。</p>
<p>1.如果还没 push 到远端</p>
<p>git reset (将一个分支的末端指向另一个提交)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD</div><div class="line">$ git reset --soft HEAD (缓存区和工作目录都不会被改变)</div><div class="line">$ git reset --mixed HEAD (默认选项。缓存区和你指定的提交同步，但工作目录不受影响)</div><div class="line">$ git reset --hard HEAD (缓存区和工作目录都同步到你指定的提交)</div></pre></td></tr></table></figure>
<p>HEAD 也可以传一个提交的id。</p>
<p>2.如果已经push到了远端</p>
<p>git revert (撤销一个提交的同时会创建一个新的提交)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git revert HEAD~2 (撤销倒数第二个提交)</div></pre></td></tr></table></figure>
<h4 id="分支间合并提交"><a href="#分支间合并提交" class="headerlink" title="分支间合并提交"></a><strong>分支间合并提交</strong></h4><p>将一个分支的更改并入另一个分支，主要有三种方式，如果是想把 feature 分支全部的 commit 内容都并入主分支，可以用前两种方法，如果只需要并入置顶的 commit 可以用第三种方法。</p>
<p>1.git merge</p>
<p>最常用的是 git merge，例如，如果 master 中新的提交和你的工作是相关的。为了将新的提交并入你的分支，你可以直接执行下面这些命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout feature</div><div class="line">$ git merge master</div></pre></td></tr></table></figure>
<p>或直接压缩成一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge master feature</div></pre></td></tr></table></figure>
<p>优点：merge 是一个安全的操作，现有的分支不会被更改，避免了 rebase 潜在的缺点。</p>
<p>缺点：每次合并上游更改时 feature 分支都会引入一个外来的合并提交。如果 master 非常活跃的话，这或多或少会污染你的分支历史。</p>
<p>2.git rebase</p>
<p>你可以像下面这样将 master 分支并入 feature 分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout feature</div><div class="line">$ git rebase master</div></pre></td></tr></table></figure>
<p>把整个 feature 分支移动到 master 分支的后面，有效地把所有 master 分支上新的提交并入过来。</p>
<p>优点：项目历史会非常整洁。首先，它不像 git merge 那样引入不必要的合并提交。其次，rebase 导致最后的项目历史呈现出完美的线性，更容易使用 git log、git bisect 和 gitk 来查看项目历史。</p>
<p>缺点：如果你违反了 rebase 黄金法则（绝不在公共的分支上使用它），重写项目历史可能会给你的协作工作流带来灾难性的影响。此外，rebase 不会有合并提交中附带的信息，看不到 feature 分支中并入了上游的哪些更改。</p>
<p>3.git cherry-pick</p>
<p>可以选择某一个分支中的一个或几个 commit 来进行操作。</p>
<p>例如，你在 develop 分支拉出了一个 release 分支打算发版，但是 release 存在一个 bug，你在 release 分支修复完发版后，<br>想把修复这个 bug 的 commit 再合并回 develop 分支，就可以使用 cherry-pick。</p>
<blockquote>
<p>注意：当执行完 cherry-pick 以后，将会生成一个新的提交；这个新的提交的哈希值和原来的不同，但标识名一样；</p>
</blockquote>
<p>命令集合:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 单独合并一个提交</div><div class="line">$ git cherry-pick &lt;commit id&gt; </div><div class="line"></div><div class="line"># 单独合并一个提交，保留原提交者信息</div><div class="line">$ git cherry-pick -x &lt;commit id&gt; </div><div class="line"></div><div class="line"># 把 &lt;start-commit-id&gt; 到 &lt;end-commit-id&gt; 之间 (左开右闭，不包含 start-commit-id)的提交 cherry-pick 到当前分支</div><div class="line">$ git cherry-pick &lt;start-commit-id&gt;..&lt;end-commit-id&gt; </div><div class="line"></div><div class="line"># 把 &lt;start-commit-id&gt; 到 &lt;end-commit-id&gt; 之间 (闭区间，包含 start-commit-id)的提交 cherry-pick 到当前分支</div><div class="line">$ git cherry-pick &lt;start-commit-id&gt;^..&lt;end-commit-id&gt;</div></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="https://github.com/geeeeeeeeek/git-recipes/wiki" target="_blank" rel="external">git-recipes</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="external">图解 Git</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个开发人员，Git 在我们工作中不可或缺，但是很多人都并没有真正了解 Git 强大的功能，本文是做一个 Git 常用功能的积累。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="http://mlijin9011.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Mac生成SSHKey</title>
    <link href="http://mlijin9011.github.io/2015/07/18/Mac%E7%94%9F%E6%88%90SSHKey/"/>
    <id>http://mlijin9011.github.io/2015/07/18/Mac生成SSHKey/</id>
    <published>2015-07-18T04:16:23.000Z</published>
    <updated>2018-03-16T11:19:18.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-SSH-key"><a href="#关于-SSH-key" class="headerlink" title="关于 SSH key"></a>关于 SSH key</h2><p>使用 SSH 协议，可以连接和验证远程服务器和服务。大家都知道 GitHub 克隆代码可以通过两种方式，SSH key 或者 HTTPS。使用 SSH key 时，您可以直接通过 SSH key 连接到 GitHub，而无需在每次访问时提供用户名或密码。</p>
<a id="more"></a>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><pre><code>1. 检查 SSH key 是否存在
2. 生成新的 SSH key
3. 将 SSH key 添加到 GitHub 中
</code></pre><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>在生成 SSH key 之前，您可以检查是否有任何现有的 SSH key。输入下面的命令，如果有文件 id_rsa.pub 或 id_dsa.pub，则直接进入步骤3将 SSH key 添加到 GitHub 中，否则进入第二步生成 SSH key</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>
<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>如果检查后还没有 SSH key，则要生成一个新的 SSH key 并将其添加到 SSH 代理中</p>
<p>1.生成新的 SSH key</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>
<p>执行上面的命令后会先让你选择路径，可以直接回车即使用默认路径，然后会提示输入密码，也可以直接回车不设置密码。</p>
<p>2.添加到 SSH 代理中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>要配置 GitHub 帐户以使用新的（或现有的）SSH key，需要将其添加到你的 GitHub 帐户中。</p>
<p>1.复制 SSH key 到剪贴板</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pbcopy &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>2.添加到 GitHub</p>
<p>进入 GitHub 个人设置中，把复制的 SSH key 添加的个人 SSH key 管理设置中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于-SSH-key&quot;&gt;&lt;a href=&quot;#关于-SSH-key&quot; class=&quot;headerlink&quot; title=&quot;关于 SSH key&quot;&gt;&lt;/a&gt;关于 SSH key&lt;/h2&gt;&lt;p&gt;使用 SSH 协议，可以连接和验证远程服务器和服务。大家都知道 GitHub 克隆代码可以通过两种方式，SSH key 或者 HTTPS。使用 SSH key 时，您可以直接通过 SSH key 连接到 GitHub，而无需在每次访问时提供用户名或密码。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac" scheme="http://mlijin9011.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>iOS大神博客</title>
    <link href="http://mlijin9011.github.io/2015/07/07/iOS%E5%A4%A7%E7%A5%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>http://mlijin9011.github.io/2015/07/07/iOS大神博客/</id>
    <published>2015-07-07T12:33:53.000Z</published>
    <updated>2018-03-18T11:46:51.507Z</updated>
    
    <content type="html"><![CDATA[<p>iOS从入门到高级，经常阅读各位大神的博客，学习大神的思维和研究的东西，让自己更接近大神，我搜罗了一些知名博客，值得关注阅读。</p>
<a id="more"></a>
<h2 id="博客列表"><a href="#博客列表" class="headerlink" title="博客列表"></a>博客列表</h2><p><a href="http://onevcat.com" target="_blank" rel="external"><strong>OneV’s Den</strong></a></p>
<p><a href="http://blog.devtang.com" target="_blank" rel="external"><strong>唐巧的技术博客</strong></a></p>
<p><a href="http://blog.ibireme.com" target="_blank" rel="external"><strong>一只魔法师的工坊</strong></a></p>
<p><a href="http://nshipster.cn" target="_blank" rel="external"><strong>NSHipster</strong></a><br>NSHipster 关注被忽略的 Objective-C、Swift 和 Cocoa 特性。每周更新。</p>
<p><a href="http://kittenyang.com" target="_blank" rel="external"><strong>Kitten Yong的博客</strong></a><br>对iOS中的动画有深入研究。</p>
<p><a href="http://limboy.me" target="_blank" rel="external"><strong>Limboy‘s HQ</strong></a><br>李忠关于 RAC 、组件化的文章流传很广。</p>
<p><a href="http://blog.sunnyxx.com" target="_blank" rel="external"><strong>sunnyxx的技术博客</strong></a></p>
<p><a href="http://blog.cnbang.net" target="_blank" rel="external"><strong>bang’s blog</strong></a></p>
<p><a href="http://blog.leichunfeng.com" target="_blank" rel="external"><strong>雷纯锋的技术博客</strong></a></p>
<p><a href="http://yulingtianxia.com" target="_blank" rel="external"><strong>玉令天下的Blog</strong></a><br>腾讯杨萧玉的博客，底层细节能深入到汇编的实现。</p>
<p><a href="http://casatwy.com" target="_blank" rel="external"><strong>Casa Taloyum</strong></a><br>Casa 对架构有很深的理解。</p>
<p><a href="https://draveness.me/tag/iOS/" target="_blank" rel="external"><strong>Draveness’s Blog</strong></a></p>
<p><a href="http://zhowkev.in" target="_blank" rel="external"><strong>Kevin Blog</strong></a></p>
<p><a href="http://www.xiangwangfeng.com" target="_blank" rel="external"><strong>阿毛的蛋疼地</strong></a></p>
<p><a href="http://imtx.me" target="_blank" rel="external"><strong>I’m TualatriX</strong></a></p>
<p><a href="http://blog.nswebfrog.com/" target="_blank" rel="external"><strong>webfrogs</strong></a></p>
<p><a href="http://joeyio.com" target="_blank" rel="external"><strong>代码手工艺人</strong></a></p>
<p><a href="http://gracelancy.com" target="_blank" rel="external"><strong>Lancy’s Blog</strong></a></p>
<p><a href="http://wangzz.github.io" target="_blank" rel="external"><strong>王中周的技术博客</strong></a></p>
<p><a href="http://cnblogs.com/biosli" target="_blank" rel="external"><strong>摇滚诗人</strong></a></p>
<p><a href="http://msching.github.io" target="_blank" rel="external"><strong>码农人生</strong></a></p>
<p><a href="http://www.cnblogs.com/kenshincui" target="_blank" rel="external"><strong>Kenshin Cui’s Blog</strong></a></p>
<p><a href="http://www.tanhao.me" target="_blank" rel="external"><strong>老谭笔记</strong></a></p>
<p><a href="http://www.iosxxx.com" target="_blank" rel="external"><strong>向晨宇的技术博客</strong></a></p>
<p><a href="http://www.desgard.com" target="_blank" rel="external"><strong>瓜地</strong></a></p>
<p><a href="https://ming1016.github.io" target="_blank" rel="external"><strong>星光社</strong></a></p>
<p><a href="http://mrpeak.cn" target="_blank" rel="external"><strong>MrPeak杂货铺</strong></a></p>
<p><a href="https://juejin.im/user/57638ad8207703006b06e3ef/posts" target="_blank" rel="external"><strong>Bestswifter</strong></a></p>
<p><a href="https://www.jianshu.com/u/8d5b91490ca5" target="_blank" rel="external"><strong>故胤道长</strong></a></p>
<p><a href="https://www.jianshu.com/u/96a14318a4de" target="_blank" rel="external"><strong>iOS程序犭袁</strong></a></p>
<p><a href="https://juejin.im/user/5656f11760b28da566412f03/posts" target="_blank" rel="external"><strong>Joy_xx</strong></a></p>
<p><a href="https://juejin.im/user/57f8ffda2e958a005581e3c0/posts" target="_blank" rel="external"><strong>J<em>Knight</em></strong></a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/tangqiaoboy/iOSBlogCN" target="_blank" rel="external">https://github.com/tangqiaoboy/iOSBlogCN</a><br><a href="https://www.jianshu.com/p/ea9fabdc12ed" target="_blank" rel="external">https://www.jianshu.com/p/ea9fabdc12ed</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS从入门到高级，经常阅读各位大神的博客，学习大神的思维和研究的东西，让自己更接近大神，我搜罗了一些知名博客，值得关注阅读。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>开博客啦</title>
    <link href="http://mlijin9011.github.io/2015/07/07/%E5%BC%80%E5%8D%9A%E5%AE%A2%E5%95%A6/"/>
    <id>http://mlijin9011.github.io/2015/07/07/开博客啦/</id>
    <published>2015-07-07T11:09:04.000Z</published>
    <updated>2018-03-18T11:25:30.267Z</updated>
    
    <content type="html"><![CDATA[<p>今天终于学会了搭建个人博客，从此以后也是有博客的人啦，顿时学习的劲头就上来了，顺便把前些日子看的东西总结一下发出来。</p>
<p>好好学习，天天向上，争取早日进入大公司，😊！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天终于学会了搭建个人博客，从此以后也是有博客的人啦，顿时学习的劲头就上来了，顺便把前些日子看的东西总结一下发出来。&lt;/p&gt;
&lt;p&gt;好好学习，天天向上，争取早日进入大公司，😊！&lt;/p&gt;

    
    </summary>
    
      <category term="杂记" scheme="http://mlijin9011.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
