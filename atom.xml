<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子李的博客</title>
  <subtitle>萧瑟的秋风，倔强的生命！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mlijin9011.github.io/"/>
  <updated>2017-08-21T01:39:33.000Z</updated>
  <id>http://mlijin9011.github.io/</id>
  
  <author>
    <name>Li Jin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOSAppIcon添加打包标识</title>
    <link href="http://mlijin9011.github.io/2017/08/17/iOS-AppIcon%E6%B7%BB%E5%8A%A0%E6%89%93%E5%8C%85%E6%A0%87%E8%AF%86/"/>
    <id>http://mlijin9011.github.io/2017/08/17/iOS-AppIcon添加打包标识/</id>
    <published>2017-08-17T09:04:18.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>iOS 分支开发迭代过程中，测试经常需要装不同分支不同版本的包，有时候测试发现了 BUG 后，会突然忘了自己下的是 CI 上的哪一个包？这时候，我们可以把打包的 build 信息打印在 AppIcon 上，这样只需要根据 Icon 上的 build 信息就一目了然了。</p>
<a id="more"></a>
<h1 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h1><p>使用 ImageMagick 可以创建、编辑、合成或转换图片。它可以读和写各种格式的图像（超过 200 种格式）包括 PNG、JPEG、JPEG - 2000、GIF、TIFF、DPX、EXR、WebP、Postscript、PDF、SVG。ImageMagick 可以调整、翻转、镜像、旋转、扭曲、剪切和转换图像、图像色彩调整，适用于各种特殊效果,或绘制文本、线、多边形、椭圆和贝塞尔曲线。</p>
<p>通过 shell command 就可以轻易使用以上功能。</p>
<h1 id="Build-Phases"><a href="#Build-Phases" class="headerlink" title="Build Phases"></a>Build Phases</h1><p>Build Phases 代表着将代码构建为一个可执行文件的规则。它描述了 build 过程中必须执行的不同任务。</p>
<h2 id="定制Build-Phases"><a href="#定制Build-Phases" class="headerlink" title="定制Build Phases"></a>定制Build Phases</h2><p>你可以在 build phases 中添加运行自定义脚本，就像 CocoaPods 使用的一样，来做额外的工作。当然也可以添加一些资源的拷贝任务，当你需要将某些确定的资源拷贝到制定的 target 目录中，这非常有用。<br>另外你可以通过定制 build phase 来添加带有水印(包括版本号和commit hash)的 app icon。只需要在 build phase 中添加一个 Run Script.</p>
<p>在工程 <code>Target</code> -&gt; <code>Build Phases</code> 中新建一个 <code>Run Script</code>，我们可以给它起名 <code>Add BuildInfo on Icon</code>。</p>
<p><img src="/2017/08/17/iOS-AppIcon添加打包标识/buildPhases_Shell.png" alt="image"></p>
<p>创建脚本 draw_icon_buildinfo.sh</p>
<h2 id="写加水印的脚本"><a href="#写加水印的脚本" class="headerlink" title="写加水印的脚本"></a>写加水印的脚本</h2><p>1.判断执行 Build 的机器是否安装了 ImageMagic</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">convertPath=`which convert`</div><div class="line"># 判断 convertPath 文件是否存在</div><div class="line">if [ ! -f $&#123;convertPath&#125;]; then</div><div class="line">echo &quot;==============</div><div class="line">WARNING: 你需要先安装 ImageMagick！！！！:</div><div class="line">brew install imagemagick</div><div class="line">==============&quot;</div><div class="line">exit 0;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>2.判断 Release 包不执行以下操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if [ $&#123;CONFIGURATION&#125; = &quot;Release&quot; ]; then</div><div class="line">exit 0;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>3.获取 commit、branch、version 等信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">version=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleShortVersionString&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class="line">build_num=`/usr/libexec/PlistBuddy -c &quot;Print SinaNewsBuildVersion&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class="line">if [[ $&#123;build_num&#125; == &quot;&quot; ]]; then</div><div class="line">    build_num=`date +&quot;%Y%m%d%H%M&quot;`</div><div class="line">    echo &quot;Use Xcode building, build time $&#123;build_num&#125;&quot;</div><div class="line">fi</div><div class="line">commit=`git rev-parse --short HEAD`</div><div class="line">branch=$(git rev-parse --abbrev-ref HEAD)</div><div class="line">caption=&quot;$&#123;version&#125;\n$&#123;build_num&#125;\n$&#123;branch&#125;&quot;</div><div class="line">echo &quot;caption : $&#123;caption&#125;&quot;</div></pre></td></tr></table></figure>
<p>4.找Icon图片</p>
<p>在编译后的 info.plist 中，可以看到：<br><img src="/2017/08/17/iOS-AppIcon添加打包标识/infoPlist_Icon1.png" alt="image"><br><img src="/2017/08/17/iOS-AppIcon添加打包标识/infoPlist_Icon2.png" alt="image"></p>
<p>通过脚本输出的结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy -c &quot;Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Array &#123;</div><div class="line">    AppIcon20x20</div><div class="line">    AppIcon29x29</div><div class="line">    AppIcon40x40</div><div class="line">    AppIcon60x60</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以真实的 icon 个数为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">real_icon_index=$(($&#123;icon_count&#125; - 2))</div></pre></td></tr></table></figure>
<p>根据数量循环，对找到的每个 Icon 执行加水印的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">i=0</div><div class="line">while [  $i -lt $real_icon_index ]; do</div><div class="line">  icon=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles:$i&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class="line"></div><div class="line">  echo &quot;icon: $&#123;icon&#125;&quot;</div><div class="line"></div><div class="line">  if [[ $icon == *.png ]] || [[ $icon == *.PNG ]]</div><div class="line">  then</div><div class="line">    processIcon $icon</div><div class="line">  else</div><div class="line">    processIcon &quot;$&#123;icon&#125;.png&quot;</div><div class="line">    processIcon &quot;$&#123;icon&#125;@2x.png&quot;</div><div class="line">    processIcon &quot;$&#123;icon&#125;@3x.png&quot;</div><div class="line"></div><div class="line">    processIcon &quot;$&#123;icon&#125;~ipad.png&quot;</div><div class="line">    processIcon &quot;$&#123;icon&#125;@2x~ipad.png&quot;</div><div class="line">  fi</div><div class="line">  let i=i+1</div><div class="line">done</div></pre></td></tr></table></figure>
<p>5.对找到的图片 Icon 加水印处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">function processIcon() &#123;</div><div class="line">    base_file=$1</div><div class="line"></div><div class="line">    cd &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;&quot;</div><div class="line">    base_path=`find . -name $&#123;base_file&#125;`</div><div class="line"></div><div class="line">    real_path=$( abspath &quot;$&#123;base_path&#125;&quot; )</div><div class="line">    echo &quot;base path $&#123;real_path&#125;&quot;</div><div class="line"></div><div class="line">    # 验证存在性</div><div class="line">    if [[ ! -f $&#123;base_path&#125; || -z $&#123;base_path&#125; ]]; then</div><div class="line">      return;</div><div class="line">    fi</div><div class="line"></div><div class="line">    # TODO: if they are the same we need to fix it by introducing temp</div><div class="line">    target_file=`basename $base_path`</div><div class="line">    target_path=&quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;/$&#123;target_file&#125;&quot;</div><div class="line"></div><div class="line">    base_tmp_normalizedFileName=&quot;$&#123;base_file%.*&#125;-normalized.$&#123;base_file##*.&#125;&quot;</div><div class="line">    base_tmp_path=`dirname $base_path`</div><div class="line">    base_tmp_normalizedFilePath=&quot;$&#123;base_tmp_path&#125;/$&#123;base_tmp_normalizedFileName&#125;&quot;</div><div class="line"></div><div class="line">    stored_original_file=&quot;$&#123;base_tmp_normalizedFilePath&#125;-tmp&quot;</div><div class="line">    if [[ -f $&#123;stored_original_file&#125; ]]; then</div><div class="line">      echo &quot;found previous file at path $&#123;stored_original_file&#125;, using it as base&quot;</div><div class="line">      mv &quot;$&#123;stored_original_file&#125;&quot; &quot;$&#123;base_path&#125;&quot;</div><div class="line">    fi</div><div class="line"></div><div class="line">    if [ $CONFIGURATION = &quot;Release&quot; ]; then</div><div class="line">      cp &quot;$&#123;base_path&#125;&quot; &quot;$target_path&quot;</div><div class="line">      return 0;</div><div class="line">    fi</div><div class="line"></div><div class="line">    echo &quot;Reverting optimized PNG to normal&quot;</div><div class="line">    # Normalize</div><div class="line">    echo &quot;xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q $&#123;base_path&#125; $&#123;base_tmp_normalizedFilePath&#125;&quot;</div><div class="line">    xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q &quot;$&#123;base_path&#125;&quot; &quot;$&#123;base_tmp_normalizedFilePath&#125;&quot;</div><div class="line"></div><div class="line">    # move original pngcrush png to tmp file</div><div class="line">    echo &quot;moving pngcrushed png file at $&#123;base_path&#125; to $&#123;stored_original_file&#125;&quot;</div><div class="line">    #rm &quot;$base_path&quot;</div><div class="line">    mv &quot;$base_path&quot; &quot;$&#123;stored_original_file&#125;&quot;</div><div class="line"></div><div class="line">    # Rename normalized png&apos;s filename to original one</div><div class="line">    echo &quot;Moving normalized png file to original one $&#123;base_tmp_normalizedFilePath&#125; to $&#123;base_path&#125;&quot;</div><div class="line">    mv &quot;$&#123;base_tmp_normalizedFilePath&#125;&quot; &quot;$&#123;base_path&#125;&quot;</div><div class="line"></div><div class="line">    width=`identify -format %w $&#123;base_path&#125;`</div><div class="line">    height=`identify -format %h $&#123;base_path&#125;`</div><div class="line">    band_height=$((($height * 47) / 100))</div><div class="line">    band_position=$(($height - $band_height))</div><div class="line">    text_position=$(($band_position - 3))</div><div class="line">    point_size=$(((13 * $width) / 100))</div><div class="line"></div><div class="line">    echo &quot;Image dimensions ($width x $height) - band height $band_height @ $band_position - point size $point_size&quot;</div><div class="line"></div><div class="line">    #</div><div class="line">    # 添加高斯模糊，在模糊图上添加文字</div><div class="line">    #</div><div class="line">    convert $&#123;base_path&#125; -blur 10x8 /tmp/blurred.png</div><div class="line">    convert /tmp/blurred.png -gamma 0 -fill white -draw &quot;rectangle 0,$band_position,$width,$height&quot; /tmp/mask.png</div><div class="line">    convert -size $&#123;width&#125;x$&#123;band_height&#125; xc:none -fill &apos;rgba(0,0,0,0.2)&apos; -draw &quot;rectangle 0,0,$width,$band_height&quot; /tmp/labels-base.png</div><div class="line">    convert -background none -size $&#123;width&#125;x$&#123;band_height&#125; -pointsize $point_size -fill black -gravity center -gravity South caption:&quot;$caption&quot; /tmp/labels.png</div><div class="line"></div><div class="line">    convert $&#123;base_path&#125; /tmp/blurred.png /tmp/mask.png -composite /tmp/temp.png</div><div class="line"></div><div class="line">    rm /tmp/blurred.png</div><div class="line">    rm /tmp/mask.png</div><div class="line"></div><div class="line">    #</div><div class="line">    # 合成最后的图片</div><div class="line">    #</div><div class="line">    filename=New$&#123;base_file&#125;</div><div class="line">    convert /tmp/temp.png /tmp/labels-base.png -geometry +0+$band_position -composite /tmp/labels.png -geometry +0+$text_position -geometry +$&#123;w&#125;-$&#123;h&#125; -composite &quot;$&#123;target_path&#125;&quot;</div><div class="line">    </div><div class="line">    # 只写文字在Icon上</div><div class="line">    # convert -background none -fill black -pointsize $point_size -gravity south caption:&quot;$caption&quot; $&#123;base_path&#125; +swap -composite &quot;$&#123;target_path&#125;&quot;</div><div class="line"></div><div class="line">    # 清除文件</div><div class="line">    rm /tmp/temp.png</div><div class="line">    rm /tmp/labels-base.png</div><div class="line">    rm /tmp/labels.png</div><div class="line"></div><div class="line">    echo &quot;Overlayed $&#123;target_path&#125;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这要就完成了在 AppIcon 上添加 build 信息的处理。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="http://zhoulingyu.com/2017/04/04/iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC/#more" target="_blank" rel="external">iOS——写一个快速定位问题的脚本</a><br><a href="http://beyondvincent.com/2013/11/21/2013-11-23-123-build-process/" target="_blank" rel="external">iOS探索：iOS程序的Build过程</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;iOS 分支开发迭代过程中，测试经常需要装不同分支不同版本的包，有时候测试发现了 BUG 后，会突然忘了自己下的是 CI 上的哪一个包？这时候，我们可以把打包的 build 信息打印在 AppIcon 上，这样只需要根据 Icon 上的 build 信息就一目了然了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>港珠澳之行</title>
    <link href="http://mlijin9011.github.io/2017/06/05/%E6%B8%AF%E7%8F%A0%E6%BE%B3%E4%B9%8B%E8%A1%8C/"/>
    <id>http://mlijin9011.github.io/2017/06/05/港珠澳之行/</id>
    <published>2017-06-05T06:59:00.000Z</published>
    <updated>2017-08-21T02:07:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>趁着端午节假期，再请3天假，凑得了8日连休，南下去了一趟香港，澳门，其实这趟主要是去中山探望友人，顺道去香港和澳门玩了一圈，别人去广东都是去找好吃的，但是我们这趟没怎么吃好东西，看来我不属于吃货，都不会找好吃的，但是玩的还不错，这也是迄今为止我走的最远最南的地方了！</p>
<a id="more"></a>
<p>首先我们坐了晚上的动车去了广州，一下火车就感觉到了扑面而来的热浪，虽然才5月底，趁着早上还不是很热，我们先随便吃了点早茶后，就去了圣心大教堂，去了之后发现真是没白来，教堂里正在进行早上的祷告，没法拍照，但是跟港剧里演的真的一样，很神圣庄严的地方，只拍了外面，真的很漂亮！</p>
<p><img src="/2017/06/05/港珠澳之行/1.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/1.2.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/1.3.JPG" alt="image"></p>
<p>接着我们乘坐公交车去找沙面公园，跟北京比，广州的街道真的是很窄，一路穿梭来到了沙面公园，沙面是以前的租界，现在也是什么侨办、海关、使馆的所在地，建筑风格都是以前租界区的风格，都是小洋楼。园中绿树婆娑，秀色满目，毗邻神奇美丽的白鹅潭，视野极为开阔。</p>
<p><img src="/2017/06/05/港珠澳之行/2.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/2.2.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/2.3.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/2.4.JPG" alt="image"></p>
<p>可能因为沙面原来是租界吧所以教堂比较多，这是其中之一。</p>
<p><img src="/2017/06/05/港珠澳之行/2.5.JPG" alt="image"></p>
<p>离开了沙面，骑小黄前往上下九步行街，现在有了共享单车，出行真的是更加方便了。由于地处广州荔湾区的上九路、下九路、第十甫路之间，所以得名上下九。上下九步行街是个商业街区，但中西合璧的风格，以及岭南文化的体现，营造出亮丽的旅游风景线。</p>
<p><img src="/2017/06/05/港珠澳之行/3.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/3.2.JPG" alt="image"></p>
<p>下午乘坐城际列车来到了中山，探望朋友，不得不说广州这边的城际线路真是发达，链接了广州周边各地区，很是方便，这是我们住在友人家楼旁的楼顶花园，这个花园建在了3楼顶，下面是商业铺面，上面是花园。</p>
<p><img src="/2017/06/05/港珠澳之行/4.JPG" alt="image"></p>
<p>在中山逗留了两天之后，我们一起来到了珠海的长隆海洋王国玩了一整天，各种表演，各种海洋动物，以及水上活动设施，还有晚上的花车表演，烟花表演，唯一的遗憾是没有胆量玩过山车[囧]。</p>
<p><img src="/2017/06/05/港珠澳之行/5.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.2.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.3.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.4.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.5.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.6.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/5.7.JPG" alt="image"></p>
<p>珠海渔女石像</p>
<p><img src="/2017/06/05/港珠澳之行/6.1.JPG" alt="image"><br><img src="/2017/06/05/港珠澳之行/6.2.JPG" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着端午节假期，再请3天假，凑得了8日连休，南下去了一趟香港，澳门，其实这趟主要是去中山探望友人，顺道去香港和澳门玩了一圈，别人去广东都是去找好吃的，但是我们这趟没怎么吃好东西，看来我不属于吃货，都不会找好吃的，但是玩的还不错，这也是迄今为止我走的最远最南的地方了！&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://mlijin9011.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="珠海" scheme="http://mlijin9011.github.io/tags/%E7%8F%A0%E6%B5%B7/"/>
    
      <category term="长隆" scheme="http://mlijin9011.github.io/tags/%E9%95%BF%E9%9A%86/"/>
    
      <category term="香港" scheme="http://mlijin9011.github.io/tags/%E9%A6%99%E6%B8%AF/"/>
    
      <category term="澳门" scheme="http://mlijin9011.github.io/tags/%E6%BE%B3%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>fastlane+jenkins实现iOS持续集成</title>
    <link href="http://mlijin9011.github.io/2017/04/08/fastlane+jenkins%E5%AE%9E%E7%8E%B0iOS%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://mlijin9011.github.io/2017/04/08/fastlane+jenkins实现iOS持续集成/</id>
    <published>2017-04-08T04:29:31.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>iOS 应用的证书配置、打包和上线，大家都知道，步骤很繁琐，如果纯人工处理的话是非常浪费时间的，因此，我抽空研究了下 fastlane ，fastlane 是用 Ruby 写的一套自动化工具集，用它可以很轻松的完成证书配置，打包发布等工作，配合 jenkins 使用效果更佳。</p>
<a id="more"></a>
<h1 id="fastlane"><a href="#fastlane" class="headerlink" title="fastlane"></a>fastlane</h1><p><img src="/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-logo.png" alt="logo"></p>
<h2 id="1-fastlane-的简介"><a href="#1-fastlane-的简介" class="headerlink" title="1. fastlane 的简介"></a>1. fastlane 的简介</h2><p>fastlane是自动化打包和发布 iOS 和 Android 应用的一套工具集，下图是 fastlane 的一些主要的工具<a href="https://fastlane.tools" target="_blank" rel="external">fastlane tools</a>，如自动化测试，生成截图，生成证书和签名文件，打包，发布程序等。</p>
<p><img src="/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-intro-tree.png" alt="image"></p>
<p>下面详细讲一下 fastlane 里面的几个主要的工具：</p>
<table>
<thead>
<tr>
<th>工具</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/scan" target="_blank" rel="external">scan</a></td>
<td>自动运行自动化测试工具，并且生成 HTML 报告</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/cert" target="_blank" rel="external">cert</a></td>
<td>自动创建管理证书</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/sigh" target="_blank" rel="external">sigh</a></td>
<td>自动创建，更新，下载 Provisioning Profile 文件</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/match" target="_blank" rel="external">match</a></td>
<td>管理证书和 Provisioning Profile</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/pem" target="_blank" rel="external">pem</a></td>
<td>自动生成，更新 Notification 证书</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/snapshot" target="_blank" rel="external">snapshot</a></td>
<td>自动截图</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/deliver" target="_blank" rel="external">deliver</a></td>
<td>自动上传应用截图，元数据，ipa 文件到 iTunes Connect</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/produce" target="_blank" rel="external">produce</a></td>
<td>如果你的产品还没在 iTunes Connect 或者 Apple Developer Center 创建，produce可以自动帮你完成这些工作</td>
</tr>
<tr>
<td><a href="https://github.com/fastlane/fastlane/tree/master/gym" target="_blank" rel="external">gym</a></td>
<td>自动化编译打包工具</td>
</tr>
</tbody>
</table>
<h2 id="2-fastlane-的安装"><a href="#2-fastlane-的安装" class="headerlink" title="2. fastlane 的安装"></a>2. fastlane 的安装</h2><ol>
<li><p>确保 Xcode command line 工具是最新版</p>
<p><code>xcode-select --install</code></p>
</li>
<li><p>安装fastlane</p>
<p>官方提供了三种安装方法，gem、brew、直接下载安装</p>
<p>简单点，可以直接用 gem 安装：</p>
<p><code>sudo gem install fastlane -NV</code></p>
<p>如果安装过程中报错：</p>
<p><code>ERROR:  While executing gem ... (Errno::EPERM) 
Operation not permitted - /usr/bin/xxxx</code></p>
<p>可以执行命令：</p>
<p> <code>sudo gem install -n /usr/local/bin fastlane</code></p>
<p>安装完成后可以使用 <code>fastlane -v</code> 检查是否安装成功，如果输出下面的结果，表示已安装成功，并且显示版本号。</p>
<p><code>fastlane installation at path:
/usr/local/lib/ruby/gems/2.4.0/gems/fastlane-2.25.0/bin/fastlane 
----------------------------- fastlane 2.25.0</code></p>
</li>
</ol>
<h2 id="3-fastlane-的使用"><a href="#3-fastlane-的使用" class="headerlink" title="3. fastlane 的使用"></a>3. fastlane 的使用</h2><h3 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h3><p>在 工程的 .xcodeproj 文件的同级目录下，执行</p>
<p><code>fastlane init</code></p>
<p>这里会要求你输入 Apple ID，如果是第一次使用的话，还需要输入密码，fastlane 会自动检测当前项目的 App Name 和 App Identifier，也可以手动输入这些信息，如果你没有在 iTC 或者 ADC 中创建的话，他会询问你是否要帮你自动创建，非常智能。</p>
<p>执行完毕后，会根据你输入的信息，在当前目录下生成一个文件夹 fastlane，在 fastlane 文件夹下会自动生成两个配置文件 Appfile，Fastfile，我们可以修改这两个文件来完成我们所需要的功能。</p>
<p>如果在 init 的时候选择了在 iTC 中创建 App 的话，fastlane 会自动调用 produce 进行初始化，在 iTC 中成功创建后，fastlane 文件夹里面还会生成一个 Deliverfile 的文件，或者也可以后续手动创建。</p>
<h3 id="3-2-fastlane-管理证书-amp-Provisioning-Profile"><a href="#3-2-fastlane-管理证书-amp-Provisioning-Profile" class="headerlink" title="3.2 fastlane 管理证书 &amp; Provisioning Profile"></a>3.2 fastlane 管理证书 &amp; Provisioning Profile</h3><h4 id="cert"><a href="#cert" class="headerlink" title="cert"></a>cert</h4><p>自动生成证书，并下载安装到 keychain 中</p>
<h4 id="sigh"><a href="#sigh" class="headerlink" title="sigh"></a>sigh</h4><p>provisioning profile 的生成，管理，下载，签名等</p>
<h5 id="1-生成"><a href="#1-生成" class="headerlink" title="1. 生成"></a>1. 生成</h5><p><code>fastlane sigh --development</code></p>
<h5 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h5><p><code>fastlane sigh download_all</code></p>
<h5 id="3-管理"><a href="#3-管理" class="headerlink" title="3. 管理"></a>3. 管理</h5><p><code>fastlane sigh manage</code>  管理，删除过期的profiles<br><code>fastlane sigh repair</code>  修复过期或者无效的profiles</p>
<h5 id="4-重新签名"><a href="#4-重新签名" class="headerlink" title="4. 重新签名"></a>4. 重新签名</h5><p><code>fastlane sigh resign ./path/app.ipa --signing_identity &quot;iPhone Distribution: Felix Krause&quot; -p &quot;my.mobileprovision&quot;</code></p>
<h4 id="gem"><a href="#gem" class="headerlink" title="gem"></a>gem</h4><h4 id="match-amp-Matchfile"><a href="#match-amp-Matchfile" class="headerlink" title="match &amp; Matchfile"></a>match &amp; Matchfile</h4><h5 id="1-初始化-match"><a href="#1-初始化-match" class="headerlink" title="1. 初始化 match"></a>1. 初始化 match</h5><p>新建一个私有的 Git 仓库来存放和管理证书和 Provisioning Profiles。</p>
<p>执行 <code>fastlane match init</code>，按提示输入你的 Git 仓库地址，执行完毕后会生成一个 Matchfile 文件，像这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git_url <span class="string">"https://github.com/fastlane/fastlane/tree/master/certificates"</span></div><div class="line"></div><div class="line">app_identifier <span class="string">"tools.fastlane.app"</span></div><div class="line">username <span class="string">"user@fastlane.tools"</span></div></pre></td></tr></table></figure>
<h5 id="2-生成和安装"><a href="#2-生成和安装" class="headerlink" title="2. 生成和安装"></a>2. 生成和安装</h5><p>这个证书的仓库可以通过分支来管理不同项目的证书和配置文件，而不需要每个项目都创建一个仓库。</p>
<p>执行 <code>fastlane match</code> 可以从 Git 仓库中下载安装证书和 Provisioning Profile 到电脑中，如果 Git 仓库中没有的话，会创建证书和 profiles 文件，并上传到 Git 仓库中，其他人可以安装使用。</p>
<p>Git 仓库中的证书是加密过的，执行 match 时，会要求输入密码，创建证书的时候会用这个密码进行加密，安装证书的时候会用这个密码进行解密后安装。</p>
<p>也可以手动从你的 keychain 中导出证书，然后在你的仓库中，创建 <code>certs/distribution</code> 和 <code>certs/development</code> 目录，分别存放开发和生产证书。</p>
<p>证书加密方法:</p>
<p><code>openssl pkcs12 -nocerts -nodes -out key.pem -in certificate.p12</code><br><code>openssl aes-256-cbc -k your_password -in key.pem -out cert_id.p12 -a</code><br><code>openssl aes-256-cbc -k your_password -in certificate.cer -out cert_id.cer -a</code></p>
<p>这里的 cert_id 可以通过下面的方法来查找当前账户下所有的证书 ID，然后找出你的证书 ID 就是这里的 cert_id。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">require &apos;spaceship&apos;</div><div class="line"></div><div class="line">Spaceship.login(&apos;your@apple.id&apos;)</div><div class="line">Spaceship.select_team</div><div class="line"></div><div class="line">Spaceship.certificate.all.each do |cert| </div><div class="line">  cert_type = Spaceship::Portal::Certificate::CERTIFICATE_TYPE_IDS[cert.type_display_id].to_s.split(&quot;::&quot;)[-1]</div><div class="line">  puts &quot;Cert id: #&#123;cert.id&#125;, name: #&#123;cert.name&#125;, expires: #&#123;cert.expires.strftime(&quot;%Y-%m-%d&quot;)&#125;, type: #&#123;cert_type&#125;&quot;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>证书加密后存放到相应的目录中，接下来再上传 provisioning profile 文件，可以从 ADC 中下载，然后创建 <code>profiles/development</code>，<code>profiles/adhoc</code>，<code>profiles/appstore</code> 三个目录，分别存放开发，<br>AdHoc，生产环境的配置文件。用上面同样的方法执行 openssl 加密</p>
<p><code>openssl aes-256-cbc -k your_password -in Development_XXX.mobileprovision -out Development_your.bundle.id.mobileprovision -a</code></p>
<p>加密完成后生成三个文件如下：</p>
<p><code>profiles/development/Development_your.bundle.id.mobileprovision</code><br><code>profiles/adhoc/AdHoc_your.bundle.id.mobileprovision
profiles/appstore</code><br><code>AppStore_your.bundle.id.mobileprovision</code></p>
<p>把证书和 profile 上传到你的 Git 仓库中，其他人就可以执行 <code>fastlane match development</code> 来安装。</p>
<p>如果你不希望修改证书，可以在执行时在后面加 <code>--readonly</code>。</p>
<h5 id="3-管理-1"><a href="#3-管理-1" class="headerlink" title="3. 管理"></a>3. 管理</h5><p>你也可以像这样，在 Fastfile 里写 lane 来执行，如</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">desc <span class="string">"match"</span></div><div class="line">  lane <span class="symbol">:sn_match</span> <span class="keyword">do</span> </div><div class="line">    match(<span class="symbol">git_branch:</span> <span class="string">"your_branch"</span>, <span class="symbol">type:</span> <span class="string">"development"</span>, <span class="symbol">readonly:</span> <span class="literal">true</span>)</div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这里可以显示的指定 app_identifier，如</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">match(<span class="symbol">git_branch:</span> <span class="string">"your_branch"</span>, <span class="symbol">type:</span> <span class="string">"development"</span>, <span class="symbol">app_identifier:</span> <span class="string">"your.bundle.id"</span>, <span class="symbol">readonly:</span> <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>如果你有多个 Target，如 Watch，Extension。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">match(<span class="symbol">git_branch:</span> <span class="string">"your_branch"</span>, <span class="symbol">app_identifier:</span> [<span class="string">"com.krausefx.app1"</span>, <span class="string">"com.krausefx.app2"</span>, <span class="string">"com.krausefx.app3"</span>], <span class="symbol">readonly:</span> <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>也可以在 Matchfile 中声明：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git_url <span class="string">"https://github.com/fastlane/fastlane/tree/master/certificates"</span></div><div class="line"></div><div class="line">app_identifier [<span class="string">"com.krausefx.app1"</span>, <span class="string">"com.krausefx.app2"</span>, <span class="string">"com.krausefx.app3"</span>]</div></pre></td></tr></table></figure>
<p>你也可以通过 match 来注册新的设备，通过 <code>force_for_new_devices</code> 来更新 profiles 到Git 仓库中。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">desc <span class="string">"match"</span></div><div class="line">  lane <span class="symbol">:sn_match</span> <span class="keyword">do</span> </div><div class="line">    register_devices(<span class="symbol">devices_file:</span> <span class="string">"./devices.txt"</span>)</div><div class="line">    match(<span class="symbol">git_branch:</span> <span class="string">"your_branch"</span>, <span class="symbol">force_for_new_devices:</span> <span class="literal">true</span>)</div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure>
<p><code>force_for_new_devices</code> 可以自动进行设备检测，是否距离上次 match 有新的设备加入，并更新你的仓库中的 profile 文件。</p>
<h3 id="3-3-fastlane-自动化测试"><a href="#3-3-fastlane-自动化测试" class="headerlink" title="3.3 fastlane 自动化测试"></a>3.3 fastlane 自动化测试</h3><h4 id="scan-amp-Scanfile"><a href="#scan-amp-Scanfile" class="headerlink" title="scan &amp; Scanfile"></a>scan &amp; Scanfile</h4><p>Test 和 UITest</p>
<h3 id="fastlane-打包"><a href="#fastlane-打包" class="headerlink" title="fastlane 打包"></a>fastlane 打包</h3><h4 id="Appfile"><a href="#Appfile" class="headerlink" title="Appfile"></a>Appfile</h4><p><a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md" target="_blank" rel="external">Appfile</a>，存放了一些 app 本身的信息，如，apple_id, app_identifier, team_id 等等。</p>
<p>默认情况下，Appfile 如下所示：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app_identifier <span class="string">"com.mzl.testapp"</span> <span class="comment"># The bundle identifier of your app</span></div><div class="line">apple_id <span class="string">"mlijin9011@163.com"</span>  <span class="comment"># Your Apple email address</span></div><div class="line"></div><div class="line"><span class="comment"># You can uncomment the lines below and add your own </span></div><div class="line"><span class="comment"># team selection in case you're in multiple teams</span></div><div class="line"><span class="comment"># team_name "Team Name"</span></div><div class="line"><span class="comment"># team_id "Q2CBPJ58CA"</span></div><div class="line"></div><div class="line"><span class="comment"># To select a team for iTunes Connect use</span></div><div class="line"><span class="comment"># itc_team_name "Company Name"</span></div><div class="line"><span class="comment"># itc_team_id "18742801"</span></div></pre></td></tr></table></figure>
<p>如果你的 iTunes Connect 和 Apple Developer Portal 有不同的证书，请使用以下代码：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app_identifier <span class="string">"com.mzl.testapp"</span>       <span class="comment"># The bundle identifier of your app</span></div><div class="line"></div><div class="line">apple_dev_portal_id <span class="string">"portal@company.com"</span>  <span class="comment"># Apple Developer Account</span></div><div class="line">itunes_connect_id <span class="string">"tunes@company.com"</span>     <span class="comment"># iTunes Connect Account</span></div><div class="line"></div><div class="line">team_id <span class="string">"Q2CBPJ58CA"</span> <span class="comment"># Developer Portal Team ID</span></div><div class="line">itc_team_id <span class="string">"18742801"</span> <span class="comment"># iTunes Connect Team ID</span></div></pre></td></tr></table></figure>
<p>如果你的项目在每个环境（测试版，Store版，企业版）中的 bundle id 不同的话，则可以使用 for_platform 或 for_lane 模块声明定义。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">app_identifier <span class="string">"com.mzl.testapp"</span></div><div class="line">apple_id <span class="string">"mlijin9011@163.com"</span></div><div class="line">team_id <span class="string">"Q2CBPJ58CC"</span></div><div class="line"></div><div class="line">for_platform <span class="symbol">:ios</span> <span class="keyword">do</span></div><div class="line">  team_id <span class="string">'123'</span> <span class="comment"># for all iOS related things</span></div><div class="line">  for_lane <span class="symbol">:build_inhouse</span> <span class="keyword">do</span></div><div class="line">    app_identifier <span class="string">'com.mzl.testapp.inhouse'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>如果你想从你的 Fastfile 中访问这些值的话，可以在 Fastfile 中这样写</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">identifier = CredentialsManager::AppfileConfig.try_fetch_value(<span class="symbol">:app_identifier</span>)</div><div class="line">team_id = CredentialsManager::AppfileConfig.try_fetch_value(<span class="symbol">:team_id</span>)</div></pre></td></tr></table></figure>
<h4 id="Fastfile"><a href="#Fastfile" class="headerlink" title="Fastfile"></a>Fastfile</h4><p><a href="https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md" target="_blank" rel="external">Fastfile</a> 是最重要的一个文件，主要是些 lane 的集合，在这里可以编写和定制我们的自动化脚本，所有的流程控制功能都写在这个文件里面，利用 lane 来完成我们的自动化需求。</p>
<p>Fastfile 中可以同时支持不同的平台，iOS，macOS，Android，针对不同的平台，可以自定义自己的脚本，像这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">fastlane_version <span class="string">"2.14.2"</span></div><div class="line">default_platform <span class="symbol">:ios</span></div><div class="line"></div><div class="line">before_all <span class="keyword">do</span></div><div class="line">  puts <span class="string">"This block is executed before every action of all platforms"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></div><div class="line">  before_all <span class="keyword">do</span></div><div class="line">    cocoapods</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"build beta"</span></div><div class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span></div><div class="line">    gym</div><div class="line">    hockey</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  after_all <span class="keyword">do</span></div><div class="line">    puts <span class="string">"Finished iOS related work"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">platform <span class="symbol">:mac</span> <span class="keyword">do</span></div><div class="line">  lane <span class="symbol">:beta</span> <span class="keyword">do</span></div><div class="line">    xcodebuild</div><div class="line">    hockey</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">lane <span class="symbol">:test</span> <span class="keyword">do</span></div><div class="line">  puts <span class="string">"this lane is not platform specific"</span></div><div class="line">  xctool</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">after_all <span class="keyword">do</span></div><div class="line">  puts <span class="string">"Executed after every lane of both Mac and iPhone"</span></div><div class="line">  slack</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">error <span class="keyword">do</span> <span class="params">|lane, exception|</span></div><div class="line">  puts <span class="string">"Executed when every lane of both Mac and iPhone has error"</span></div><div class="line">  slack</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>fastlane_version：指定fastlane使用的最小版本<br>default_platform：指定当前默认的平台，可以选择 ios/android/mac<br>before_all：是在执行每一个 lane 之前都会调用这部分，所以如果有一些前提性的操作，可以写在这里，比如 cocoapods，match 等。最外面的 before_all 表示所有平台的都会执行，写在 platform ios 里面的 before_all 是只有执行 ios 平台的lane 才会执行到的。<br>after_all：同理，是在每个 lane 执行完成之后都会执行这部分的内容<br>error：每个 lane 执行出错就会执行这部分的内容<br>desc：对 lane 的描述，fastlane 会自动将 desc 的内容生成说明文档<br>lane：任务，执行的时候使用 fastlane [ios] lane名称，如上可以这样用：<code>fastlane ios beta</code></p>
<p>fastlane 提供了很多 <a href="https://docs.fastlane.tools/actions" target="_blank" rel="external">action</a> 或者 plugin 可以在 Fastfile 的 lane 里面调用，如上面提到的 match，sigh，gym，deliver 等，还有插件 cocoapods 等。</p>
<p>贴一段我项目中使用的 Fastfile 的一部分看下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line">fastlane_version <span class="string">"2.23.0"</span></div><div class="line"></div><div class="line">default_platform <span class="symbol">:ios</span></div><div class="line"></div><div class="line">PROJECT_FILE_PATH = <span class="string">'MyProject.xcodeproj'</span></div><div class="line">OUTPUT_PATH = <span class="string">'build/'</span></div><div class="line">APP_NAME = <span class="string">'MyProject'</span></div><div class="line">SCHEME_NAME = <span class="string">'MyProject'</span></div><div class="line">PLIST_FILE_PATH = <span class="string">'MyProject/Info.plist'</span></div><div class="line"></div><div class="line">INHOUSE_IDENTIFIER = <span class="string">'com.bundle.id.inhouse'</span></div><div class="line">APPSTORE_IDENTIFIER = <span class="string">'com.bundle.id'</span></div><div class="line"></div><div class="line"><span class="comment"># 上传 ipa 包的平台，可以用 蒲公英，Bugly 等替代</span></div><div class="line">OTA_SERVER_URL = <span class="string">'http://ota.client.xxx.xxx.cn/ios/upload'</span></div><div class="line"></div><div class="line"><span class="comment"># 更新bundle id信息，修改app identifier</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bundle_id</span><span class="params">(app_id)</span></span></div><div class="line">  say <span class="string">'update bundle id'</span></div><div class="line">  update_app_identifier(<span class="symbol">xcodeproj:</span> PROJECT_FILE_PATH,</div><div class="line">                        <span class="symbol">plist_path:</span> PLIST_FILE_PATH,</div><div class="line">                        <span class="symbol">app_identifier:</span> app_id)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 修改build号</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_build_version</span><span class="params">(options)</span></span></div><div class="line">  say <span class="string">'update build version'</span></div><div class="line"></div><div class="line">  buildVersion = options[<span class="symbol">:build</span>]</div><div class="line">  set_info_plist_value(<span class="symbol">path:</span> PLIST_FILE_PATH,</div><div class="line">                       <span class="symbol">key:</span> <span class="string">"ProjectBuildVersion"</span>,</div><div class="line">                       <span class="symbol">value:</span> buildVersion)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 修改bundle号</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bundle_version</span><span class="params">(typePrefix,options)</span></span></div><div class="line">  say <span class="string">'update bundle version'</span></div><div class="line"></div><div class="line">  bundleVersion = options[<span class="symbol">:build</span>] + <span class="string">"<span class="subst">#&#123;typePrefix&#125;</span>"</span></div><div class="line">  set_info_plist_value(<span class="symbol">path:</span> PLIST_FILE_PATH,</div><div class="line">                       <span class="symbol">key:</span> <span class="string">"CFBundleVersion"</span>,</div><div class="line">                       <span class="symbol">value:</span> bundleVersion)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 打包</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_ipa</span><span class="params">(configuration,exportMethod,options)</span></span></div><div class="line">  say <span class="string">'generate ipa'</span></div><div class="line"></div><div class="line">  fullVersion = get_version_number + <span class="string">"_"</span> + options[<span class="symbol">:build</span>]</div><div class="line">  outputName = <span class="string">"<span class="subst">#&#123;APP_NAME&#125;</span>_V<span class="subst">#&#123;fullVersion&#125;</span>_<span class="subst">#&#123;configuration&#125;</span>"</span></div><div class="line">  outputPath = <span class="string">"<span class="subst">#&#123;OUTPUT_PATH&#125;</span><span class="subst">#&#123;outputName&#125;</span>/"</span></div><div class="line"></div><div class="line">  gym(</div><div class="line">    <span class="symbol">scheme:</span> <span class="string">"<span class="subst">#&#123;SCHEME_NAME&#125;</span>"</span>,</div><div class="line">    <span class="symbol">clean:</span> <span class="literal">true</span>,</div><div class="line">    <span class="symbol">output_directory:</span> <span class="string">"<span class="subst">#&#123;outputPath&#125;</span>"</span>,</div><div class="line">    <span class="symbol">output_name:</span> <span class="string">"<span class="subst">#&#123;outputName&#125;</span>.ipa"</span>,</div><div class="line">    <span class="symbol">configuration:</span> <span class="string">"<span class="subst">#&#123;configuration&#125;</span>"</span>,</div><div class="line">    <span class="symbol">include_symbols:</span> <span class="string">"true"</span>,</div><div class="line">    <span class="comment"># archive_path: "#&#123;outputPath&#125;",</span></div><div class="line">    <span class="comment"># 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id</span></div><div class="line">    <span class="symbol">export_method:</span> <span class="string">"<span class="subst">#&#123;exportMethod&#125;</span>"</span></div><div class="line">  )</div><div class="line"></div><div class="line">  upload_ota(<span class="string">"../<span class="subst">#&#123;outputPath&#125;</span>"</span>, outputName, configuration)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># 上传 OTA</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_ota</span><span class="params">(output_path, app_name, configuration)</span></span></div><div class="line">  say <span class="string">'upload ipa to ota'</span></div><div class="line"></div><div class="line">  <span class="comment"># 99-AppStore包, 0-正式包, 1-开发临时测试包, 2-第三方渠道包, 3-每日构建包</span></div><div class="line">  <span class="comment"># 默认为1</span></div><div class="line">  force_bundle_id = APPSTORE_IDENTIFIER</div><div class="line">  type = <span class="number">1</span></div><div class="line">  <span class="keyword">if</span> configuration == <span class="string">"Inhouse"</span></div><div class="line">    force_bundle_id = INHOUSE_IDENTIFIER</div><div class="line">    type = <span class="number">2</span></div><div class="line">  <span class="keyword">elsif</span> configuration == <span class="string">"AdHoc"</span></div><div class="line">    type = <span class="number">0</span></div><div class="line">  <span class="keyword">elsif</span> configuration == <span class="string">"Release"</span></div><div class="line">    type = <span class="number">99</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  sh <span class="string">"curl -# -S -F 'pkg_file=@<span class="subst">#&#123;output_path&#125;</span><span class="subst">#&#123;app_name&#125;</span>.ipa' -F 'dsym_file=@<span class="subst">#&#123;output_path&#125;</span><span class="subst">#&#123;app_name&#125;</span>.app.dSYM.zip' -F 'version=<span class="subst">#&#123;app_name&#125;</span>' -F 'description=<span class="subst">#&#123;app_name&#125;</span>' -F 'app_bundle_id=<span class="subst">#&#123;APPSTORE_IDENTIFIER&#125;</span>' -F 'pkg_type=<span class="subst">#&#123;type&#125;</span>' -F 'force_bundle_id=<span class="subst">#&#123;force_bundle_id&#125;</span>' <span class="subst">#&#123;OTA_SERVER_URL&#125;</span>"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></div><div class="line">  before_all <span class="keyword">do</span></div><div class="line">    <span class="comment"># ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."</span></div><div class="line">    <span class="comment"># cocoapods</span></div><div class="line">    puts File.absolute_path(<span class="string">"."</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"更新build号"</span></div><div class="line">  lane <span class="symbol">:buildVersion</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    update_build_version(options)</div><div class="line">  <span class="keyword">end</span> </div><div class="line"></div><div class="line">  desc <span class="string">"更新Debug版bundle号"</span></div><div class="line">  lane <span class="symbol">:debugBundleVersion</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    update_bundle_version(<span class="string">".Debug"</span>,options)</div><div class="line">  <span class="keyword">end</span> </div><div class="line"></div><div class="line">  desc <span class="string">"更新AppStore版bundle号"</span></div><div class="line">  lane <span class="symbol">:storeBundleVersion</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    update_bundle_version(<span class="string">""</span>,options)</div><div class="line">  <span class="keyword">end</span>   </div><div class="line"></div><div class="line">  desc <span class="string">"打Debug包"</span></div><div class="line">  lane <span class="symbol">:build_debug</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    buildVersion options</div><div class="line">    generate_ipa(<span class="string">"Debug"</span>,<span class="string">"development"</span>,options)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"打Inhouse包"</span></div><div class="line">  lane <span class="symbol">:build_inhouse</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    buildVersion options</div><div class="line">    update_bundle_id(<span class="string">"<span class="subst">#&#123;INHOUSE_IDENTIFIER&#125;</span>"</span>)</div><div class="line">    generate_ipa(<span class="string">"Inhouse"</span>,<span class="string">"enterprise"</span>,options)</div><div class="line">    <span class="comment"># 还原</span></div><div class="line">    update_bundle_id(<span class="string">"<span class="subst">#&#123;APPSTORE_IDENTIFIER&#125;</span>"</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"打Adhoc包"</span></div><div class="line">  lane <span class="symbol">:build_adhoc</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    buildVersion options</div><div class="line">    generate_ipa(<span class="string">"AdHoc"</span>,<span class="string">"ad-hoc"</span>,options)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"打Alpha包"</span></div><div class="line">  lane <span class="symbol">:build_alpha</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    development options</div><div class="line">    inhouse options</div><div class="line">    adhoc options</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"打AppStore包"</span></div><div class="line">  lane <span class="symbol">:build_release</span> <span class="keyword">do</span> <span class="params">|options|</span></div><div class="line">    buildVersion options</div><div class="line">    storeBundleVersion options</div><div class="line">    update_bundle_id(<span class="string">"<span class="subst">#&#123;APPSTORE_IDENTIFIER&#125;</span>"</span>)</div><div class="line">    generate_ipa(<span class="string">"Release"</span>,<span class="string">"app-store"</span>,options)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  desc <span class="string">"match"</span></div><div class="line">  lane <span class="symbol">:sn_match</span> <span class="keyword">do</span> </div><div class="line">    <span class="comment"># 这两行可以注册新设备，并且自动更新仓库下的profiles文件</span></div><div class="line">    <span class="comment"># register_devices(devices_file: "./devices.txt")</span></div><div class="line">    <span class="comment"># match(git_branch: "branch", type: "development", force_for_new_devices: true)</span></div><div class="line">    match(<span class="symbol">git_branch:</span> <span class="string">"branch"</span>, <span class="symbol">readonly:</span> <span class="literal">true</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  after_all <span class="keyword">do</span> <span class="params">|lane|</span></div><div class="line"></div><div class="line">    <span class="comment"># slack(</span></div><div class="line">    <span class="comment">#   message: "Successfully deployed new App Update."</span></div><div class="line">    <span class="comment"># )</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  error <span class="keyword">do</span> <span class="params">|lane, exception|</span></div><div class="line">    <span class="comment"># slack(</span></div><div class="line">    <span class="comment">#   message: exception.message,</span></div><div class="line">    <span class="comment">#   success: false</span></div><div class="line">    <span class="comment"># )</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md</span></div><div class="line"><span class="comment"># All available actions: https://docs.fastlane.tools/actions</span></div><div class="line"></div><div class="line"><span class="comment"># fastlane reports which actions are used</span></div><div class="line"><span class="comment"># No personal data is recorded. Learn more at https://github.com/fastlane/enhancer</span></div></pre></td></tr></table></figure>
<h3 id="3-4-fastlane-发布"><a href="#3-4-fastlane-发布" class="headerlink" title="3.4 fastlane 发布"></a>3.4 fastlane 发布</h3><h4 id="deliver-amp-Deliverfile"><a href="#deliver-amp-Deliverfile" class="headerlink" title="deliver &amp; Deliverfile"></a>deliver &amp; Deliverfile</h4><p><a href="https://github.com/fastlane/fastlane/blob/master/deliver/Deliverfile.md" target="_blank" rel="external">Deliverfile</a> 主要是用于发布上传时的配置文件。</p>
<p>前面介绍了，如果在 <code>fastlane init</code> 的时候选择了在 iTunes Connect 创建 App，那么 fastlane 会调用 produce 进行初始化，同时会执行 <code>deliver init</code>，执行完毕后会创建一个 Deliverfile 文件，如果没有在初始化的时候选择执行 produce 流程当然 deliver 也不会执行，可以手动执行 <code>fastlane deliver init</code> 创建。</p>
<p>执行时，会自动登录你在 Appfile 中设置的 itunes_connect_id，根据 Appfile 中的 app_identifier，会为你下载当前 iTC 中的截图，元数据等等。执行完成后会生成<br>一个 Deliverfile 文件，/metadata 和 /screenshots 文件夹。</p>
<p>本地修改 Deliverfile，元数据，或者截图文件，执行 <code>fastlane deliver</code> 后，可以上传到 iTunes Connect 上。</p>
<p>如果你想把你本地的 ipa 文件上传到 iTunes Connect 上，可以执行：</p>
<p><code>fastlane deliver --ipa &quot;App.ipa&quot; --submit_for_review</code></p>
<p>如果你之前上传过 ipa 包，想选择一个用来提交审核，可以执行：</p>
<p><code>fastlane deliver submit_build --build_number xxxx</code></p>
<p>这里 xxxx 是你想选择的 build number。或者，可以直接选择最新的：</p>
<p><code>fastlane deliver submit_build --latest</code></p>
<p>在 Fastfile 里可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deliver(app_version: ENV[&quot;app_versionName&quot;],</div><div class="line">        ipa: &quot;#&#123;ipa_path&#125;&quot;,</div><div class="line">        submit_for_review: false</div><div class="line">       )</div></pre></td></tr></table></figure>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote>
<p><a href="https://github.com/fastlane/fastlane" target="_blank" rel="external">官方文档</a><br><a href="http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#migration" target="_blank" rel="external">Simplify your life with fastlane match</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;iOS 应用的证书配置、打包和上线，大家都知道，步骤很繁琐，如果纯人工处理的话是非常浪费时间的，因此，我抽空研究了下 fastlane ，fastlane 是用 Ruby 写的一套自动化工具集，用它可以很轻松的完成证书配置，打包发布等工作，配合 jenkins 使用效果更佳。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="fastlane" scheme="http://mlijin9011.github.io/tags/fastlane/"/>
    
      <category term="jenkins" scheme="http://mlijin9011.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative入门（3）—— ReactNative与原生的交互</title>
    <link href="http://mlijin9011.github.io/2016/12/17/ReactNative%E5%85%A5%E9%97%A8%EF%BC%883%EF%BC%89/"/>
    <id>http://mlijin9011.github.io/2016/12/17/ReactNative入门（3）/</id>
    <published>2016-12-17T08:03:28.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在项目中，通常我们会使用 RN 和原生混合开发的模式，所以这就涉及到一个重要的内容—— RN 和原生之间的数据交互。现在我们来一起看一下该怎样去实现数据交互。交互涉及到两部分内容:1. OC 打开 RN 页面；2. RN 调用 OC 方法；3. OC 调用 RN 方法。</p>
<a id="more"></a>
<h3 id="iOS-原生页面打开-RN-页面"><a href="#iOS-原生页面打开-RN-页面" class="headerlink" title="iOS 原生页面打开 RN 页面"></a>iOS 原生页面打开 RN 页面</h3><p>可以自定义一个 <code>ReactViewController</code> 类，在这个控制器中添加一个 <code>RCTRootView</code> 作为子 View。这样这个 ViewController 就可以显示一个 RN 页面了，具体实现方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view.</div><div class="line">    </div><div class="line">	NSURL *jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</div><div class="line">	RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</div><div class="line">                                                      moduleName:@&quot;test&quot;</div><div class="line">                                               initialProperties:nil</div><div class="line">                                                   launchOptions:nil];</div><div class="line">	reactView.frame = self.view.bounds;</div><div class="line">	[self.view addSubView:rootView];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="RN-调用-OC-方法"><a href="#RN-调用-OC-方法" class="headerlink" title="RN 调用 OC 方法"></a>RN 调用 OC 方法</h3><p>首先创建一个工具类，来专门处理 RN 和 OC 间的交互，例如 <code>ReactUtil</code>，这个类需要实现 <code>RCTBridgeModule</code> 协议，<code>RCTBridgeModule</code> 是定义好的 protocol，实现该协议的类，会自动注册到 OC 对应的 Bridge 中。<br>OC-Bridge 上层负责与 OC 通信，下层负责和 JS-Bridge 通信，而 JS-Bridge 负责和 JS 通信。<br>这样通过 OC-Bridge 和 JS-Bridge 就可以实现 JS 和 OC 的相互调用了。</p>
<p>ReactUtil 类的具体实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_MODULE()</div><div class="line"></div><div class="line">RCT_EXPORT_METHOD(jsInvokeApp:(NSString *)eventName parameter:(NSDictionary *)parameter resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) &#123;</div><div class="line">    NSLog(@&quot;接收到RN传过来的事件名：%@，数据为:%@&quot;, eventName, parameter);</div><div class="line">    </div><div class="line">    //  TODO: 具体业务处理，可根据eventName，parameter等区分</div><div class="line">    BOOL result;</div><div class="line">    if (result) &#123;</div><div class="line">        resolve(@&quot;&quot;);</div><div class="line">    &#125; else &#123;</div><div class="line">        NSError *error = [NSError errorWithDomain:@&quot;com.XXX.domain&quot; code:1 userInfo:nil];</div><div class="line">        reject(@&quot;code&quot;, @&quot;message&quot;, error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有实现 <code>RCTBridgeModule</code> 协议的类都必须显示的 include 宏命令: <code>RCT_EXPORT_MODULE()</code>。<br><code>RCT_EXPORT_MODULE</code> 的作用是当 OC-Bridge 加载的时候，自动注册一个 Module。这个 Module 可以在 JS-Bridge 中调用。<br><code>RCT_EXPORT_MODULE</code> 接受字符串作为其 Module 的名称，如果不设置名称的话默认就使用类名作为 Module 的名称。</p>
<p>最后我们需要在 JS 文件中调用 <code>ReactUtil</code> 中的方法即可:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var &#123; NativeModules &#125; = require(&apos;react-native&apos;);</div><div class="line">var ReactUtil = NativeModules.ReactUtil;</div><div class="line"> </div><div class="line">//获取Promise对象处理</div><div class="line">async _updateEvents() &#123;</div><div class="line">    try &#123;</div><div class="line">       var events = await ReactUtil.jsInvokeApp(&apos;eventName&apos;, &#123;&apos;key&apos;:&apos;value&apos;&#125;);</div><div class="line">       this.setState(&#123;events&#125;);</div><div class="line">    &#125; catch(e) &#123;</div><div class="line">       this.setState(&#123;events:e.message&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="OC-调用-RN-方法"><a href="#OC-调用-RN-方法" class="headerlink" title="OC 调用 RN 方法"></a>OC 调用 RN 方法</h3><p>在 0.27 版本之前，调用方式是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@synthesize bridge = _bridge; </div><div class="line">- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody &#123; </div><div class="line">  [_bridge.eventDispatcher sendDeviceEventWithName:eventName body:eventBody];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在 xcode 里面一直提示这种方式可能要被取代：</p>
<p><code>&#39;sendDeviceEventWithName:body:&#39; is deprecated: Subclass RCTEventEmitter instead</code></p>
<p>现在可以这样写：修改我们刚才写的 <code>ReactUtil</code> 继承自 <code>RCTEventEmitter</code></p>
<p>然后要重写下面这个方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// TODO: 所有 app 通知 JS 的方法</div><div class="line">- (NSArray&lt;NSString *&gt; *)supportedEvents &#123;</div><div class="line">  return @[@&quot;appInvokeJs&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后实现你导出的所有方法，里面都使用 sendEventWithName 方法即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody &#123;</div><div class="line">    NSMutableDictionary *body = [[NSMutableDictionary alloc] init];</div><div class="line">    [body setObject:eventName forKey:@&quot;eventName&quot;];</div><div class="line">    [body setObject:eventBody forKey:@&quot;eventBody&quot;];</div><div class="line">    [self sendEventWithName:@&quot;appInvokeJs&quot; body:body];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后 JS 端调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import &#123;</div><div class="line">  ... </div><div class="line">  NativeModules,</div><div class="line">  NativeEventEmitter,  //导入 NativeEventEmitter 模块</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">  </div><div class="line">var ReactUtil = NativeModules.ReactUtil;</div><div class="line">const myNativeEvent = new NativeEventEmitter(ReactUtil);  //创建自定义事件接口</div><div class="line">  </div><div class="line">//在组件中使用</div><div class="line">componentWillMount() &#123;</div><div class="line">    this.listener = myNativeEvent.addListener(&apos;appInvokeJs&apos;, this.appInvokeJs.bind(this)); </div><div class="line">&#125;</div><div class="line">componentWillUnmount() &#123; </div><div class="line">    this.listener &amp;&amp; this.listener.remove();</div><div class="line">    this.listener = null; </div><div class="line">&#125; </div><div class="line"></div><div class="line">appInvokeJs(data) &#123;</div><div class="line">    //接受原生传过来的数据 </div><div class="line">    data = &#123;eventName:,eventBody:&#125;</div><div class="line">    if (data.eventName == &apos;EventName&apos;) &#123;</div><div class="line">       //</div><div class="line">    &#125; else &#123;</div><div class="line">        </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在项目中，通常我们会使用 RN 和原生混合开发的模式，所以这就涉及到一个重要的内容—— RN 和原生之间的数据交互。现在我们来一起看一下该怎样去实现数据交互。交互涉及到两部分内容:1. OC 打开 RN 页面；2. RN 调用 OC 方法；3. OC 调用 RN 方法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="http://mlijin9011.github.io/tags/React-Native/"/>
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>成都游记</title>
    <link href="http://mlijin9011.github.io/2016/10/10/%E6%88%90%E9%83%BD%E6%B8%B8%E8%AE%B0/"/>
    <id>http://mlijin9011.github.io/2016/10/10/成都游记/</id>
    <published>2016-10-10T06:35:24.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多人都说，成都是那个你来了就不想离开的地方！有人留恋的是麻辣鲜香的美食，有人留恋的是独特魅力的景色，有人留恋的是那些漂亮水灵的姑娘……</p>
<p>这次十一借着回家的名义去成都游玩了几天，实在是人很多啊，但也抵挡不了成都的美！</p>
<a id="more"></a>
<p>首先是成都的火车站，跟北京的火车站比起来是小了点。一出车站就体验到了大四川的人真的是多啊，正好还赶上十一。</p>
<p><img src="/2016/10/10/成都游记/1.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/1.2.JPG" alt="image"></p>
<p>提前在去哪儿网定了速8酒店春熙路店，满怀希望的去了一看，真的是破破烂烂，窗户都关不上，囧。</p>
<p>酒店安顿好之后开始了第一站的行程——宽窄巷子。依旧是那么多人，宽窄巷子是宽巷子、窄巷子和井巷子三条平行排列的老式街道及其之间的四合院落群组成，井巷子比较多小吃。</p>
<p><img src="/2016/10/10/成都游记/2.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.2.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.3.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.4.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.5.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.6.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.7.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.8.JPG" alt="image"><br><img src="/2016/10/10/成都游记/2.9.JPG" alt="image"></p>
<p>吃饱喝足了之后接着第二站——杜甫草堂，是杜甫流寓成都时的故居。</p>
<p><img src="/2016/10/10/成都游记/3.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.2.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.3.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.4.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.5.JPG" alt="image"><br><img src="/2016/10/10/成都游记/3.6.JPG" alt="image"></p>
<p>接下来去了大熊猫养育基地，不得不说，国宝就是可爱啊！</p>
<p><img src="/2016/10/10/成都游记/4.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/4.2.JPG" alt="image"><br><img src="/2016/10/10/成都游记/4.3.JPG" alt="image"><br><img src="/2016/10/10/成都游记/4.4.JPG" alt="image"><br><img src="/2016/10/10/成都游记/4.5.JPG" alt="image"></p>
<p>接下来是美丽的都江堰，本人比较喜欢这种山清水秀的地方</p>
<p><img src="/2016/10/10/成都游记/5.1.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.2.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.3.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.4.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.5.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.6.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.7.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.8.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.9.JPG" alt="image"><br><img src="/2016/10/10/成都游记/5.10.JPG" alt="image"></p>
<p>看了这些照片，是不是有点想去呢，😝</p>
<p>假期结束了，开始上班吧，😒</p>
<p>此文同时收录于我的公众号（小乱谈），<a href="https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&amp;mid=2247483777&amp;idx=1&amp;sn=67a4fa65e9f1b0a032452ac329d604d9&amp;chksm=ea9dfa5cddea734ac9727d182a3970b3230f0ffe151bb2c99720f92ec60f85c4e2abd20f1045#rd" target="_blank" rel="external">成都游记</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人都说，成都是那个你来了就不想离开的地方！有人留恋的是麻辣鲜香的美食，有人留恋的是独特魅力的景色，有人留恋的是那些漂亮水灵的姑娘……&lt;/p&gt;
&lt;p&gt;这次十一借着回家的名义去成都游玩了几天，实在是人很多啊，但也抵挡不了成都的美！&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://mlijin9011.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="成都" scheme="http://mlijin9011.github.io/tags/%E6%88%90%E9%83%BD/"/>
    
      <category term="都江堰" scheme="http://mlijin9011.github.io/tags/%E9%83%BD%E6%B1%9F%E5%A0%B0/"/>
    
  </entry>
  
  <entry>
    <title>首尔之行</title>
    <link href="http://mlijin9011.github.io/2016/09/28/%E9%A6%96%E5%B0%94%E4%B9%8B%E8%A1%8C/"/>
    <id>http://mlijin9011.github.io/2016/09/28/首尔之行/</id>
    <published>2016-09-28T13:53:19.000Z</published>
    <updated>2017-08-21T01:39:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>首尔是个极具小清新的城市，干净的大街上各色店铺、餐馆都色彩缤纷，极具特色与少女心，无意间闯进的街道，转角遇见的花店都让人想要驻足，送你一颗少女心，圆你一场甜美梦。</p>
<a id="more"></a>
<p>这是酒店后面的街道，早上起来溜达，吃点东西，街道两边的店面装饰的都五颜六色的很好看。</p>
<p><img src="/2016/09/28/首尔之行/1.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/1.2.JPG" alt="image"></p>
<p>免税店里面都是中国人，就跟不要钱一样排着队抢着买东西，然后去了南山公园和首尔塔，南山公园有个很著名的地方——爱情锁。</p>
<p><img src="/2016/09/28/首尔之行/2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/3.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/3.2.JPG" alt="image"></p>
<p>在这里买了个韩剧里面经常出现的冰激凌吃，插得那两根甜的中间夹杂着点十三香的味道，不过还挺好吃的。</p>
<p><img src="/2016/09/28/首尔之行/4.JPG" alt="image"></p>
<p>这是韩国的天安门故宫——光华门和景福宫。里面很大但是都是新建的没有什么意思。</p>
<p><img src="/2016/09/28/首尔之行/5.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/5.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/5.3.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/5.4.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/5.5.JPG" alt="image"></p>
<p>这是首尔的天安门广场吧，来的时候正好是韩国的韩服节，大很多本地人穿着韩服来广场上体验传统韩国文化，广场上的世宗大王像，世宗大王是发明韩国文字的一个皇帝。</p>
<p><img src="/2016/09/28/首尔之行/6.JPG" alt="image"></p>
<p>接着去了梨花女子大学，这里的美女真的是多啊，不过没好意思拍照，嘻嘻。</p>
<p>然后是韩屋村，有点像鼓楼大街那样的胡同院子一样，是韩国特色的古代房屋建筑，朝鲜时代的两班居住的区域，现在也还有人在住。街道仍然很干净漂亮。</p>
<p><img src="/2016/09/28/首尔之行/7.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/7.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/7.3.JPG" alt="image"></p>
<p>美食来了，正宗的冷面，大酱汤，拌饭，烤韩牛，参鸡汤</p>
<p><img src="/2016/09/28/首尔之行/8.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.3.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.4.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.5.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/8.6.JPG" alt="image"></p>
<p>作为一个资深的追星族，来到韩国当然少不了的是追韩星喽，这是一条韩流明星街，街道上有一个挨一个的明星团体应援吉祥物。</p>
<p><img src="/2016/09/28/首尔之行/9.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.3.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.4.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.5.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.6.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.7.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/9.8.JPG" alt="image"></p>
<p>明星手印</p>
<p><img src="/2016/09/28/首尔之行/10.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/10.1.JPG" alt="image"></p>
<p>这是在江南，首尔的富人区，果然是有钱呢，商店都是奢侈品，连地铁站都这么豪华呢。</p>
<p><img src="/2016/09/28/首尔之行/11.JPG" alt="image"></p>
<p>韩国的炸鸡啤酒，啤酒兑着烧酒，哇好好喝</p>
<p><img src="/2016/09/28/首尔之行/12.JPG" alt="image"></p>
<p>明洞，逛街吃小吃的地方</p>
<p><img src="/2016/09/28/首尔之行/13.JPG" alt="image"></p>
<p>明洞的 711 便利店都这么大</p>
<p><img src="/2016/09/28/首尔之行/14.JPG" alt="image"></p>
<p>这是一家书店，很大，环境也很好</p>
<p><img src="/2016/09/28/首尔之行/15.JPG" alt="image"></p>
<p>壁画村，真的美极了</p>
<p><img src="/2016/09/28/首尔之行/16.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/16.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/16.3.JPG" alt="image"></p>
<p>回来的飞机上拍的，飞上云霄</p>
<p><img src="/2016/09/28/首尔之行/17.1.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/17.2.JPG" alt="image"><br><img src="/2016/09/28/首尔之行/17.3.JPG" alt="image"></p>
<p>作为一个看了韩剧N年的人来说，这一趟首尔之行圆了对韩国和韩式生活得好奇心，多年来看韩剧学的韩语也派上了用场，^-^.</p>
<p>此文同时收录于我的公众号（小乱谈），<a href="https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&amp;mid=2247483713&amp;idx=1&amp;sn=361d40c9ddab773f0d28bd9666cc53f9&amp;chksm=ea9dfa9cddea738ab312fee545f55a54ae4d15c25c3d25193a25bc80d969b0218560b30947a2#rd" target="_blank" rel="external">首尔之行</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首尔是个极具小清新的城市，干净的大街上各色店铺、餐馆都色彩缤纷，极具特色与少女心，无意间闯进的街道，转角遇见的花店都让人想要驻足，送你一颗少女心，圆你一场甜美梦。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://mlijin9011.github.io/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="首尔" scheme="http://mlijin9011.github.io/tags/%E9%A6%96%E5%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>使用CocoaPods创建私有Spec Repo管理项目公共组件</title>
    <link href="http://mlijin9011.github.io/2016/08/19/%E4%BD%BF%E7%94%A8CocoaPods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89Spec-Repo%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E5%85%AC%E5%85%B1%E7%BB%84%E4%BB%B6/"/>
    <id>http://mlijin9011.github.io/2016/08/19/使用CocoaPods创建私有Spec-Repo管理项目公共组件/</id>
    <published>2016-08-19T11:14:19.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目做多了，你会发现有很多基础功能模块是可以通用的，完全可以独立出来抽象成一个公用库，方便以后开发新项目的时候可以直接使用这些基础组件，不需要再重新开发，提高开发效率。同时，随着项目和业务的发展，工程量越来越大，业务模块越来越多，我们采用组件化的方式来开发，组件化就需要每个业务模块独立开发，方便迭代和代码管理。不管是通用的基础服务组件，还是独立的业务功能组件，都需要我们来进行组件管理。</p>
<p>CocoaPods 是非常好用的一个iOS依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及管理自己的项目中的私有组件库。</p>
<a id="more"></a>
<h1 id="CocoaPods-管理私有组件"><a href="#CocoaPods-管理私有组件" class="headerlink" title="CocoaPods 管理私有组件"></a>CocoaPods 管理私有组件</h1><p>我们通过 CocoaPods 来使用和管理项目中的第三方库非常方便也非常简单，下面我们来学习下如何创建自己的私有的组件仓库，管理私有组件。</p>
<h2 id="1-创建私有-Spec-Repo"><a href="#1-创建私有-Spec-Repo" class="headerlink" title="1.创建私有 Spec Repo"></a>1.创建私有 Spec Repo</h2><p>Spec Repo 是一个存放了所有 Pods 的索引文件 podspec 的仓库，集成的时候就是通过仓库里的 Pod 所对应的索引文件来找到对应的源码或者 framework的，当你使用 CocoaPods 后他会被 clone 到本地的 <code>~/.cocoapods/repos</code> 目录下，Github 官方的 Spec Repo 叫 master，我们可以到这个目录下查看 master 下的结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Specs</div><div class="line">    └── [SPEC_NAME]</div><div class="line">        └── [VERSION]</div><div class="line">            └── [SPEC_NAME].podspec</div></pre></td></tr></table></figure>
<p>我们要存放私有的组件，当然不能用官方的 Repo 库了，所以我们要创建一个私有的 Spec Repo 库，首先我们先在 Gitlab 或者其他 Git 服务中创建一个仓库，例如我这里创建的一个仓库地址：<a href="https://gitlab.com/MZLApp/MZLSpecs.git" target="_blank" rel="external">https://gitlab.com/MZLApp/MZLSpecs.git</a> 。            </p>
<p>仓库创建好之后，执行下面的命令来把这个仓库作为一个 Pod 索引仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</div><div class="line">$ pod repo add MZLSpecs https://gitlab.com/MZLApp/MZLSpecs.git</div></pre></td></tr></table></figure>
<p>执行成功后，进入到 <code>~/.cocoapods/repos</code> 目录，就可以看到我们刚创建的 MZLSpecs 这个目录了，此时创建私有 Spec Repo 就完成了。</p>
<h2 id="2-创建-Pod-组件库"><a href="#2-创建-Pod-组件库" class="headerlink" title="2. 创建 Pod 组件库"></a>2. 创建 Pod 组件库</h2><p><a href="http://guides.cocoapods.org/making/using-pod-lib-create" target="_blank" rel="external">CocoaPods</a>提供了命令 <code>pod lib create xxx</code> 可以给我们很方便的创建一个 Pod，例如，创建一个 ObjC 常用的 Category 分类的公用组件库，执行下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create MZLCategory</div></pre></td></tr></table></figure>
<p>这里会询问几个问题，1.你的仓库是用什么语言（Swift/ObjC）；2.是否要帮你创建一个 Demo 工程；3.你是否需要一个测试框架（Specta/Kiwi/None）；4.你是否需要基于 View 测试；5.你的 Pod 库里类的前缀。按你的具体情况做出选择：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Cloning `https://github.com/CocoaPods/pod-template.git` into `MZLCategory`.</div><div class="line">Configuring MZLCategory template.</div><div class="line"></div><div class="line">------------------------------</div><div class="line"></div><div class="line">To get you started we need to ask a few questions, this should only take a minute.</div><div class="line"></div><div class="line">If this is your first time we recommend running through with the guide:</div><div class="line"> - http://guides.cocoapods.org/making/using-pod-lib-create.html</div><div class="line"> ( hold cmd and click links to open in a browser. )</div><div class="line"></div><div class="line"></div><div class="line">What language do you want to use?? [ Swift / ObjC ]</div><div class="line"> &gt; ObjC</div><div class="line"></div><div class="line">Would you like to include a demo application with your library? [ Yes / No ]</div><div class="line"> &gt; Yes</div><div class="line"></div><div class="line">Which testing frameworks will you use? [ Specta / Kiwi / None ]</div><div class="line"> &gt; None</div><div class="line"></div><div class="line">Would you like to do view based testing? [ Yes / No ]</div><div class="line"> &gt; No</div><div class="line"></div><div class="line">What is your class prefix?</div><div class="line"> &gt; MZL</div></pre></td></tr></table></figure>
<p>问题选择完成后，如果你选择了帮你创建 Demo 的话，CocoaPods 会自动帮你执行 <code>pod install</code> 来生成 workspace 文件，完成后并自动在 Xcode 中打开：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Running pod install on your new library.</div><div class="line"></div><div class="line">Analyzing dependencies</div><div class="line">Fetching podspec for `MZLCategory` from `../`</div><div class="line">Downloading dependencies</div><div class="line">Installing MZLCategory (0.1.0)</div><div class="line">Generating Pods project</div><div class="line">Integrating client project</div><div class="line"></div><div class="line">[!] Please close any current Xcode sessions and use `MZLCategory.xcworkspace` for this project from now on.</div><div class="line">Sending stats</div><div class="line">Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.</div><div class="line"></div><div class="line">[!] Automatically assigning platform ios with version 8.3 on target MZLCategory_Example because no platform was specified. Please specify a platform for this target in your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.</div><div class="line"></div><div class="line"> Ace! you&apos;re ready to go!</div><div class="line"> We will start you off by opening your project in Xcode</div><div class="line">  open &apos;MZLCategory/Example/MZLCategory.xcworkspace&apos;</div><div class="line"></div><div class="line">To learn more about the template see `https://github.com/CocoaPods/pod-template.git`.</div><div class="line">To learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.</div></pre></td></tr></table></figure>
<p>这样，一个 Pod 就创建好了，我们来看这个 Pod 的结构以及相关介绍如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">MZLCategory</div><div class="line">├── Example                     # Demo</div><div class="line">│   ├── MZLCategory</div><div class="line">│   ├── MZLCategory.xcodeproj</div><div class="line">│   ├── MZLCategory.xcworkspace</div><div class="line">│   ├── Podfile</div><div class="line">│   ├── Podfile.lock</div><div class="line">│   ├── Pods</div><div class="line">│   └── Tests</div><div class="line">├── LICENSE</div><div class="line">├── MZLCategory                 # Pod 组件</div><div class="line">│   ├── Assets                  # Pod 中的资源文件目录</div><div class="line">│   └── Classes                 # Pod 中的类文件目录   </div><div class="line">├── MZLCategory.podspec         # Pod 索引文件</div><div class="line">├── README.md</div><div class="line">└── _Pods.xcodeproj -&gt; Example/Pods/Pods.xcodeproj</div></pre></td></tr></table></figure>
<p>第一次提交，我们先配置好 podspec 文件，修改 summary、description、homepage、source 等配置，更多 podspec 的介绍在<a href="http://guides.cocoapods.org/making/specs-and-specs-repo.html" target="_blank" rel="external">这里</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line">  s.name             = &apos;MZLCategory&apos;</div><div class="line">  s.version          = &apos;0.1.0&apos;</div><div class="line">  s.summary          = &apos;公用组件库：ObjC 的常用 Category 库&apos;</div><div class="line"></div><div class="line"># This description is used to generate tags and improve search results.</div><div class="line">#   * Think: What does it do? Why did you write it? What is the focus?</div><div class="line">#   * Try to keep it short, snappy and to the point.</div><div class="line">#   * Write the description between the DESC delimiters below.</div><div class="line">#   * Finally, don&apos;t worry about the indent, CocoaPods strips it!</div><div class="line"></div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">公用组件库：ObjC 的常用 Category 库，包括 NSString，UIImage 等常用的类的分类</div><div class="line">                       DESC</div><div class="line"></div><div class="line">  s.homepage         = &apos;https://gitlab.com/MZLApp/MZLCategory&apos;</div><div class="line">  # s.screenshots     = &apos;www.example.com/screenshots_1&apos;, &apos;www.example.com/screenshots_2&apos;</div><div class="line">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line">  s.author           = &#123; &apos;lijin&apos; =&gt; &apos;mlijin9011@163.com&apos; &#125;</div><div class="line">  s.source           = &#123; :git =&gt; &apos;https://gitlab.com/MZLApp/MZLCategory.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class="line">  # s.social_media_url = &apos;https://twitter.com/&lt;TWITTER_USERNAME&gt;&apos;</div><div class="line"></div><div class="line">  s.ios.deployment_target = &apos;8.0&apos;</div><div class="line"></div><div class="line">  s.source_files = &apos;MZLCategory/Classes/**/*&apos;        #代码源文件地址，**/*表示Classes目录及其子目录下所有文件，如果有多个目录下则用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置</div><div class="line">  </div><div class="line">  # s.resource_bundles = &#123;</div><div class="line">  #   &apos;MZLCategory&apos; =&gt; [&apos;MZLCategory/Assets/*.png&apos;]  #资源文件地址</div><div class="line">  # &#125;</div><div class="line"></div><div class="line">  # s.public_header_files = &apos;Pod/Classes/**/*.h&apos;     #公开头文件地址</div><div class="line">  # s.frameworks = &apos;UIKit&apos;, &apos;MapKit&apos;                 #所需的framework，多个用逗号隔开</div><div class="line">  # s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;              #依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<p>这个 Pod 已经是一个本地的 Git 仓库，接着我们需要把本地仓库和远程仓库关联起来，先在 Gitlab 上创建一个相应的组件仓库：<a href="https://gitlab.com/MZLApp/MZLCategory.git" target="_blank" rel="external">https://gitlab.com/MZLApp/MZLCategory.git</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd MZLCategory</div><div class="line">$ git add .</div><div class="line">$ git commit -s -m &quot;Initial Commit of Pod Library&quot;</div><div class="line">$ git remote add origin git@gitlab.com:MZLApp/MZLCategory.git   #关联远端仓库</div><div class="line">$ git push origin master     #提交到远端仓库</div></pre></td></tr></table></figure>
<p>创建 tag，这个 tag 需要和 podspec 文件中的 version 一致，不然提交 pod 到 spec repo 的时候就会说找不到此版本，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag -m &quot;Initial Pod&quot; 0.1.0</div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<h2 id="3-提交-Pod-到私有-Spec-Repo"><a href="#3-提交-Pod-到私有-Spec-Repo" class="headerlink" title="3. 提交 Pod 到私有 Spec Repo"></a>3. 提交 Pod 到私有 Spec Repo</h2><p>提交 Pod 到 Spec Repo 就是提交 Pod 的索引文件 podspec，提交之前先验证一下，验证通过后才能提交，执行下面的命令来验证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint --allow-warnings</div></pre></td></tr></table></figure>
<p>验证成功后会输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-&gt; MZLCategory (0.1.0)</div><div class="line">MZLCategory passed validation.</div></pre></td></tr></table></figure>
<p>验证成功后，我们就可以提交 podspec 到 Spec Repo 了，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push MZLSpecs MZLCategory.podspec --use-libraries --allow-warnings</div></pre></td></tr></table></figure>
<p>提交成功后，就可以在 <code>~/.cocoapods/repos/MZLSpecs</code> 目录下看到 MZLCategory 这个 Pod 了，同时 MZLSpecs 的远端仓库中 MZLCategory 这个 pod 的 podspec 也被 push 上去了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MZLSpecs</div><div class="line">└── MZLCategory</div><div class="line">    └── 0.1.0</div></pre></td></tr></table></figure>
<h2 id="4-私有-Pod-库的使用"><a href="#4-私有-Pod-库的使用" class="headerlink" title="4. 私有 Pod 库的使用"></a>4. 私有 Pod 库的使用</h2><p>使用方法同 Github 官方的第三方库，只需要在你的 Podfile 文件中添加你的 Spec Repo 地址作为查找 Pod 库的源地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div><div class="line">source &apos;https://gitlab.com/MZLApp/MZLSpecs.git&apos;</div><div class="line"></div><div class="line">use_frameworks!</div><div class="line">inhibit_all_warnings!</div><div class="line"></div><div class="line">platform :ios, &apos;8.0&apos;</div><div class="line"></div><div class="line">target &apos;SinaNews&apos; do</div><div class="line">    pod &apos;AFNetworking&apos;, &apos;3.1.0&apos;</div><div class="line">    ... ...</div><div class="line">    pod &apos;MZLCategory&apos;,  &apos;0.1.0&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://guides.cocoapods.org/making/private-cocoapods.html" target="_blank" rel="external">CocoaPods官方文档</a></li>
<li><a href="http://www.cocoachina.com/ios/20150228/11206.html" target="_blank" rel="external">使用Cocoapods创建私有podspec</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;项目做多了，你会发现有很多基础功能模块是可以通用的，完全可以独立出来抽象成一个公用库，方便以后开发新项目的时候可以直接使用这些基础组件，不需要再重新开发，提高开发效率。同时，随着项目和业务的发展，工程量越来越大，业务模块越来越多，我们采用组件化的方式来开发，组件化就需要每个业务模块独立开发，方便迭代和代码管理。不管是通用的基础服务组件，还是独立的业务功能组件，都需要我们来进行组件管理。&lt;/p&gt;
&lt;p&gt;CocoaPods 是非常好用的一个iOS依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及管理自己的项目中的私有组件库。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://mlijin9011.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>iOS9下Safari和app间cookie互通</title>
    <link href="http://mlijin9011.github.io/2016/08/13/iOS9%E4%B8%8BSafari%E5%92%8Capp%E9%97%B4cookie%E4%BA%92%E9%80%9A/"/>
    <id>http://mlijin9011.github.io/2016/08/13/iOS9下Safari和app间cookie互通/</id>
    <published>2016-08-13T08:10:02.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在项目有一个需求，比如某新闻业务，当用户还没有下载 app 时，在手机上的 Safari 中浏览了一篇新闻，然后在浏览器中点击“在 app 中查看”，会自动跳转到 AppStore 中下载 app，此时用户可能希望在下载完 app 后能够继续刚才在 Safari 中的浏览内容和一些用户行为。但是用户被引导下载后，并不会希望需要重新回到浏览器，重新再由浏览器发起一个拉起 app 的操作来实现在 app 中的继续浏览，而是更希望在下载后，直接点击 AppStore 中的打开，或者手动打开 app 后，就能够继续刚才的浏览，这就需要在 Safari 和 app 间形成一种数据的互通。</p>
<a id="more"></a>
<p>大概有这么两种方案可以实现这个功能：</p>
<p>一是当用户在 Safari 中浏览新闻内容时，上传用户行为和用户数据到我们服务器中，以一个唯一标识来标识这个设备的数据，这个数据会有一定的时效性，在这个时效性内下载并打开 app，我们会当做用户是希望能够继续延续刚才的浏览。当用户下载 app 打开后，用唯一标识从服务器请求用户行为数据，通过这个数据来打开相应的浏览内容，这样就实现了上面所说的功能。</p>
<p>二是当用户在 Safari 中浏览新闻内容时，保存用户行为数据到 Safari 中的 cookie 里，当用户下载并打开 app 后，我们去读取 Safari 中的 cookie，通过 cookie 内容来打开相应的浏览内容。</p>
<p>第一种方式，能够唯一标识设备的这个值要具备苛刻的条件，想找到其实很不容易，而且可能还会有一定的误伤几率，所以我们选择了第二种方式。</p>
<h2 id="Cookie-互通"><a href="#Cookie-互通" class="headerlink" title="Cookie 互通"></a>Cookie 互通</h2><p>iOS 系统中每个 app 都有自己的沙盒，无法跨越沙盒去访问数据，但是在 iOS9 以后，苹果提供了一个 API：<code>APISFSafariViewController</code>，它跟系统的 Safari 同属于一个 app，所以通过它可以读到 Safari 中的 cookie，那么我们可以在我们的 app 中打开这个 <code>APISFSafariViewController</code>，这样就可以拿到系统 Safari 中保存的 cookie 数据了。但是这个 cookie 内容只是在 <code>APISFSafariViewController</code> 中打开的 wap 页面可以读到，在 app 内是读不到的，可以通过 URL Scheme（OpenUrl）的方式，把这个 cookie 内容传递到 app 中，这样就可以实现我们上面的需求了。</p>
<p>具体的实现思路如下：</p>
<p>用户通过 Safari 浏览 wap1 页面，wap1 页面把用户行为数据写到 cookie 中，当用户通过引导下载 app 后，第一次打开 app 时，在 app 内打开 <code>APISFSafariViewController</code>，打开一个 wap2 页面，在这个 wap2 页面先取到刚才 wap1 页面保存的 cookie 数据，然后在 wap2 中通过 openUrl 的方式，把这个 cookie 数据传递到 app 中，然后通过这个 cookie 数据来实现延续阅读的功能。</p>
<p>在这里，wap1 页面是我们正常的一个 html 页面，里面只是加一个写用户行为数据到 Safari 中的cookie 的操作，这个 cookie 的域采用我们约定好的值，即只有在这个域下的 html 才能读取到这个 cookie。wap2 页面是一个专门用来静默的获取 wap1 的 cookie 值的页面，并且可以静默的通过 openUrl 的方式把 cookie 回传给 app。</p>
<p>可能你会觉得在程序启动后，弹出一个 Safari 页面有点不妥，那么我们可以把这个 <code>APISFSafariViewController</code> 设置为纯透明，这样用户就感觉不到了，然后这个纯透明的 Safari 再通过 openUrl 的方式呼起我们要延续阅读的页面，如果不需要延续阅读，那么就设定一个时间值，在这个时间值后，把这个纯透明的 Safari 隐藏。</p>
<p>参考博文：<a href="http://www.jianshu.com/p/1a46187141fc" target="_blank" rel="external">iOS app与浏览器 跨域互通</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现在项目有一个需求，比如某新闻业务，当用户还没有下载 app 时，在手机上的 Safari 中浏览了一篇新闻，然后在浏览器中点击“在 app 中查看”，会自动跳转到 AppStore 中下载 app，此时用户可能希望在下载完 app 后能够继续刚才在 Safari 中的浏览内容和一些用户行为。但是用户被引导下载后，并不会希望需要重新回到浏览器，重新再由浏览器发起一个拉起 app 的操作来实现在 app 中的继续浏览，而是更希望在下载后，直接点击 AppStore 中的打开，或者手动打开 app 后，就能够继续刚才的浏览，这就需要在 Safari 和 app 间形成一种数据的互通。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative入门（2）—— 接入原生应用</title>
    <link href="http://mlijin9011.github.io/2016/07/24/ReactNative%E5%85%A5%E9%97%A8%EF%BC%882%EF%BC%89/"/>
    <id>http://mlijin9011.github.io/2016/07/24/ReactNative入门（2）/</id>
    <published>2016-07-24T02:18:09.000Z</published>
    <updated>2017-04-12T02:52:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-React-Native-依赖"><a href="#安装-React-Native-依赖" class="headerlink" title="安装 React Native 依赖"></a>安装 React Native 依赖</h2><p>在工程所在目录新建一个文件夹，作为 JS 文件目录，在这个文件夹下，安装 React 和 React Native 依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd x/xx/xxx #你的工程路径</div><div class="line">npm install react</div><div class="line">npm install react-native</div></pre></td></tr></table></figure>
<p>这时这个文件夹下会出现一个 node_modules 文件夹，react 依赖库就在这个文件夹下。</p>
<a id="more"></a>
<h2 id="CocoaPods安装"><a href="#CocoaPods安装" class="headerlink" title="CocoaPods安装"></a>CocoaPods安装</h2><p>在 Podfile 文件中增加以下的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># path 后面的内容修改为正确的路径，根据你的 node_modules 文件夹路径。</div><div class="line">pod &apos;React&apos;, :path =&gt; &apos;./node_modules/react-native&apos;, :subspecs =&gt; [</div><div class="line">  &apos;Core&apos;,</div><div class="line">  &apos;RCTImage&apos;,</div><div class="line">  &apos;RCTNetwork&apos;,</div><div class="line">  &apos;RCTText&apos;,</div><div class="line">  # 添加其他你想在工程中使用的依赖。</div><div class="line">]</div></pre></td></tr></table></figure>
<p>接着安装 pods：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod install</div></pre></td></tr></table></figure>
<h2 id="创建-React-Native-应用"><a href="#创建-React-Native-应用" class="headerlink" title="创建 React Native 应用"></a>创建 React Native 应用</h2><p>首先，创建一个文件夹来保存 React 代码，然后创建一个 js 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir ReactViews</div><div class="line">$ touch ReactViews/test.js</div></pre></td></tr></table></figure>
<p>然后写你的 js 代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Text,</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: &apos;red&apos;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">class SimpleApp extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;Text&gt;This is a simple react native application.&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;SimpleApp&apos;, () =&gt; SimpleApp);</div></pre></td></tr></table></figure>
<p>SimpleApp 是你的模块名，这个在后面会要用到。</p>
<p>接着，往应用里添加容器视图，来容纳 React Native 组件，它可以是你应用里任何的 UIView。</p>
<p>新建一个 ReactView 继承 UIView。</p>
<p>// ReactView.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@interface ReactView : UIView</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>往 ReactView 里添加 RCTRootView，来包含你的 React Native 应用。</p>
<p>// ReactView.m </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#import &quot;RCTRootView.h&quot;</div><div class="line"></div><div class="line">@implementation MZLReactView</div><div class="line"></div><div class="line">- (instancetype)initWithFrame:(CGRect)frame &#123;</div><div class="line">    self = [super initWithFrame:frame];</div><div class="line">    if (self) &#123;</div><div class="line">        self.backgroundColor = [UIColor grayColor];</div><div class="line">        </div><div class="line">        NSURL *jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/test.bundle?platform=ios&quot;];</div><div class="line">        // NSURL *jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;test&quot; withExtension:@&quot;jsbundle&quot;];</div><div class="line">    </div><div class="line">        RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:@&quot;SimpleComponent&quot; initialProperties:nil launchOptions:nil];</div><div class="line">        [self addSubview:rootView];</div><div class="line">        </div><div class="line">        rootView.frame = self.bounds;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>在 UIViewController 中使用这个 ReactView，这样就创建了一个 React Native 应用。</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在工程的根目录下，开启 React Native 开发服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(JS_DIR=`pwd`/ReactViews; cd node_modules/react-native; npm run start -- --root $JS_DIR)</div></pre></td></tr></table></figure>
<p>这条命令会启动一个 React Native 开发服务器，用于构建我们的 bundle 文件。–root 选项用来标明你的 React Native 应用所在的根目录。在我们这里是 ReactViews 目录，里面有一个test.js 文件。开发服务器启动后会打包出 test.bundle 文件来，并可以通过 <code>http://localhost:8081/test.bundle</code> 来访问。</p>
<p>现在编译和运行你的应用，就可以看到你的 React Native 应用在 ReactView 内运行。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在底层，当 RCTRootView 初始化完成以后，它会尝试从开发服务器下载、解析并运行打包后的脚本文件。所以你所要做的就是实现你自己的容器视图或者视图控制器，然后把 RCTRootView 作为子视图加入，接下来 RCTRootView 会搞定你的脚本文件然后渲染你的 React 组件。</p>
<p>你可以在这里获得一个样例应用的完整源代码。</p>
<p>参考博文：<a href="http://reactnative.cn/docs/0.31/integration-with-existing-apps.html#content" target="_blank" rel="external">React Native 中文网：嵌入到现有原生应用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-React-Native-依赖&quot;&gt;&lt;a href=&quot;#安装-React-Native-依赖&quot; class=&quot;headerlink&quot; title=&quot;安装 React Native 依赖&quot;&gt;&lt;/a&gt;安装 React Native 依赖&lt;/h2&gt;&lt;p&gt;在工程所在目录新建一个文件夹，作为 JS 文件目录，在这个文件夹下，安装 React 和 React Native 依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd x/xx/xxx #你的工程路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install react&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install react-native&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时这个文件夹下会出现一个 node_modules 文件夹，react 依赖库就在这个文件夹下。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="http://mlijin9011.github.io/tags/React-Native/"/>
    
      <category term="iOS" scheme="http://mlijin9011.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React Native入门（1）—— 组件及生命周期</title>
    <link href="http://mlijin9011.github.io/2016/07/10/ReactNative%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/"/>
    <id>http://mlijin9011.github.io/2016/07/10/ReactNative入门（1）/</id>
    <published>2016-07-10T03:54:34.000Z</published>
    <updated>2017-08-21T01:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一个 iOS 原生应用的开发者，刚开始接触 React Native，先来学习下 React Native 中的组件结构和生命周期，理解一个 React Native 组件如何进行展示，如何进行开发。</p>
<a id="more"></a>
<h2 id="组件的构成"><a href="#组件的构成" class="headerlink" title="组件的构成"></a>组件的构成</h2><p>在 React Native 中，所有展示的界面，都可以看做是一个组件（Component），每一个组件根据功能和逻辑的复杂程度，又都是由许多小的组件拼成，每个小的组件也都有自己对应的逻辑，不过他们都遵循同样的代码结构。</p>
<p>先来看一个完整的 js 文件中的代码，然后我们以它为例来分析其中的代码结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">class AwesomeProject extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;&#123;alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">          Welcome to React Native!</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          To get started, edit index.ios.js</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          Press Cmd+R to reload,&#123;&apos;\n&apos;&#125;</div><div class="line">          Cmd+D or shake for dev menu</div><div class="line">        &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: 20,</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    margin: 10,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    color: &apos;#333333&apos;,</div><div class="line">    marginBottom: 5,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;AwesomeProject&apos;, () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>
<p>这段代码中组件的代码结构：</p>
<h3 id="包和组件引用"><a href="#包和组件引用" class="headerlink" title="包和组件引用"></a>包和组件引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>
<p><code>&#39;use strict&#39;</code> 表示开启了 Strict Mode，Strict Mode 使 JavaScript 的错误处理可以有所提高，一些语言缺陷也可以避免。</p>
<p><code>import {} from &#39;&#39;</code> 表示将 react、react-native 包加载进来，{ } 中的内容是引用来自 React Native 官方的组件、API 以及第三方或开发者项目中构建的组件，形式为该组件或 API 的 React 类名。import 是 ES6 的语法，这个概念等同于 iOS 或者 Swift 中的 “链接库” 或者 “导入库”。</p>
<h3 id="组件类的声明"><a href="#组件类的声明" class="headerlink" title="组件类的声明"></a>组件类的声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class AwesomeProject extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      ...</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这部分用于构造组件的状态和具体的展示结构，class 是在 ES6 中被引入的，利用 <code>class xxx extends Component {...}</code> 来实例化一个 React Native 组件对象，{ } 中的内容会包含组件的几个重要的生命周期（见下文），这部分是一个组件必不可少的地方，没有这些内容，就无法构成一个组件。</p>
<h3 id="组件样式的声明"><a href="#组件样式的声明" class="headerlink" title="组件样式的声明"></a>组件样式的声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: 20,</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    margin: 10,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    color: &apos;#333333&apos;,</div><div class="line">    marginBottom: 5,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用 <code>StyleSheet.create({...})</code> 来实例化 React Native 样式对象，{ } 中的内容为 JSON 形式的 React Native 样式，来源于 CSS3，这些声明的样式可以在上面构建组件时（JSX 代码中）使用。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppRegistry.registerComponent(&apos;AwesomeProject&apos;, () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>
<p>AppRegistry 定义了 App 的入口，并提供了根组件。这部分只有在作为入口的 js 文件中才会有。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module.exports = HelloWorld;</div></pre></td></tr></table></figure>
<p>这里导出了 HelloWorld 类，可以在外部 js 文件中引入 HelloWorld 组件。这部分只有在非入口js 文件中才会有。</p>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>一个 React Native 组件的生命周期分为实例化、存在期和销毁期三个阶段，如下图。</p>
<p>第一阶段：实例化期，是组件第一次绘制阶段，如图中的上面的虚线框内，在这个阶段完成了组件的加载和初始化；</p>
<p>第二阶段：存在期，是组件正在运行和交互阶段，如图中的左下的虚线框内，在这个阶段组件可以处理用户交互，或者接收事件更新界面；</p>
<p>第三阶段：销毁期，是组件被卸载消亡的阶段，如图中的右下的虚线框内，在这个阶段做一些组件的清理工作。</p>
<p><img src="/2016/07/10/ReactNative入门（1）/component-lifecycle.jpg" alt="logo"></p>
<p>下面具体分析组件生命周期的各个阶段：</p>
<h3 id="实例化阶段"><a href="#实例化阶段" class="headerlink" title="实例化阶段"></a>实例化阶段</h3><p>实例化期分为5个阶段，每个阶段以一个函数来进行控制：</p>
<p><strong>getDefaultProps</strong></p>
<p>在组件创建的时候，会先调用 <code>getDefaultProps()</code>。由于这个函数在整个生命周期中只会调用一次，所以通常在这里会初始化组件的一些默认属性，将固定的内容放在这个过程中进行初始化和赋值。</p>
<p><strong>getInitialState</strong></p>
<p>在组件被创建后并加载的时候，会先调用 <code>getInitialState()</code> 来初始化组件的状态。该函数在整个生命周期中只会调用一次。</p>
<p><strong>componentWillMount</strong></p>
<p>在组件初始化后准备加载组件的时候，会先调用 <code>componentWillMount()</code>，在第一次绘制 <code>render()</code> 之前调用，也是渲染一个组件前最后一次修改 state 的机会。这个函数在整个生命周期中也只被调用一次，可以在这里做一些业务初始化操作，也可以设置组件状态。</p>
<p><strong>render</strong></p>
<p>这是一个组件必须有的方法，形式为一个有返回值的函数，会返回一段 JSX 或其他 React 组件来构成 DOM，表示该组件的结构和布局，和 Android 的 XML 布局类似。在 <code>render()</code> 函数中，只能通过 this.state 和 this.props 来访问在之前函数中初始化的数据值。</p>
<p><strong>componentDidMount</strong></p>
<p>在组件第一次绘制之后，会调用 <code>componentDidMount()</code>，表示组件已经加载完成，这个函数在整个生命周期中也只被调用一次。</p>
<p>从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout、setInterval，或者发起网络请求，放在这个函数里进行，来保证不会出现UI上的错误。这个函数之后，就进入了稳定运行状态，等待事件触发。</p>
<blockquote>
<p>注：先调用子组件的 componentDidMount()，然后才调用父组件的。</p>
</blockquote>
<h3 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h3><p>运行期主要是用来处理与用户的交互：</p>
<p><strong>componentWillReceiveProps</strong></p>
<p>如果父元素对组件的属性（props）进行了修改，组件收到新的属性时，就会调用 <code>componentWillReceiveProps(object nextProps)</code>，参数 nextProps 是即将被设置的属性，可以通过 <code>this.props</code> 来获取旧的属性。</p>
<p>在这个回调函数里面，你可以根据属性的变化，通过调用 <code>this.setState()</code> 来更新组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps: function(nextProps) &#123;  </div><div class="line">  this.setState(&#123;</div><div class="line">    likesIncreasing: nextProps.likeCount &gt; this.props.likeCount</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>shouldComponentUpdate</strong></p>
<p>当组件接收到新的属性或者状态改变时，都会触发调用 <code>boolean shouldComponentUpdate(object nextProps, object nextState)</code>，参数 nextProps 是即将被设置的属性，同 <code>componentWillReceiveProps(...)</code> 一样，nextState 是即将更新的状态值。这个函数返回一个布尔值，来决定是否需要更新组件进行渲染，返回 true 表示需要更新，继续走后面的更新流程。否则不更新，直接进入等待状态。</p>
<p><strong>componentWillUpdate</strong></p>
<p>如果组件状态或者属性改变，并且上面的 <code>shouldComponentUpdate(...)</code> 返回为 true 时，会在开始渲染组件之前调用 <code>componentWillUpdate(object nextProps, object nextState)</code>，参数同 <code>shouldComponentUpdate(...)</code> 。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。接着就会调用 render() 来更新界面了。</p>
<p><strong>componentDidUpdate</strong></p>
<p>调用了 <code>render()</code> 更新完成界面之后，会调用 <code>componentDidUpdate(object prevProps, object prevState)</code>，此函数的输入参数变成了 prevProps 和 prevState，因为到这里已经完成了属性和状态的更新了。</p>
<h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h3><p><strong>componentWillUnmount</strong></p>
<p>当组件要被从界面上移除的时候，就会调用 <code>componentWillUnmount()</code>，在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求、点击事件Listener等。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组件的生命周期分成三个状态：</p>
<pre><code>Mounting：  已插入真实 DOM
Updating：  正在被重新渲染
Unmounting：已移出真实 DOM
</code></pre><p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数：</p>
<pre><code>componentWillMount()
componentDidMount()
componentWillUpdate(object nextProps, object nextState)
componentDidUpdate(object prevProps, object prevState)
componentWillUnmount()
</code></pre><p>此外，React 还提供两种特殊状态的处理函数：</p>
<pre><code>componentWillReceiveProps(object nextProps)：组件收到新的参数时调用
shouldComponentUpdate(object nextProps, object nextState)：判断是否重新渲染时调用
</code></pre><p>两个初始化函数：</p>
<pre><code>getDefaultProps()：进行初始化和赋值
getInitialState()：初始化组件的状态
</code></pre><p>渲染函数：</p>
<pre><code>render()
</code></pre><p>参考博文：<a href="http://www.race604.com/react-native-component-lifecycle/" target="_blank" rel="external">React Native 中组件的生命周期</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作为一个 iOS 原生应用的开发者，刚开始接触 React Native，先来学习下 React Native 中的组件结构和生命周期，理解一个 React Native 组件如何进行展示，如何进行开发。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="http://mlijin9011.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>几种排序算法</title>
    <link href="http://mlijin9011.github.io/2016/07/08/%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://mlijin9011.github.io/2016/07/08/几种排序算法/</id>
    <published>2016-07-08T09:41:05.000Z</published>
    <updated>2017-08-21T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基础知识整理，十大排序算法总结：</p>
<p>查找和排序算法是算法的入门知识，其经典思想可以用于很多算法当中。学习算法首先要熟悉其思想，实际中加以灵活应用。<br>常见的排序算法有，快速排序、归并排序、插入排序、冒泡排序、堆排序、基数排序、桶排序等。</p>
<p>接下来我们就分析一下常见的排序算法及其使用场景。</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;基础知识整理，十大排序算法总结：&lt;/p&gt;
&lt;p&gt;查找和排序算法是算法的入门知识，其经典思想可以用于很多算法当中。学习算法首先要熟悉其思想，实际中加以灵活应用。&lt;br&gt;常见的排序算法有，快速排序、归并排序、插入排序、冒泡排序、堆排序、基数排序、桶排序等。&lt;/p&gt;
&lt;p&gt;接下来我们就分析一下常见的排序算法及其使用场景。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://mlijin9011.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="http://mlijin9011.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mlijin9011.github.io/2016/07/07/hello-world/"/>
    <id>http://mlijin9011.github.io/2016/07/07/hello-world/</id>
    <published>2016-07-07T10:10:00.000Z</published>
    <updated>2017-08-17T07:25:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="Hexo-Next-主题使用帮助"><a href="#Hexo-Next-主题使用帮助" class="headerlink" title="Hexo Next 主题使用帮助"></a>Hexo Next 主题使用帮助</h2><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://mlijin9011.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
